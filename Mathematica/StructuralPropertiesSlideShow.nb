(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    923306,      16831]
NotebookOptionsPosition[    918041,      16654]
NotebookOutlinePosition[    919406,      16695]
CellTagsIndexPosition[    919325,      16690]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 TogglerBox[2, {1->
  OverlayBox[{
   TagBox[GridBox[{
      {
       GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBLECOU2VJahIzkCEFxAJADBL8//8/
Qfzo0SP2GzduCF29elXs/Pnz0sgYn747d+5wA9VoArE/EB8B4uPoGJu+Fy9e
MF+4cEENKB8AxBeB+AMQ/wXif+gYi1tBdvoB8QUg/ghV9x8XRtb7/PlzFqje
t1D7cOrDpv/ixYvqUHuJ0ousHxpWAVA3E6UXWT80nC8S8i82/Q8ePOAgx26Y
/uvXrwsD2UdJ8Tey/kuXLolD0wNJbofpB6YVSUr0n4ek5QHTT6n7KQ0/SuOP
0vRDafqlRv6BxgPZ+Ret/HhHrBl4yi9QWHwiFB7Yyk+QO6B+CTxPYvmJjG/f
vs17nozyG1f9cR6t7gBhAPeiQ4A=
         "], {{0, 26}, {16, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BaseStyle->"ImageGraphics",
        ImageSize->Magnification[1],
        ImageSizeRaw->{16, 26},
        PlotRange->{{0, 16}, {0, 26}}], 
       GraphicsBox[RasterBox[CompressedData["
1:eJzt2d9OVFcUB2DSNmkfQRFEiRQ1gCK1vW4fwT6BJu1tE9uk8fUUERE9aECC
qLGYEmKkErWxtont2mGdcDLVOpNgZijfJB9hzp+99j6zb9b5Hb3ww7nvP+rr
6/vxs/hz7vzPX1+8eP7St5/El28u/fTdhY/jn/6w8GlfXzlYVdWhDgyEwXT4
HQYbBho6qQMAAOxt/Q0HWxxo0TzX3xij7juGwpFwNAyHY2EkfB6OhxPhZBgL
42EinAqnw2SYSl+Es+HL9FWb6uvP5hj1eJNZ41TWHM85nMw5Hc85juSch3MN
R3JNdf/UfGbtPqf6WdW6/XsDAADsV7vd/7b2vqPV2/veuuc9k6Za1Mfr3vVt
feto9e+eVb9KL2tmz81M+n25dadZ9bU2zYXbYSmshNXwoOF+uJfn7obFcKfa
/twMN8L1MNtBTQAAYO+ZSVfTdLqSLreoj0/n9eXe0jeUHmQ+3AoL1XZ/UfqR
5Wq77yg9yMPwS3gcfg0b4Ul4Gn4LW+F5eBl+D6/CH+F1+DP99Q71+dd5z6sc
42WOuZU1nmbNjZzD45zTw5zjSs55KdewkGuazzXONp5Xu8+pflb185rpgd8d
AABgv/kQ/W/J4krGVvrIkruVDO5RWAvr1U7fuxmeVTt9b/Ei1d+38prNaqdv
Xc+xHuXY97LWYtbWr9Jryj4sGXPJmkvmXD7l/UrZsyWTLu9dyj4u72Ca2fVq
nivvY8renuug5ps2/b2L2q0JAADwX3azT/kQuv18AAAA2Pv0rOxn3djz3X6f
BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAADsHW/a1I2aAAAAAAAAsJ91OyOEburGnr/W
prlwOyyFlbAaHjTcD/fy3N2wGO5U25+b4Ua4HmY7qAkAAAAAAAC9aCZdTdPp
Srrcoj4+ndeXe0tuVjK4+XCr2s7iSsa2XG3nbiWDexTWwnrYCE/CZngWtsLz
9CLV37fyms28ZyPHWMsxH2SN5ax5O+cwn3Oabayv3XXVa6vXN9MDvxN7W9mH
JWMuWXPJnMunZNBlz5ZMumTTZR+XrLqZXa/muZJtl70910HNQx0YCIPp8DsM
Ngw0dFIHAAAAAAAAel1/w8EWB1o0z/U3xqhzt6FwNAyHY2EkjIYT4WQYC+Nh
IpwOk+FMmmpRH5/Mayfy3rEc60SOPZK1hrP2ULWT9zXX2O666rXVuv378P/S
zJ6bmfT7cuuOsup/AFmW9vs=
         "], {{0, 26}, {2000, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BaseStyle->"ImageGraphics",
        ImageSize->Magnification[1],
        ImageSizeRaw->{2000, 26},
        PlotRange->{{0, 2000}, {0, 26}}], 
       GraphicsBox[RasterBox[CompressedData["
1:eJy9lstOwkAUhhthQUJcuUBl5cr4GPoABvEJINGtCZoYng4Il4Z7gXAJYUHY
QAi3GlYQPZ5/4pCm0pYC2uSDaXvmn5lzzpzpVfQl/HyiKMqrj3/CkffbWCwS
f/TyzV387Snq4cYlc87gYbVaDbpB07SLRqMR6Pf7PiJSnOA+6h7kmBBz0+12
Tx30v/bgk9GZOvPAa7oejUYeC306AIz1wWjM/WAw8B9ZX4L1TDHGcDj02ulX
KpUNbt79jKHBV1b66Fcul3fCYgzEJNTr9fxmfaldKpWoUChQPp8X/8ViUWB8
BhuLMRCPGvJqmz76QWOxWFCtVqNsNku5XE6AdqfToclkImxga7cGuT/M+uw/
ms/ntF6vqdlsUjKZFKCNC/pynTZxyLbb7bNt/sHcMpkMzWYzoVev1wW4xuOx
WAdsbGIAH6ncJ7BNH/6FRjqdJl3XSV7T6VSsA76CDWxt9oSKOmLOH/RBLKEP
LVVVN/qJRGKjDxsnfSZoN3/4CPNfrVa/5n+IvtH/iDHu9/G/2T/G/JT5A41U
KiXm3Wq1xBhcx5zy0zK+Mj+Xy6XIf5n7EuQ/9sYh+Wneqy73r+3+2rX2OPh+
a31wqpHG5xbatvXtCDjW5wO1Z9UdzheXyPMRPrc6H49yvpvn/Y/fJ3/6ffUN
AyH/6w==
         "], {{0, 26}, {24, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BaseStyle->"ImageGraphics",
        ImageSize->Magnification[1],
        ImageSizeRaw->{24, 26},
        PlotRange->{{0, 24}, {0, 26}}]}
     },
     AutoDelete->False,
     GridBoxItemSize->{"Columns" -> {Automatic, 
         Scaled[0.6], Automatic}},
     GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
    "Grid"], 
   PaneBox[
    StyleBox[
     RowBox[{
     "Background", " ", "images", " ", "and", " ", "text", " ", "colors", " ",
       "have", " ", "been", " ", "adjusted", " ", "for", " ", "editing", " ", 
      
      RowBox[{"purposes", "."}]}],
     LineBreakWithin->False,
     FontFamily->"Helvetica",
     FontSize->12,
     FontColor->GrayLevel[0.4]],
    Alignment->Center,
    ImageSize->Scaled[0.5],
    ScrollPosition->{0., 0.}]},
   Alignment->{Center, Center}], 2->""}, "1"]], "SlideShowNavigationBar", \
"FirstSlide",
 CellMargins->{{0, 0}, {0, 0}},
 CellFrameLabelMargins->2,
 CellSize->{Inherited, 30},
 CellChangeTimes->{{3.583603226907048*^9, 3.583603227813674*^9}, 
   3.583758746772694*^9},
 TextAlignment->Center,
 CellTags->"SlideShowHeader"],

Cell["Orbigraph Structure", "Title",
 CellChangeTimes->{
  3.559948400406288*^9, {3.583504261287343*^9, 3.5835042677586803`*^9}, {
   3.583504483666679*^9, 3.583504485937997*^9}, {3.583765255848549*^9, 
   3.5837652578904533`*^9}}],

Cell[CellGroupData[{

Cell["Covering Graphs", "Item",
 CellChangeTimes->{
  3.583504285126082*^9, 3.58350435527768*^9, 3.5835044015085917`*^9, {
   3.5835044645963984`*^9, 3.583504467604617*^9}, {3.58375840957865*^9, 
   3.58375841115511*^9}}],

Cell["The Quotient Process", "Item",
 CellChangeTimes->{
  3.583504285126082*^9, 3.58350435527768*^9, 3.5835044015085917`*^9, {
   3.5835044645963984`*^9, 3.583504475090214*^9}, {3.583758413604252*^9, 
   3.58375841774929*^9}, {3.583758673360825*^9, 3.583758673587078*^9}}],

Cell["\<\
Characterization of Good and Bad Orbigraphs/Orbifolds\
\>", "Item",
 CellChangeTimes->{
  3.583504285126082*^9, 3.58350435527768*^9, 3.5835044015085917`*^9, {
   3.5835044645963984`*^9, 3.583504475090214*^9}, {3.583758413604252*^9, 
   3.583758435365838*^9}, {3.583758680365896*^9, 3.583758683094779*^9}}],

Cell["Conclusion", "Item",
 CellChangeTimes->{
  3.583504285126082*^9, 3.58350435527768*^9, 3.5835044015085917`*^9, {
   3.5835044645963984`*^9, 3.583504475090214*^9}, {3.583758413604252*^9, 
   3.583758442692931*^9}}],

Cell["Further Results", "Item",
 CellChangeTimes->{
  3.583504285126082*^9, 3.58350435527768*^9, 3.5835044015085917`*^9, {
   3.5835044645963984`*^9, 3.583504475090214*^9}, {3.583758413604252*^9, 
   3.583758444490077*^9}}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"$Path", ",", 
    RowBox[{"NotebookDirectory", "[", "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"<<", "\"\<Orbigraphs.m\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"<<", "\"\<MarkovOrbigraphs.m\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"<<", "\"\<OrbigraphCovers.m\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"<<", "\"\<UniversalCoverings.m\>\""}], ";"}], 
  "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.58377314259728*^9, 3.583773177571333*^9}, {
  3.5837732483472157`*^9, 3.58377325010452*^9}, {3.583782767017331*^9, 
  3.583782774287319*^9}, {3.58378624105332*^9, 3.583786255017399*^9}, {
  3.58378639168183*^9, 3.583786425168241*^9}, {3.583786574750271*^9, 
  3.583786622056802*^9}, {3.5837866534711523`*^9, 3.5837866692557383`*^9}, {
  3.583949843135975*^9, 3.58394985578376*^9}, {3.58395000518167*^9, 
  3.58395000909523*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 TextAlignment->Center,
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Quotients and Covering Graphs", "Section",
 CellChangeTimes->{{3.583504537673525*^9, 3.583504582132621*^9}, {
  3.583758401277527*^9, 3.5837584050171013`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"grassman1", "=", 
   RowBox[{"PermutationGroup", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "4"}], "}"}]}], "}"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "3"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "4"}], "}"}]}], "}"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Cycles", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "4"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "3"}], "}"}]}], "}"}], "]"}]}], 
     "\[IndentingNewLine]", "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cover", "=", 
   RowBox[{"CompleteGraph", "[", 
    RowBox[{"6", ",", 
     RowBox[{"VertexSize", "\[Rule]", "0.3"}], ",", " ", 
     RowBox[{"VertexLabels", "\[Rule]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"i", " ", "\[Rule]", " ", "i"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"i", ",", " ", "1", ",", " ", "6"}], "}"}]}], "]"}]}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"cover", " ", "=", " ", 
    RowBox[{"SetProperty", "[", 
     RowBox[{"cover", ",", " ", 
      RowBox[{"VertexShapeFunction", "\[Rule]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "\"\<Square\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"2", "\[Rule]", "\"\<Square\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"3", "\[Rule]", "\"\<Square\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"4", "\[Rule]", "\"\<Square\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"5", "\[Rule]", "\"\<Triangle\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"6", "\[Rule]", "\"\<Star\>\""}]}], "\[IndentingNewLine]", 
        "}"}]}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"highlightCover", " ", "=", " ", 
   RowBox[{"HighlightGraph", "[", 
    RowBox[{"cover", ",", " ", 
     RowBox[{"CompletePartition", "[", 
      RowBox[{"cover", ",", " ", 
       RowBox[{"GroupOrbits", "[", "grassman1", "]"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"highlightCover", " ", "=", 
    RowBox[{"SetProperty", "[", 
     RowBox[{"highlightCover", ",", " ", 
      RowBox[{"VertexStyle", "\[Rule]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "Red"}], ",", "\[IndentingNewLine]", 
         RowBox[{"2", "\[Rule]", "Red"}], ",", "\[IndentingNewLine]", 
         RowBox[{"3", "\[Rule]", "Red"}], ",", "\[IndentingNewLine]", 
         RowBox[{"4", "\[Rule]", "Red"}], ",", "\[IndentingNewLine]", 
         RowBox[{"5", "\[Rule]", "Yellow"}], ",", "\[IndentingNewLine]", 
         RowBox[{"6", "\[Rule]", "Purple"}]}], "\[IndentingNewLine]", 
        "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"orbigraph1", "=", 
   RowBox[{"OrbigraphFromGroup", "[", 
    RowBox[{"cover", ",", " ", "grassman1"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"orbigraph1", " ", "=", " ", 
    RowBox[{"SetProperty", "[", 
     RowBox[{"orbigraph1", ",", " ", "\[IndentingNewLine]", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"VertexSize", "\[Rule]", ".2"}], ",", "\[IndentingNewLine]", 
        RowBox[{"VertexShapeFunction", "\[Rule]", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "\[Rule]", "\"\<Square\>\""}], ",", " ", 
           RowBox[{"2", "\[Rule]", " ", "\"\<Triangle\>\""}], ",", " ", 
           RowBox[{"3", "\[Rule]", "\"\<Star\>\""}]}], "}"}]}], ",", " ", 
        "\[IndentingNewLine]", 
        RowBox[{"VertexStyle", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "\[Rule]", " ", "Red"}], ",", " ", 
           RowBox[{"2", "\[Rule]", "Yellow"}], ",", " ", 
           RowBox[{"3", "\[Rule]", "Purple"}]}], "}"}]}]}], 
       "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Column", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"PaneSelector", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"1", " ", "\[Rule]", " ", 
          RowBox[{"Style", "[", 
           RowBox[{
           "\"\<What is a covering graph?\>\"", ",", "\"\<Subsection\>\""}], 
           "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"2", "\[Rule]", " ", 
          RowBox[{"Style", "[", 
           RowBox[{
           "\"\<What is an equitable partition?\>\"", ",", " ", 
            "\"\<Subsection\>\""}], "]"}]}], ",", " ", "\[IndentingNewLine]", 
         
         RowBox[{"3", "\[Rule]", " ", 
          RowBox[{"Style", "[", 
           RowBox[{"\"\<How do we quotient?\>\"", ",", "\"\<Subsection\>\""}],
            "]"}]}]}], "\[IndentingNewLine]", "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Dynamic", "[", "time", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"TransitionEffect", "\[Rule]", "\"\<Fade\>\""}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Slider", "[", 
      RowBox[{
       RowBox[{"Dynamic", "[", "time", "]"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "3", ",", " ", "1"}], "}"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"PaneSelector", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"1", " ", "\[Rule]", " ", 
          RowBox[{"SetProperty", "[", 
           RowBox[{"cover", ",", 
            RowBox[{"ImageSize", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"300", ",", "300"}], "}"}]}]}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"2", "\[Rule]", " ", 
          RowBox[{"SetProperty", "[", 
           RowBox[{"highlightCover", ",", 
            RowBox[{"ImageSize", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"300", ",", "300"}], "}"}]}]}], "]"}]}], " ", ",", 
         "\[IndentingNewLine]", 
         RowBox[{"3", "\[Rule]", " ", 
          RowBox[{"Grid", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"SetProperty", "[", 
                RowBox[{"highlightCover", ",", " ", 
                 RowBox[{"ImageSize", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"300", ",", "300"}], "}"}]}]}], "]"}], ",", " ", 
               "\[IndentingNewLine]", 
               RowBox[{"Spacer", "[", "100", "]"}], ",", 
               RowBox[{"SetProperty", "[", 
                RowBox[{"orbigraph1", ",", " ", 
                 RowBox[{"ImageSize", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"300", ",", "300"}], "}"}]}]}], "]"}]}], 
              "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "}"}], ",",
             " ", "\[IndentingNewLine]", 
            RowBox[{"ItemSize", "\[Rule]", "Full"}]}], "]"}]}]}], 
        "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Dynamic", "[", "time", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"TransitionEffect", "\[Rule]", "\"\<Fade\>\""}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]}], 
    "\[IndentingNewLine]", "}"}], ",", "Center"}], 
  "]"}], "\[IndentingNewLine]"}], "Input",
 CellOpen->False,
 CellChangeTimes->CompressedData["
1:eJwdzV1IUwEABeC7BTnJnxi6jJnYbaaUjQRZzkidkbo0aXdMTGppzRCCpiFC
5KwHi60oEwVt5JzSrPB3ji3mGMxQi0FESy+GIsVyoyVOa0Epue65D4fv4XA4
B69oqXouQRBHmcBF8b6SncmQjHIFS+F8ekoF/Gh1KaE5a6UBij6dvA4fN10y
QIIWdcM+Of8VPL66Pg6FnDezMD2snIOjW3ELsM7Ap9mfn82/YZe2MApJh58X
ZfwsiCRB49bGaTgdjZHD8zxaATVVUg0cUiy3QGqvswOaJnVd8ITdYoH7r5HD
sLcoyQl76Fg3tNqoOeg5VneKsIVkgSljAZSpus9A7ipZApsrzWeh+t73cphn
ESvg5TUrBUMDqbWwNd7Fyjf4WmFTdbYONh5K64dlpHaM/fHobdCXPeiAhXeu
LsH37ovf4LlA5xr8ZSqO5TBKBqWuXYyb+b2sdKJoGjZEMr1wz4zQB438Hwvw
vrPmbQzja8k7L/zqCCrFjHdbtlUw+CVHDdeTO2uhOVGvgQkJznq4u6xaBytX
HrTD4jZvByzibj6BL3v8T9n+xb8BSP75MAwjj4Qj7L5dPQHjpnLtsCAnbxk2
3hL4YYCnC8NnRyTb0ORpy73NeFj+VwrTfAdkcCfjQikci7jL4c3wwxtwXv88
eZFxpIYjgP8B2FVzng==
  "]],

Cell[BoxData[
 TagBox[GridBox[{
    {
     PaneSelectorBox[{1->
      StyleBox["\<\"What is a covering graph?\"\>", "Subsection",
       StripOnInput->False], 2->
      StyleBox["\<\"What is an equitable partition?\"\>", "Subsection",
       StripOnInput->False], 3->
      StyleBox["\<\"How do we quotient?\"\>", "Subsection",
       StripOnInput->False]}, Dynamic[$CellContext`time],
      Alignment->Center,
      TransitionEffect->"Fade"]},
    {
     SliderBox[Dynamic[$CellContext`time], {1, 3, 1}]},
    {
     PaneSelectorBox[{1->
      GraphicsBox[
       NamespaceBox["NetworkGraphics",
        DynamicModuleBox[{Typeset`graph = HoldComplete[
          Graph[{1, 2, 3, 4, 5, 6}, {Null, 
            SparseArray[
            Automatic, {6, 6}, 0, {
             1, {{0, 5, 10, 15, 20, 25, 30}, {{2}, {3}, {4}, {5}, {6}, {1}, {
               3}, {4}, {5}, {6}, {1}, {2}, {4}, {5}, {6}, {1}, {2}, {3}, {
               5}, {6}, {1}, {2}, {3}, {4}, {6}, {1}, {2}, {3}, {4}, {5}}}, 
              Pattern}]}, {
           GraphLayout -> "CircularEmbedding", ImageSize -> {300, 300}, 
            VertexLabels -> {1 -> 1, 6 -> 6, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5}, 
            VertexShapeFunction -> {
             3 -> "Square", 4 -> "Square", 5 -> "Triangle", 1 -> "Square", 6 -> 
              "Star", 2 -> "Square"}, VertexSize -> {0.3}}]], Typeset`boxes, 
         Typeset`boxes$s2d = GraphicsGroupBox[{{
            Directive[
             Opacity[0.7], 
             Hue[0.6, 0.7, 0.5]], 
            LineBox[{{
               DynamicLocation["VertexID$1", Automatic, Center], 
               DynamicLocation["VertexID$2", Automatic, Center]}, {
               DynamicLocation["VertexID$1", Automatic, Center], 
               DynamicLocation["VertexID$3", Automatic, Center]}, {
               DynamicLocation["VertexID$1", Automatic, Center], 
               DynamicLocation["VertexID$4", Automatic, Center]}, {
               DynamicLocation["VertexID$1", Automatic, Center], 
               DynamicLocation["VertexID$5", Automatic, Center]}, {
               DynamicLocation["VertexID$1", Automatic, Center], 
               DynamicLocation["VertexID$6", Automatic, Center]}, {
               DynamicLocation["VertexID$2", Automatic, Center], 
               DynamicLocation["VertexID$3", Automatic, Center]}, {
               DynamicLocation["VertexID$2", Automatic, Center], 
               DynamicLocation["VertexID$4", Automatic, Center]}, {
               DynamicLocation["VertexID$2", Automatic, Center], 
               DynamicLocation["VertexID$5", Automatic, Center]}, {
               DynamicLocation["VertexID$2", Automatic, Center], 
               DynamicLocation["VertexID$6", Automatic, Center]}, {
               DynamicLocation["VertexID$3", Automatic, Center], 
               DynamicLocation["VertexID$4", Automatic, Center]}, {
               DynamicLocation["VertexID$3", Automatic, Center], 
               DynamicLocation["VertexID$5", Automatic, Center]}, {
               DynamicLocation["VertexID$3", Automatic, Center], 
               DynamicLocation["VertexID$6", Automatic, Center]}, {
               DynamicLocation["VertexID$4", Automatic, Center], 
               DynamicLocation["VertexID$5", Automatic, Center]}, {
               DynamicLocation["VertexID$4", Automatic, Center], 
               DynamicLocation["VertexID$6", Automatic, Center]}, {
               DynamicLocation["VertexID$5", Automatic, Center], 
               DynamicLocation["VertexID$6", Automatic, Center]}}]}, {
            Directive[
             Hue[0.6, 0.2, 0.8], 
             EdgeForm[
              Directive[
               GrayLevel[0], 
               Opacity[0.7]]]], 
            TagBox[{
              TagBox[
               
               RectangleBox[{-0.9983783537844388, 
                0.36764705000000086`}, {-0.733672453784439, 
                0.6323529500000007}], "DynamicName", BoxID -> "VertexID$1"], 
              InsetBox[
               FormBox["1", TraditionalForm], 
               Offset[{2, 2}, 
                DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
               ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
             BoxID -> "VertexLabelID$1"], 
            TagBox[{
              TagBox[
               
               RectangleBox[{-0.9983783537844383, -0.6323529499999994}, \
{-0.7336724537844385, -0.3676470499999995}], "DynamicName", BoxID -> 
               "VertexID$2"], 
              InsetBox[
               FormBox["2", TraditionalForm], 
               Offset[{2, 2}, 
                DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
               ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
             BoxID -> "VertexLabelID$2"], 
            TagBox[{
              TagBox[
               
               RectangleBox[{-0.13235294999999953`, -1.13235295}, {
                0.1323529500000003, -0.8676470500000001}], "DynamicName", 
               BoxID -> "VertexID$3"], 
              InsetBox[
               FormBox["3", TraditionalForm], 
               Offset[{2, 2}, 
                DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
               ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
             BoxID -> "VertexLabelID$3"], 
            TagBox[{
              TagBox[
               
               RectangleBox[{0.733672453784439, -0.6323529500000011}, {
                0.9983783537844388, -0.3676470500000013}], "DynamicName", 
               BoxID -> "VertexID$4"], 
              InsetBox[
               FormBox["4", TraditionalForm], 
               Offset[{2, 2}, 
                DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
               ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
             BoxID -> "VertexLabelID$4"], 
            TagBox[{
              TagBox[
               
               PolygonBox[{{0.8660254037844386, 0.6684349999999991}, {
                0.6983779037844388, 0.37806184999999937`}, {
                1.0336729037844385`, 0.37806184999999937`}, {
                0.8660254037844386, 0.6684349999999991}}], "DynamicName", 
               BoxID -> "VertexID$5"], 
              InsetBox[
               FormBox["5", TraditionalForm], 
               Offset[{2, 2}, 
                DynamicLocation["VertexID$5", Automatic, {Right, Top}]], 
               ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
             BoxID -> "VertexLabelID$5"], 
            TagBox[{
              TagBox[
               
               PolygonBox[{{1.8369701987210297`*^-16, 
                1.1764704999999998`}, {-0.04362599999999978, 
                1.0445056}, {-0.17647049999999964`, 
                1.04165905}, {-0.07058819999999977, 
                0.95725375}, {-0.10906484999999974`, 0.8235295000000001}, {
                1.8369701987210297`*^-16, 0.9033290500000001}, {
                0.1090648500000001, 0.8235295000000001}, {0.07058820000000013,
                 0.95725375}, {0.17647050000000003`, 1.04165905}, {
                0.043626000000000144`, 1.0445056}, {1.8369701987210297`*^-16, 
                1.1764704999999998`}}], "DynamicName", BoxID -> "VertexID$6"], 
              InsetBox[
               FormBox["6", TraditionalForm], 
               Offset[{2, 2}, 
                DynamicLocation["VertexID$6", Automatic, {Right, Top}]], 
               ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
             BoxID -> "VertexLabelID$6"]}}], $CellContext`flag}, 
         TagBox[
          
          DynamicBox[GraphComputation`NetworkGraphicsBox[
           3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
           CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
            SynchronousUpdating -> False, 
            TrackedSymbols :> {$CellContext`flag}},
           
           ImageSizeCache->{{19.156821547673246`, 
            282.9278627063636}, {-150.2393066909899, 145.1551518205364}}],
          MouseAppearanceTag["NetworkGraphics"]],
         AllowKernelInitialization->False,
         UnsavedVariables:>{$CellContext`flag}]],
       DefaultBaseStyle->{
        "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
         Hue[0.8, 1., 0.6]},
       FrameTicks->None,
       ImageSize->{300, 300}], 2->
      GraphicsBox[
       NamespaceBox["NetworkGraphics",
        DynamicModuleBox[{Typeset`graph = HoldComplete[
          Graph[{1, 2, 3, 4, 5, 6}, {Null, 
            SparseArray[
            Automatic, {6, 6}, 0, {
             1, {{0, 5, 10, 15, 20, 25, 30}, {{2}, {3}, {4}, {5}, {6}, {1}, {
               3}, {4}, {5}, {6}, {1}, {2}, {4}, {5}, {6}, {1}, {2}, {3}, {
               5}, {6}, {1}, {2}, {3}, {4}, {6}, {1}, {2}, {3}, {4}, {5}}}, 
              Pattern}]}, {
           GraphHighlight -> {1, 3, 5, 4, 6, 2}, 
            GraphHighlightStyle -> {
             1 -> {VertexStyle -> Hue[0, 1, 0.8]}, 
              2 -> {VertexStyle -> Hue[0, 1, 0.8]}, 
              3 -> {VertexStyle -> Hue[0, 1, 0.8]}, 
              4 -> {VertexStyle -> Hue[0, 1, 0.8]}, 
              6 -> {VertexStyle -> Hue[0.8, 0.6, 0.8]}, 
              5 -> {VertexStyle -> Hue[0.14, 1, 0.9]}}, GraphLayout -> 
            "CircularEmbedding", ImageSize -> {300, 300}, 
            VertexLabels -> {5 -> 5, 1 -> 1, 3 -> 3, 2 -> 2, 6 -> 6, 4 -> 4}, 
            VertexShapeFunction -> {
             2 -> "Square", 3 -> "Square", 5 -> "Triangle", 4 -> "Square", 6 -> 
              "Star", 1 -> "Square"}, VertexSize -> {0.3}, 
            VertexStyle -> {
             2 -> RGBColor[1, 0, 0], 4 -> RGBColor[1, 0, 0], 1 -> 
              RGBColor[1, 0, 0], 3 -> RGBColor[1, 0, 0], 5 -> 
              RGBColor[1, 1, 0], 6 -> RGBColor[0.5, 0, 0.5]}}]], 
         Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
            Directive[
             Opacity[0.7], 
             Hue[0.6, 0.7, 0.5]], 
            LineBox[{
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$2", Automatic, Center]}], 
            LineBox[{
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$3", Automatic, Center]}], 
            LineBox[{
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$4", Automatic, Center]}], 
            LineBox[{
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$5", Automatic, Center]}], 
            LineBox[{
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$6", Automatic, Center]}], 
            LineBox[{
              DynamicLocation["VertexID$2", Automatic, Center], 
              DynamicLocation["VertexID$3", Automatic, Center]}], 
            LineBox[{
              DynamicLocation["VertexID$2", Automatic, Center], 
              DynamicLocation["VertexID$4", Automatic, Center]}], 
            LineBox[{
              DynamicLocation["VertexID$2", Automatic, Center], 
              DynamicLocation["VertexID$5", Automatic, Center]}], 
            LineBox[{
              DynamicLocation["VertexID$2", Automatic, Center], 
              DynamicLocation["VertexID$6", Automatic, Center]}], 
            LineBox[{
              DynamicLocation["VertexID$3", Automatic, Center], 
              DynamicLocation["VertexID$4", Automatic, Center]}], 
            LineBox[{
              DynamicLocation["VertexID$3", Automatic, Center], 
              DynamicLocation["VertexID$5", Automatic, Center]}], 
            LineBox[{
              DynamicLocation["VertexID$3", Automatic, Center], 
              DynamicLocation["VertexID$6", Automatic, Center]}], 
            LineBox[{
              DynamicLocation["VertexID$4", Automatic, Center], 
              DynamicLocation["VertexID$5", Automatic, Center]}], 
            LineBox[{
              DynamicLocation["VertexID$4", Automatic, Center], 
              DynamicLocation["VertexID$6", Automatic, Center]}], 
            LineBox[{
              DynamicLocation["VertexID$5", Automatic, Center], 
              DynamicLocation["VertexID$6", Automatic, Center]}]}, {
            Directive[
             Hue[0.6, 0.2, 0.8], 
             EdgeForm[
              Directive[
               GrayLevel[0], 
               Opacity[0.7]]]], 
            TagBox[{
              TagBox[
               StyleBox[
                
                RectangleBox[{-0.9983783537844388, 
                 0.36764705000000086`}, {-0.733672453784439, 
                 0.6323529500000007}], 
                Hue[0, 1, 0.8], StripOnInput -> False], "DynamicName", BoxID -> 
               "VertexID$1"], 
              InsetBox[
               FormBox["1", TraditionalForm], 
               Offset[{2, 2}, 
                DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
               ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
             BoxID -> "VertexLabelID$1"], 
            TagBox[{
              TagBox[
               StyleBox[
                
                RectangleBox[{-0.9983783537844383, -0.6323529499999994}, \
{-0.7336724537844385, -0.3676470499999995}], 
                Hue[0, 1, 0.8], StripOnInput -> False], "DynamicName", BoxID -> 
               "VertexID$2"], 
              InsetBox[
               FormBox["2", TraditionalForm], 
               Offset[{2, 2}, 
                DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
               ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
             BoxID -> "VertexLabelID$2"], 
            TagBox[{
              TagBox[
               StyleBox[
                
                RectangleBox[{-0.13235294999999953`, -1.13235295}, {
                 0.1323529500000003, -0.8676470500000001}], 
                Hue[0, 1, 0.8], StripOnInput -> False], "DynamicName", BoxID -> 
               "VertexID$3"], 
              InsetBox[
               FormBox["3", TraditionalForm], 
               Offset[{2, 2}, 
                DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
               ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
             BoxID -> "VertexLabelID$3"], 
            TagBox[{
              TagBox[
               StyleBox[
                
                RectangleBox[{0.733672453784439, -0.6323529500000011}, {
                 0.9983783537844388, -0.3676470500000013}], 
                Hue[0, 1, 0.8], StripOnInput -> False], "DynamicName", BoxID -> 
               "VertexID$4"], 
              InsetBox[
               FormBox["4", TraditionalForm], 
               Offset[{2, 2}, 
                DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
               ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
             BoxID -> "VertexLabelID$4"], 
            TagBox[{
              TagBox[
               StyleBox[
                
                PolygonBox[{{0.8660254037844386, 0.6684349999999991}, {
                 0.6983779037844388, 0.37806184999999937`}, {
                 1.0336729037844385`, 0.37806184999999937`}, {
                 0.8660254037844386, 0.6684349999999991}}], 
                Hue[0.14, 1, 0.9], StripOnInput -> False], "DynamicName", 
               BoxID -> "VertexID$5"], 
              InsetBox[
               FormBox["5", TraditionalForm], 
               Offset[{2, 2}, 
                DynamicLocation["VertexID$5", Automatic, {Right, Top}]], 
               ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
             BoxID -> "VertexLabelID$5"], 
            TagBox[{
              TagBox[
               StyleBox[
                
                PolygonBox[{{1.8369701987210297`*^-16, 
                 1.1764704999999998`}, {-0.04362599999999978, 
                 1.0445056}, {-0.17647049999999964`, 
                 1.04165905}, {-0.07058819999999977, 
                 0.95725375}, {-0.10906484999999974`, 0.8235295000000001}, {
                 1.8369701987210297`*^-16, 0.9033290500000001}, {
                 0.1090648500000001, 0.8235295000000001}, {
                 0.07058820000000013, 0.95725375}, {0.17647050000000003`, 
                 1.04165905}, {0.043626000000000144`, 1.0445056}, {
                 1.8369701987210297`*^-16, 1.1764704999999998`}}], 
                Hue[0.8, 0.6, 0.8], StripOnInput -> False], "DynamicName", 
               BoxID -> "VertexID$6"], 
              InsetBox[
               FormBox["6", TraditionalForm], 
               Offset[{2, 2}, 
                DynamicLocation["VertexID$6", Automatic, {Right, Top}]], 
               ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, "DynamicName", 
             BoxID -> "VertexLabelID$6"]}}], $CellContext`flag}, 
         TagBox[
          
          DynamicBox[GraphComputation`NetworkGraphicsBox[
           3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
           CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
            SynchronousUpdating -> False, 
            TrackedSymbols :> {$CellContext`flag}}],
          MouseAppearanceTag["NetworkGraphics"]],
         AllowKernelInitialization->False,
         UnsavedVariables:>{$CellContext`flag}]],
       DefaultBaseStyle->{
        "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
         Hue[0.8, 1., 0.6]},
       FrameTicks->None,
       ImageSize->{300, 300}], 3->
      TagBox[GridBox[{
         {
          GraphicsBox[
           NamespaceBox["NetworkGraphics",
            DynamicModuleBox[{Typeset`graph = HoldComplete[
              Graph[{1, 2, 3, 4, 5, 6}, {Null, 
                SparseArray[
                Automatic, {6, 6}, 0, {
                 1, {{0, 5, 10, 15, 20, 25, 30}, {{2}, {3}, {4}, {5}, {6}, {
                   1}, {3}, {4}, {5}, {6}, {1}, {2}, {4}, {5}, {6}, {1}, {
                   2}, {3}, {5}, {6}, {1}, {2}, {3}, {4}, {6}, {1}, {2}, {
                   3}, {4}, {5}}}, Pattern}]}, {
               GraphHighlight -> {1, 3, 5, 4, 6, 2}, 
                GraphHighlightStyle -> {
                 1 -> {VertexStyle -> Hue[0, 1, 0.8]}, 
                  2 -> {VertexStyle -> Hue[0, 1, 0.8]}, 
                  3 -> {VertexStyle -> Hue[0, 1, 0.8]}, 
                  4 -> {VertexStyle -> Hue[0, 1, 0.8]}, 
                  6 -> {VertexStyle -> Hue[0.8, 0.6, 0.8]}, 
                  5 -> {VertexStyle -> Hue[0.14, 1, 0.9]}}, GraphLayout -> 
                "CircularEmbedding", ImageSize -> {300, 300}, 
                VertexLabels -> {
                 5 -> 5, 1 -> 1, 3 -> 3, 2 -> 2, 6 -> 6, 4 -> 4}, 
                VertexShapeFunction -> {
                 2 -> "Square", 3 -> "Square", 5 -> "Triangle", 4 -> "Square",
                   6 -> "Star", 1 -> "Square"}, VertexSize -> {0.3}, 
                VertexStyle -> {
                 2 -> RGBColor[1, 0, 0], 4 -> RGBColor[1, 0, 0], 1 -> 
                  RGBColor[1, 0, 0], 3 -> RGBColor[1, 0, 0], 5 -> 
                  RGBColor[1, 1, 0], 6 -> RGBColor[0.5, 0, 0.5]}}]], 
             Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
                Directive[
                 Opacity[0.7], 
                 Hue[0.6, 0.7, 0.5]], 
                LineBox[{
                  DynamicLocation["VertexID$1", Automatic, Center], 
                  DynamicLocation["VertexID$2", Automatic, Center]}], 
                LineBox[{
                  DynamicLocation["VertexID$1", Automatic, Center], 
                  DynamicLocation["VertexID$3", Automatic, Center]}], 
                LineBox[{
                  DynamicLocation["VertexID$1", Automatic, Center], 
                  DynamicLocation["VertexID$4", Automatic, Center]}], 
                LineBox[{
                  DynamicLocation["VertexID$1", Automatic, Center], 
                  DynamicLocation["VertexID$5", Automatic, Center]}], 
                LineBox[{
                  DynamicLocation["VertexID$1", Automatic, Center], 
                  DynamicLocation["VertexID$6", Automatic, Center]}], 
                LineBox[{
                  DynamicLocation["VertexID$2", Automatic, Center], 
                  DynamicLocation["VertexID$3", Automatic, Center]}], 
                LineBox[{
                  DynamicLocation["VertexID$2", Automatic, Center], 
                  DynamicLocation["VertexID$4", Automatic, Center]}], 
                LineBox[{
                  DynamicLocation["VertexID$2", Automatic, Center], 
                  DynamicLocation["VertexID$5", Automatic, Center]}], 
                LineBox[{
                  DynamicLocation["VertexID$2", Automatic, Center], 
                  DynamicLocation["VertexID$6", Automatic, Center]}], 
                LineBox[{
                  DynamicLocation["VertexID$3", Automatic, Center], 
                  DynamicLocation["VertexID$4", Automatic, Center]}], 
                LineBox[{
                  DynamicLocation["VertexID$3", Automatic, Center], 
                  DynamicLocation["VertexID$5", Automatic, Center]}], 
                LineBox[{
                  DynamicLocation["VertexID$3", Automatic, Center], 
                  DynamicLocation["VertexID$6", Automatic, Center]}], 
                LineBox[{
                  DynamicLocation["VertexID$4", Automatic, Center], 
                  DynamicLocation["VertexID$5", Automatic, Center]}], 
                LineBox[{
                  DynamicLocation["VertexID$4", Automatic, Center], 
                  DynamicLocation["VertexID$6", Automatic, Center]}], 
                LineBox[{
                  DynamicLocation["VertexID$5", Automatic, Center], 
                  DynamicLocation["VertexID$6", Automatic, Center]}]}, {
                Directive[
                 Hue[0.6, 0.2, 0.8], 
                 EdgeForm[
                  Directive[
                   GrayLevel[0], 
                   Opacity[0.7]]]], 
                TagBox[{
                  TagBox[
                   StyleBox[
                    
                    RectangleBox[{-0.9983783537844388, 
                    0.36764705000000086`}, {-0.733672453784439, 
                    0.6323529500000007}], 
                    Hue[0, 1, 0.8], StripOnInput -> False], "DynamicName", 
                   BoxID -> "VertexID$1"], 
                  InsetBox[
                   FormBox["1", TraditionalForm], 
                   Offset[{2, 2}, 
                    DynamicLocation["VertexID$1", Automatic, {Right, Top}]], 
                   ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
                 "DynamicName", BoxID -> "VertexLabelID$1"], 
                TagBox[{
                  TagBox[
                   StyleBox[
                    
                    RectangleBox[{-0.9983783537844383, -0.6323529499999994}, \
{-0.7336724537844385, -0.3676470499999995}], 
                    Hue[0, 1, 0.8], StripOnInput -> False], "DynamicName", 
                   BoxID -> "VertexID$2"], 
                  InsetBox[
                   FormBox["2", TraditionalForm], 
                   Offset[{2, 2}, 
                    DynamicLocation["VertexID$2", Automatic, {Right, Top}]], 
                   ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
                 "DynamicName", BoxID -> "VertexLabelID$2"], 
                TagBox[{
                  TagBox[
                   StyleBox[
                    
                    RectangleBox[{-0.13235294999999953`, -1.13235295}, {
                    0.1323529500000003, -0.8676470500000001}], 
                    Hue[0, 1, 0.8], StripOnInput -> False], "DynamicName", 
                   BoxID -> "VertexID$3"], 
                  InsetBox[
                   FormBox["3", TraditionalForm], 
                   Offset[{2, 2}, 
                    DynamicLocation["VertexID$3", Automatic, {Right, Top}]], 
                   ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
                 "DynamicName", BoxID -> "VertexLabelID$3"], 
                TagBox[{
                  TagBox[
                   StyleBox[
                    
                    RectangleBox[{0.733672453784439, -0.6323529500000011}, {
                    0.9983783537844388, -0.3676470500000013}], 
                    Hue[0, 1, 0.8], StripOnInput -> False], "DynamicName", 
                   BoxID -> "VertexID$4"], 
                  InsetBox[
                   FormBox["4", TraditionalForm], 
                   Offset[{2, 2}, 
                    DynamicLocation["VertexID$4", Automatic, {Right, Top}]], 
                   ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
                 "DynamicName", BoxID -> "VertexLabelID$4"], 
                TagBox[{
                  TagBox[
                   StyleBox[
                    
                    PolygonBox[{{0.8660254037844386, 0.6684349999999991}, {
                    0.6983779037844388, 0.37806184999999937`}, {
                    1.0336729037844385`, 0.37806184999999937`}, {
                    0.8660254037844386, 0.6684349999999991}}], 
                    Hue[0.14, 1, 0.9], StripOnInput -> False], "DynamicName", 
                   BoxID -> "VertexID$5"], 
                  InsetBox[
                   FormBox["5", TraditionalForm], 
                   Offset[{2, 2}, 
                    DynamicLocation["VertexID$5", Automatic, {Right, Top}]], 
                   ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
                 "DynamicName", BoxID -> "VertexLabelID$5"], 
                TagBox[{
                  TagBox[
                   StyleBox[
                    
                    PolygonBox[{{1.8369701987210297`*^-16, 
                    1.1764704999999998`}, {-0.04362599999999978, 
                    1.0445056}, {-0.17647049999999964`, 
                    1.04165905}, {-0.07058819999999977, 
                    0.95725375}, {-0.10906484999999974`, 
                    0.8235295000000001}, {1.8369701987210297`*^-16, 
                    0.9033290500000001}, {0.1090648500000001, 
                    0.8235295000000001}, {0.07058820000000013, 0.95725375}, {
                    0.17647050000000003`, 1.04165905}, {0.043626000000000144`,
                     1.0445056}, {1.8369701987210297`*^-16, 
                    1.1764704999999998`}}], 
                    Hue[0.8, 0.6, 0.8], StripOnInput -> False], "DynamicName",
                    BoxID -> "VertexID$6"], 
                  InsetBox[
                   FormBox["6", TraditionalForm], 
                   Offset[{2, 2}, 
                    DynamicLocation["VertexID$6", Automatic, {Right, Top}]], 
                   ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, 
                 "DynamicName", BoxID -> 
                 "VertexLabelID$6"]}}], $CellContext`flag}, 
             TagBox[
              
              DynamicBox[GraphComputation`NetworkGraphicsBox[
               3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
               CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
                SynchronousUpdating -> False, 
                TrackedSymbols :> {$CellContext`flag}}],
              MouseAppearanceTag["NetworkGraphics"]],
             AllowKernelInitialization->False,
             UnsavedVariables:>{$CellContext`flag}]],
           
           DefaultBaseStyle->{
            "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
             Hue[0.8, 1., 0.6]},
           FrameTicks->None,
           ImageSize->{300, 300}], 
          InterpretationBox[
           StyleBox[
            GraphicsBox[{},
             BaselinePosition->Baseline,
             ImageSize->{100, 0}],
            CacheGraphics->False],
           Spacer[100]], 
          GraphicsBox[
           NamespaceBox["NetworkGraphics",
            DynamicModuleBox[{Typeset`graph = HoldComplete[
              
              Graph[{1, 2, 3}, {
               SparseArray[
                Automatic, {3, 3}, 0, {
                 1, {{0, 3, 5, 7}, {{1}, {2}, {3}, {1}, {3}, {1}, {2}}}, {1, 
                  1, 1, 1, 1, 1, 1}}], Null}, {
               EdgeLabels -> {"EdgeWeight"}, 
                EdgeWeight -> {3, 1, 1, 4, 1, 4, 1}, ImageSize -> {300, 300}, 
                VertexShapeFunction -> {
                 2 -> "Triangle", 3 -> "Star", 1 -> "Square"}, 
                VertexSize -> {0.2}, 
                VertexStyle -> {
                 1 -> RGBColor[1, 0, 0], 2 -> RGBColor[1, 1, 0], 3 -> 
                  RGBColor[0.5, 0, 0.5]}}]], Typeset`boxes, 
             Typeset`boxes$s2d = GraphicsGroupBox[{{
                Arrowheads[0.04158219578146897], 
                Directive[
                 Opacity[0.7], 
                 Hue[0.6, 0.7, 0.5]], {
                 TagBox[
                  ArrowBox[
                   BezierCurveBox[{
                    DynamicLocation["VertexID$1", Automatic, Center], {
                    0.6873904251757703, -0.08915602018494104}, {
                    0.7430802511242329, -0.2882334630989339}, {
                    0.6836720610015965, -0.4151939759099758}, {
                    0.30722904122918515`, -0.413857514310497}, {
                    0.2487238169004704, -0.2864783810384543}, {
                    0.3058257650517279, -0.08780137555297982}, 
                    DynamicLocation["VertexID$1", Automatic, Center]}, 
                    SplineDegree -> 7]], "DynamicName", BoxID -> 
                  "EdgeLabelID$1"], 
                 InsetBox[
                  FormBox["\"3\"", TraditionalForm], 
                  Offset[{0, 2}, 
                   DynamicLocation["EdgeLabelID$1", Automatic, 
                    Scaled[0.5]]], 
                  ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
                 TagBox[
                  ArrowBox[
                   BezierCurveBox[{
                    DynamicLocation["VertexID$1", Automatic, Center], {
                    0.6142573696809985, 0.5102397598812024}, 
                    DynamicLocation["VertexID$2", Automatic, Center]}]], 
                  "DynamicName", BoxID -> "EdgeLabelID$2"], 
                 InsetBox[
                  FormBox["\"1\"", TraditionalForm], 
                  Offset[{0, 2}, 
                   DynamicLocation["EdgeLabelID$2", Automatic, 
                    Scaled[0.5]]], 
                  ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
                 TagBox[
                  ArrowBox[
                   BezierCurveBox[{
                    DynamicLocation["VertexID$1", Automatic, Center], {
                    0.1137092818331808, 0.35673507828119033`}, 
                    DynamicLocation["VertexID$3", Automatic, Center]}]], 
                  "DynamicName", BoxID -> "EdgeLabelID$3"], 
                 InsetBox[
                  FormBox["\"1\"", TraditionalForm], 
                  Offset[{0, 2}, 
                   DynamicLocation["EdgeLabelID$3", Automatic, 
                    Scaled[0.5]]], 
                  ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
                 TagBox[
                  ArrowBox[
                   BezierCurveBox[{
                    DynamicLocation["VertexID$2", Automatic, Center], {
                    0.8826585025027763, 0.3540051804647464}, 
                    DynamicLocation["VertexID$1", Automatic, Center]}]], 
                  "DynamicName", BoxID -> "EdgeLabelID$4"], 
                 InsetBox[
                  FormBox["\"4\"", TraditionalForm], 
                  Offset[{0, 2}, 
                   DynamicLocation["EdgeLabelID$4", Automatic, 
                    Scaled[0.5]]], 
                  ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
                 TagBox[
                  ArrowBox[
                   BezierCurveBox[{
                    DynamicLocation["VertexID$2", Automatic, Center], {
                    0.49944556895469644`, 0.7107402587459368}, 
                    DynamicLocation["VertexID$3", Automatic, Center]}]], 
                  "DynamicName", BoxID -> "EdgeLabelID$5"], 
                 InsetBox[
                  FormBox["\"1\"", TraditionalForm], 
                  Offset[{0, 2}, 
                   DynamicLocation["EdgeLabelID$5", Automatic, 
                    Scaled[0.5]]], 
                  ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
                 TagBox[
                  ArrowBox[
                   BezierCurveBox[{
                    DynamicLocation["VertexID$3", Automatic, Center], {
                    0.3832129335480799, 0.5110599453486782}, 
                    DynamicLocation["VertexID$1", Automatic, Center]}]], 
                  "DynamicName", BoxID -> "EdgeLabelID$6"], 
                 InsetBox[
                  FormBox["\"4\"", TraditionalForm], 
                  Offset[{0, 2}, 
                   DynamicLocation["EdgeLabelID$6", Automatic, 
                    Scaled[0.5]]], 
                  ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
                 TagBox[
                  ArrowBox[
                   BezierCurveBox[{
                    DynamicLocation["VertexID$3", Automatic, Center], {
                    0.5005480878478179, 1.0212997052298805`}, 
                    DynamicLocation["VertexID$2", Automatic, Center]}]], 
                  "DynamicName", BoxID -> "EdgeLabelID$7"], 
                 InsetBox[
                  FormBox["\"1\"", TraditionalForm], 
                  Offset[{0, 2}, 
                   DynamicLocation["EdgeLabelID$7", Automatic, 
                    Scaled[0.5]]], 
                  ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}}, {
                Directive[
                 Hue[0.6, 0.2, 0.8], 
                 EdgeForm[
                  Directive[
                   GrayLevel[0], 
                   Opacity[0.7]]]], 
                TagBox[
                 StyleBox[
                  
                  RectangleBox[{0.40868692018231173`, -0.08823529519894883}, {
                   0.5851575105802094, 0.08823529519894883}], 
                  RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                 BoxID -> "VertexID$1"], 
                TagBox[
                 StyleBox[
                  
                  PolygonBox[{{0.9999936568025142, 0.9765349342360353}, {
                   0.8882286628838613, 0.7829528447692071}, {
                   1.1117586507211672`, 0.7829528447692071}, {
                   0.9999936568025142, 0.9765349342360353}}], 
                  RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                 BoxID -> "VertexID$2"], 
                TagBox[
                 StyleBox[
                  
                  PolygonBox[{{0., 0.9854420172284705}, {-0.02908399841748402,
                    0.8974654220154452}, {-0.11764699359860206`, 
                   0.8955677221187027}, {-0.04705879743944083, 
                   0.8392975251804717}, {-0.0727098960437155, 
                   0.7501480300312663}, {0., 0.803347727136569}, {
                   0.0727098960437155, 0.7501480300312663}, {
                   0.04705879743944083, 0.8392975251804717}, {
                   0.11764699359860206`, 0.8955677221187027}, {
                   0.02908399841748402, 0.8974654220154452}, {0., 
                   0.9854420172284705}}], 
                  RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                 "DynamicName", BoxID -> "VertexID$3"]}}], $CellContext`flag}, 
             TagBox[
              
              DynamicBox[GraphComputation`NetworkGraphicsBox[
               3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
               CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
                SynchronousUpdating -> False, 
                TrackedSymbols :> {$CellContext`flag}}],
              MouseAppearanceTag["NetworkGraphics"]],
             AllowKernelInitialization->False,
             UnsavedVariables:>{$CellContext`flag}]],
           
           DefaultBaseStyle->{
            "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
             Hue[0.8, 1., 0.6]},
           FrameTicks->None,
           ImageSize->{300, 300}]}
        },
        AutoDelete->False,
        GridBoxItemSize->{"Columns" -> {{All}}, "Rows" -> {{All}}}],
       "Grid"]}, Dynamic[$CellContext`time],
      Alignment->Center,
      ImageSize->Full,
      TransitionEffect->"Fade"]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Center}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{{3.583761233451836*^9, 3.5837612461583757`*^9}, 
   3.5837682732598867`*^9, 3.5837689136165457`*^9, 3.583774925537511*^9, 
   3.583775176900548*^9, 3.583781838826046*^9, 3.58378278373595*^9, 
   3.583783406387458*^9, 3.5837866740946302`*^9, 3.5837871497520237`*^9, 
   3.583949366260417*^9, 3.583949907375862*^9, 3.583950021379196*^9, 
   3.583950904635079*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 TextAlignment->Center,
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Good and Bad Orbigraphs", "Section",
 CellChangeTimes->{{3.583504537673525*^9, 3.583504582132621*^9}, {
  3.583509437760704*^9, 3.583509440334321*^9}, {3.583604913812951*^9, 
  3.5836049144171343`*^9}, {3.583604949342388*^9, 3.583604952190271*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "What\[CloseCurlyQuote]s a ",
 StyleBox["good",
  FontWeight->"Bold"],
 " orbigraph?"
}], "Item",
 CellChangeTimes->{{3.583603153527471*^9, 3.5836031912009563`*^9}, {
  3.583604909628951*^9, 3.583604921172461*^9}, {3.583605049452754*^9, 
  3.583605149692397*^9}, {3.583611658651767*^9, 3.583611660970902*^9}}],

Cell[TextData[{
 "What\[CloseCurlyQuote]s a ",
 StyleBox["bad",
  FontWeight->"Bold"],
 " orbigraph?"
}], "Item",
 CellChangeTimes->{{3.583603153527471*^9, 3.5836031912009563`*^9}, {
  3.583604909628951*^9, 3.583604921172461*^9}, {3.583605049452754*^9, 
  3.583605143390977*^9}, {3.5836116629239407`*^9, 3.583611666034183*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"dwnArrw", " ", "=", " ", 
     RowBox[{"Graphics", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Arrowheads", "[", ".1", "]"}], ",", 
        RowBox[{"Arrow", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", ".5"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", ".5"}]}], "}"}]}], "}"}], "]"}]}], "}"}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"badOrbi", " ", "=", " ", 
     RowBox[{"SetProperty", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"AdjacencyOrbigraph", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "2", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "0", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "1", ",", "0"}], "}"}]}], "}"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"VertexSize", " ", "\[Rule]", " ", ".1"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"VertexStyle", "\[Rule]", "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"1", " ", "\[Rule]", " ", "Red"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"2", "\[Rule]", " ", "Yellow"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"3", "\[Rule]", "Purple"}]}], "\[IndentingNewLine]", 
           "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"VertexShapeFunction", "\[Rule]", "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"1", "\[Rule]", " ", "\"\<Triangle\>\""}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"2", "\[Rule]", "\"\<Square\>\""}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"3", "\[Rule]", "\"\<Star\>\""}]}], "\[IndentingNewLine]",
            "}"}]}]}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"goodOrbi", " ", "=", " ", 
     RowBox[{"SetProperty", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"AdjacencyOrbigraph", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "3"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}]}], "}"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"VertexSize", "\[Rule]", ".1"}], ",", "\[IndentingNewLine]", 
         
         RowBox[{"VertexStyle", "\[Rule]", "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"1", "\[Rule]", " ", "Red"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{"2", "\[Rule]", " ", "Yellow"}]}], "\[IndentingNewLine]", 
           "}"}]}], ",", "\[IndentingNewLine]", " ", 
         RowBox[{"VertexShapeFunction", "\[Rule]", "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"1", "\[Rule]", " ", "\"\<Triangle\>\""}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{"2", "\[Rule]", " ", "\"\<Square\>\""}]}], 
           "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "}"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"goodCover", " ", "=", " ", 
     RowBox[{"CreateFiniteCoveringGraph", "[", 
      RowBox[{"Normal", "@", 
       RowBox[{"WeightedAdjacencyMatrix", "@", "goodOrbi"}]}], "]"}]}], ";"}],
    "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"goodUCover", " ", "=", " ", 
     RowBox[{"SetProperty", "[", 
      RowBox[{
       RowBox[{"CreateUniversalCovering", "[", 
        RowBox[{"goodOrbi", ",", "3"}], "]"}], ",", " ", 
       RowBox[{"ImageSize", "\[Rule]", "Automatic"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"badUCover", " ", "=", " ", 
     RowBox[{"SetProperty", "[", 
      RowBox[{
       RowBox[{"CreateUniversalCovering", "[", 
        RowBox[{"badOrbi", ",", "3"}], "]"}], ",", " ", 
       RowBox[{"ImageSize", "\[Rule]", "Automatic"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"Grid", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Spacer", "[", "5", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Good Orbigraph\>\"", ",", " ", "\"\<Subsection\>\""}], 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Style", "[", 
          RowBox[{"\"\<Bad Orbigraph\>\"", ",", " ", "\"\<Subsection\>\""}], 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Spacer", "[", "5", "]"}]}], "\[IndentingNewLine]", "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Spacer", "[", "5", "]"}], ",", "\[IndentingNewLine]", 
         "goodUCover", ",", "\[IndentingNewLine]", "badUCover", ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Spacer", "[", "5", "]"}]}], "\[IndentingNewLine]", "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Spacer", "[", "5", "]"}], ",", "\[IndentingNewLine]", 
         "dwnArrw", ",", "\[IndentingNewLine]", "dwnArrw", ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Spacer", "[", "5", "]"}]}], "\[IndentingNewLine]", "}"}], 
       ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Spacer", "[", "5", "]"}], ",", "\[IndentingNewLine]", 
         "goodCover", ",", "\[IndentingNewLine]", 
         RowBox[{"Magnify", "[", 
          RowBox[{
           RowBox[{"Text", "[", 
            RowBox[{"Style", "[", 
             RowBox[{"\"\<\[ScriptX]\>\"", ",", " ", "Red", ",", " ", "24"}], 
             "]"}], "]"}], ",", " ", "4"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Spacer", "[", "5", "]"}]}], "\[IndentingNewLine]", "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Spacer", "[", "5", "]"}], ",", "\[IndentingNewLine]", 
         "dwnArrw", ",", "\[IndentingNewLine]", "dwnArrw", ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Spacer", "[", "5", "]"}]}], "\[IndentingNewLine]", "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Spacer", "[", "5", "]"}], ",", "\[IndentingNewLine]", 
         "goodOrbi", ",", "\[IndentingNewLine]", "badOrbi", ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Spacer", "[", "5", "]"}]}], "\[IndentingNewLine]", "}"}]}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Alignment", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"Left", ",", " ", "Right"}], "}"}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"ItemSize", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Scaled", "[", ".2", "]"}], ",", " ", 
         RowBox[{"Scaled", "[", ".3", "]"}], ",", " ", 
         RowBox[{"Scaled", "[", ".3", "]"}], ",", " ", 
         RowBox[{"Scaled", "[", ".2", "]"}]}], "}"}], "}"}]}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]"}]}]], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.583504944724468*^9, 3.5835049592416162`*^9}, {
   3.5835049927540073`*^9, 3.583505053865456*^9}, {3.583505222942459*^9, 
   3.583505241869524*^9}, {3.5835054829201117`*^9, 3.583505569151123*^9}, {
   3.583505736571486*^9, 3.583505791465477*^9}, {3.583505966062635*^9, 
   3.58350597062294*^9}, {3.5835060884056*^9, 3.58350609657927*^9}, {
   3.58350634765458*^9, 3.58350642598237*^9}, {3.583506503115983*^9, 
   3.583506599627789*^9}, {3.583506975530591*^9, 3.58350701624997*^9}, {
   3.5835070866885147`*^9, 3.5835072337917957`*^9}, {3.583507382884967*^9, 
   3.583507581783242*^9}, {3.583507611928054*^9, 3.583507757178371*^9}, {
   3.583507801074963*^9, 3.583507912632885*^9}, {3.583507944307445*^9, 
   3.583508018584435*^9}, {3.5835089710368347`*^9, 3.5835089808353148`*^9}, {
   3.583509036635407*^9, 3.583509041090455*^9}, {3.583509077009577*^9, 
   3.58350908729753*^9}, {3.5835091294576683`*^9, 3.583509141560104*^9}, {
   3.583509248894765*^9, 3.583509253845396*^9}, {3.583509488665283*^9, 
   3.5835095038468847`*^9}, {3.583511423096323*^9, 3.583511565989129*^9}, {
   3.583513828523304*^9, 3.5835138470916357`*^9}, {3.5835143482647057`*^9, 
   3.5835143613602858`*^9}, {3.583514547106325*^9, 3.583514581296501*^9}, {
   3.5835146660939903`*^9, 3.583514688178154*^9}, {3.583514809012204*^9, 
   3.5835148537166433`*^9}, {3.583514911777981*^9, 3.583514938576725*^9}, {
   3.5835149967354383`*^9, 3.583515087119169*^9}, {3.583515161333404*^9, 
   3.5835152123477907`*^9}, {3.583515368944729*^9, 3.583515423168466*^9}, {
   3.583515457031969*^9, 3.583515474702992*^9}, {3.583515529454176*^9, 
   3.5835156287868147`*^9}, 3.58351569717947*^9, {3.583515751937457*^9, 
   3.583515765166383*^9}, {3.583515842954213*^9, 3.583515865390348*^9}, {
   3.583515897550774*^9, 3.583515905480852*^9}, {3.5835165467699413`*^9, 
   3.583516591806279*^9}, {3.583516680606122*^9, 3.5835167003583393`*^9}, {
   3.583517198428335*^9, 3.583517254564885*^9}, {3.5835175064851713`*^9, 
   3.583517581643581*^9}, {3.583517628732957*^9, 3.583517643689509*^9}, {
   3.583521833550868*^9, 3.5835218362706757`*^9}, {3.5835236927229137`*^9, 
   3.5835237037387667`*^9}, {3.58352460889541*^9, 3.583524611091569*^9}, {
   3.583524668813601*^9, 3.5835246706872253`*^9}, {3.5835247443577538`*^9, 
   3.583524881995575*^9}, {3.583524956938699*^9, 3.583524997448794*^9}, {
   3.5835250402165203`*^9, 3.583525195900112*^9}, {3.583525509647999*^9, 
   3.58352556753292*^9}, {3.5835256771322117`*^9, 3.583525740599876*^9}, {
   3.583526020236393*^9, 3.583526043483322*^9}, {3.5835260835152197`*^9, 
   3.583526145184979*^9}, {3.5835262240238247`*^9, 3.583526273165412*^9}, {
   3.583526443214428*^9, 3.583526472444624*^9}, {3.583526532074785*^9, 
   3.583526568012516*^9}, {3.583526603163302*^9, 3.583526663928062*^9}, {
   3.583526714086712*^9, 3.5835268056137667`*^9}, {3.583526840675075*^9, 
   3.583526890628715*^9}, {3.583526954115641*^9, 3.583527137566971*^9}, {
   3.583527222604545*^9, 3.583527320330392*^9}, {3.583527359370315*^9, 
   3.583527371993815*^9}, {3.5835274136648283`*^9, 3.583527640437421*^9}, {
   3.583528035288609*^9, 3.5835280653090677`*^9}, {3.5835281154766493`*^9, 
   3.583528179634451*^9}, {3.583528252521051*^9, 3.583528274608552*^9}, {
   3.583528387406331*^9, 3.58352842448392*^9}, {3.583528477612151*^9, 
   3.5835288453014307`*^9}, 3.583530379399987*^9, {3.58353069240977*^9, 
   3.583530709811276*^9}, {3.5835307878087997`*^9, 3.583530797476122*^9}, {
   3.583531386321269*^9, 3.583531795145163*^9}, {3.5835320674353943`*^9, 
   3.583532095834298*^9}, {3.583532128082847*^9, 3.5835321534596157`*^9}, {
   3.583532377128251*^9, 3.583532406332727*^9}, {3.583532452005969*^9, 
   3.583532457836699*^9}, {3.583532588658032*^9, 3.583532635203437*^9}, {
   3.583532679769361*^9, 3.583532725462553*^9}, {3.583534990723576*^9, 
   3.5835350099935093`*^9}, {3.583535041616453*^9, 3.583535125743266*^9}, {
   3.583535177669486*^9, 3.583535195093073*^9}, {3.583535229754916*^9, 
   3.583535248316104*^9}, {3.583535311242296*^9, 3.583535313085679*^9}, 
   3.583535360440584*^9, {3.583535406552835*^9, 3.583535436136731*^9}, {
   3.583535544167017*^9, 3.5835356204086742`*^9}, {3.5835357307467127`*^9, 
   3.5835357484648943`*^9}, {3.5835358234156523`*^9, 3.583535829602228*^9}, {
   3.58353593467024*^9, 3.5835359687767344`*^9}, {3.583536027835637*^9, 
   3.583536103497898*^9}, {3.583537603515522*^9, 3.583537679051919*^9}, {
   3.58359019173496*^9, 3.5835902214749413`*^9}, {3.583590273995901*^9, 
   3.5835903084980927`*^9}, {3.5835903597292233`*^9, 
   3.5835904180874147`*^9}, {3.583590483268821*^9, 3.583590484838483*^9}, 
   3.58359051787752*^9, {3.583590922874465*^9, 3.5835909575371113`*^9}, {
   3.5835910007219143`*^9, 3.583591002233374*^9}, {3.5835910415461283`*^9, 
   3.583591226189279*^9}, {3.583591283684677*^9, 3.5835913088443813`*^9}, 
   3.583591379834833*^9, {3.5835915177388277`*^9, 3.583591568836029*^9}, {
   3.583591745005522*^9, 3.583591881078197*^9}, {3.583591912759396*^9, 
   3.583591913392231*^9}, {3.583592009609057*^9, 3.5835920130196867`*^9}, {
   3.5835920848695593`*^9, 3.583592137060684*^9}, {3.583592173075921*^9, 
   3.583592194538849*^9}, {3.5835922563359613`*^9, 3.5835922722646723`*^9}, {
   3.5835923215833073`*^9, 3.5835923953440866`*^9}, 3.583592593811945*^9, {
   3.5835927656128817`*^9, 3.5835927657985153`*^9}, {3.583592799330533*^9, 
   3.58359294457218*^9}, {3.583593035030363*^9, 3.5835933066756153`*^9}, 
   3.583593708246862*^9, {3.583593738550124*^9, 3.583593739923765*^9}, {
   3.583593820135426*^9, 3.583593960071262*^9}, {3.583594325672365*^9, 
   3.583594584369133*^9}, {3.583594617715447*^9, 3.583594665699744*^9}, {
   3.583594717018062*^9, 3.5835947449287767`*^9}, {3.583594798981761*^9, 
   3.583594800999576*^9}, {3.583594854265675*^9, 3.583594934844824*^9}, {
   3.583601127602009*^9, 3.5836012265717897`*^9}, {3.583602068444725*^9, 
   3.5836020769246693`*^9}, {3.583602107196233*^9, 3.5836021080155993`*^9}, {
   3.5836021391383142`*^9, 3.58360216990254*^9}, {3.58360246241577*^9, 
   3.583602472796468*^9}, {3.5836025110302277`*^9, 3.58360263489089*^9}, {
   3.583602714359172*^9, 3.583602769488693*^9}, {3.583602867981946*^9, 
   3.5836029106827803`*^9}, {3.5836030121426086`*^9, 3.583603044337311*^9}, {
   3.583603083772376*^9, 3.58360309692288*^9}, {3.5836042338245687`*^9, 
   3.583604241991658*^9}, {3.5836042906584377`*^9, 3.583604311183337*^9}, {
   3.583604355897971*^9, 3.583604372288039*^9}, {3.583604412175*^9, 
   3.583604432679254*^9}, {3.583604706369153*^9, 3.583604741314386*^9}, {
   3.583604772574151*^9, 3.583604799371385*^9}, {3.583604833466195*^9, 
   3.583604835784227*^9}, {3.583604866539257*^9, 3.583604874402608*^9}, 
   3.583605166483511*^9, {3.583605245575007*^9, 3.583605320923502*^9}, {
   3.583605357193466*^9, 3.583605486989731*^9}, {3.583608078859827*^9, 
   3.583608160953828*^9}, 3.5836083545903*^9, {3.583608455892044*^9, 
   3.583608485641975*^9}, {3.583608591075652*^9, 3.583608601963703*^9}, {
   3.583608676028508*^9, 3.58360871682295*^9}, {3.583608837281521*^9, 
   3.5836088441018753`*^9}, {3.583609014683384*^9, 3.58360903722721*^9}, {
   3.583609089579075*^9, 3.583609138607018*^9}, {3.5836092168459578`*^9, 
   3.583609272732267*^9}, {3.5836094264726467`*^9, 3.583609480896968*^9}, {
   3.583609539065761*^9, 3.5836095779830008`*^9}, {3.5836099421206503`*^9, 
   3.583609997984088*^9}, {3.583610052521035*^9, 3.58361015862053*^9}, {
   3.5836102731098747`*^9, 3.5836103041535378`*^9}, {3.583610441862707*^9, 
   3.5836105226039352`*^9}, {3.583610566516078*^9, 3.583610967412826*^9}, {
   3.583611004579772*^9, 3.583611006350637*^9}, {3.583689204783654*^9, 
   3.5836892059379377`*^9}, {3.583689247574144*^9, 3.583689253766901*^9}, 
   3.5836894292191153`*^9, 3.583690035795977*^9, 3.583692209784424*^9, {
   3.583775088515678*^9, 3.583775101231744*^9}, {3.583786434962036*^9, 
   3.583786483895177*^9}, {3.5838692486544113`*^9, 3.583869272224636*^9}, {
   3.58386934775286*^9, 3.583869350350371*^9}, {3.583869506301964*^9, 
   3.5838695147494707`*^9}, {3.5838698274605713`*^9, 3.583869876444372*^9}, {
   3.583950970921329*^9, 3.583950983399239*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]], 
     StyleBox["\<\"Good Orbigraph\"\>", "Subsection",
      StripOnInput->False], 
     StyleBox["\<\"Bad Orbigraph\"\>", "Subsection",
      StripOnInput->False], 
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]]},
    {
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]], 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{{1}, {{
             DirectedEdge[1, 2], 1}}, {{
             DirectedEdge[1, 2], 2}}, {{
             DirectedEdge[1, 2], 3}}, {{
             DirectedEdge[1, 2], 1}, {
             DirectedEdge[2, 2], 1}}, {{
             DirectedEdge[1, 2], 1}, {
             DirectedEdge[2, 2], 2}}, {{
             DirectedEdge[1, 2], 2}, {
             DirectedEdge[2, 2], 1}}, {{
             DirectedEdge[1, 2], 2}, {
             DirectedEdge[2, 2], 2}}, {{
             DirectedEdge[1, 2], 3}, {
             DirectedEdge[2, 2], 1}}, {{
             DirectedEdge[1, 2], 3}, {
             DirectedEdge[2, 2], 2}}, {{
             DirectedEdge[1, 2], 1}, {
             DirectedEdge[2, 2], 1}, {
             DirectedEdge[2, 1], 1}}, {{
             DirectedEdge[1, 2], 1}, {
             DirectedEdge[2, 2], 1}, {
             DirectedEdge[2, 2], 2}}, {{
             DirectedEdge[1, 2], 1}, {
             DirectedEdge[2, 2], 2}, {
             DirectedEdge[2, 1], 1}}, {{
             DirectedEdge[1, 2], 1}, {
             DirectedEdge[2, 2], 2}, {
             DirectedEdge[2, 2], 2}}, {{
             DirectedEdge[1, 2], 2}, {
             DirectedEdge[2, 2], 1}, {
             DirectedEdge[2, 1], 1}}, {{
             DirectedEdge[1, 2], 2}, {
             DirectedEdge[2, 2], 1}, {
             DirectedEdge[2, 2], 2}}, {{
             DirectedEdge[1, 2], 2}, {
             DirectedEdge[2, 2], 2}, {
             DirectedEdge[2, 1], 1}}, {{
             DirectedEdge[1, 2], 2}, {
             DirectedEdge[2, 2], 2}, {
             DirectedEdge[2, 2], 2}}, {{
             DirectedEdge[1, 2], 3}, {
             DirectedEdge[2, 2], 1}, {
             DirectedEdge[2, 1], 1}}, {{
             DirectedEdge[1, 2], 3}, {
             DirectedEdge[2, 2], 1}, {
             DirectedEdge[2, 2], 2}}, {{
             DirectedEdge[1, 2], 3}, {
             DirectedEdge[2, 2], 2}, {
             DirectedEdge[2, 1], 1}}, {{
             DirectedEdge[1, 2], 3}, {
             DirectedEdge[2, 2], 2}, {
             DirectedEdge[2, 2], 2}}}, {
          Null, {{1, 2}, {1, 3}, {1, 4}, {2, 5}, {2, 6}, {3, 7}, {3, 8}, {4, 
           9}, {4, 10}, {5, 11}, {5, 12}, {6, 13}, {6, 14}, {7, 15}, {7, 
           16}, {8, 17}, {8, 18}, {9, 19}, {9, 20}, {10, 21}, {10, 22}}}, {
          GraphLayout -> "RadialEmbedding", ImageSize -> Automatic, 
           VertexShapeFunction -> {{{
                DirectedEdge[1, 2], 3}, {
                DirectedEdge[2, 2], 1}, {
                DirectedEdge[2, 2], 2}} -> "Square", {{
                DirectedEdge[1, 2], 2}} -> "Square", {{
                DirectedEdge[1, 2], 1}} -> "Square", {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 2], 2}, {
                DirectedEdge[2, 1], 1}} -> "Triangle", {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 2], 1}, {
                DirectedEdge[2, 1], 1}} -> "Triangle", {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 2], 2}} -> "Square", {{
                DirectedEdge[1, 2], 3}, {
                DirectedEdge[2, 2], 1}, {
                DirectedEdge[2, 1], 1}} -> "Triangle", {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 2], 1}} -> "Square", {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 2], 1}, {
                DirectedEdge[2, 1], 1}} -> "Triangle", {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 2], 1}} -> "Square", {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 2], 2}, {
                DirectedEdge[2, 2], 2}} -> "Square", {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 2], 1}, {
                DirectedEdge[2, 2], 2}} -> "Square", {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 2], 2}} -> "Square", {{
                DirectedEdge[1, 2], 3}, {
                DirectedEdge[2, 2], 2}} -> "Square", {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 2], 1}, {
                DirectedEdge[2, 2], 2}} -> "Square", {{
                DirectedEdge[1, 2], 3}, {
                DirectedEdge[2, 2], 1}} -> "Square", {1} -> "Triangle", {{
                DirectedEdge[1, 2], 3}} -> "Square", {{
                DirectedEdge[1, 2], 3}, {
                DirectedEdge[2, 2], 2}, {
                DirectedEdge[2, 2], 2}} -> "Square", {{
                DirectedEdge[1, 2], 3}, {
                DirectedEdge[2, 2], 2}, {
                DirectedEdge[2, 1], 1}} -> "Triangle", {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 2], 2}, {
                DirectedEdge[2, 2], 2}} -> "Square", {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 2], 2}, {
                DirectedEdge[2, 1], 1}} -> "Triangle"}, VertexStyle -> {{{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 2], 1}, {
                DirectedEdge[2, 1], 1}} -> RGBColor[1, 0, 0], {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 2], 1}, {
                DirectedEdge[2, 2], 2}} -> RGBColor[1, 1, 0], {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 2], 2}} -> RGBColor[1, 1, 0], {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 2], 2}} -> RGBColor[1, 1, 0], {{
                DirectedEdge[1, 2], 3}} -> RGBColor[1, 1, 0], {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 2], 2}, {
                DirectedEdge[2, 2], 2}} -> RGBColor[1, 1, 0], {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 2], 1}} -> RGBColor[1, 1, 0], {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 2], 1}} -> RGBColor[1, 1, 0], {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 2], 2}, {
                DirectedEdge[2, 1], 1}} -> RGBColor[1, 0, 0], {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 2], 1}, {
                DirectedEdge[2, 2], 2}} -> RGBColor[1, 1, 0], {{
                DirectedEdge[1, 2], 3}, {
                DirectedEdge[2, 2], 1}} -> RGBColor[1, 1, 0], {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 2], 2}, {
                DirectedEdge[2, 2], 2}} -> RGBColor[1, 1, 0], {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 2], 2}, {
                DirectedEdge[2, 1], 1}} -> RGBColor[1, 0, 0], {{
                DirectedEdge[1, 2], 3}, {
                DirectedEdge[2, 2], 2}, {
                DirectedEdge[2, 2], 2}} -> RGBColor[1, 1, 0], {1} -> 
             RGBColor[1, 0, 0], {{
                DirectedEdge[1, 2], 3}, {
                DirectedEdge[2, 2], 2}} -> RGBColor[1, 1, 0], {{
                DirectedEdge[1, 2], 2}} -> RGBColor[1, 1, 0], {{
                DirectedEdge[1, 2], 3}, {
                DirectedEdge[2, 2], 2}, {
                DirectedEdge[2, 1], 1}} -> RGBColor[1, 0, 0], {{
                DirectedEdge[1, 2], 3}, {
                DirectedEdge[2, 2], 1}, {
                DirectedEdge[2, 2], 2}} -> RGBColor[1, 1, 0], {{
                DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0], {{
                DirectedEdge[1, 2], 3}, {
                DirectedEdge[2, 2], 1}, {
                DirectedEdge[2, 1], 1}} -> RGBColor[1, 0, 0], {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 2], 1}, {
                DirectedEdge[2, 1], 1}} -> RGBColor[1, 0, 0]}}]], 
        Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], 
           LineBox[{{
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$2", Automatic, Center]}, {
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$3", Automatic, Center]}, {
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$4", Automatic, Center]}, {
              DynamicLocation["VertexID$2", Automatic, Center], 
              DynamicLocation["VertexID$5", Automatic, Center]}, {
              DynamicLocation["VertexID$2", Automatic, Center], 
              DynamicLocation["VertexID$6", Automatic, Center]}, {
              DynamicLocation["VertexID$3", Automatic, Center], 
              DynamicLocation["VertexID$7", Automatic, Center]}, {
              DynamicLocation["VertexID$3", Automatic, Center], 
              DynamicLocation["VertexID$8", Automatic, Center]}, {
              DynamicLocation["VertexID$4", Automatic, Center], 
              DynamicLocation["VertexID$9", Automatic, Center]}, {
              DynamicLocation["VertexID$4", Automatic, Center], 
              DynamicLocation["VertexID$10", Automatic, Center]}, {
              DynamicLocation["VertexID$5", Automatic, Center], 
              DynamicLocation["VertexID$11", Automatic, Center]}, {
              DynamicLocation["VertexID$5", Automatic, Center], 
              DynamicLocation["VertexID$12", Automatic, Center]}, {
              DynamicLocation["VertexID$6", Automatic, Center], 
              DynamicLocation["VertexID$13", Automatic, Center]}, {
              DynamicLocation["VertexID$6", Automatic, Center], 
              DynamicLocation["VertexID$14", Automatic, Center]}, {
              DynamicLocation["VertexID$7", Automatic, Center], 
              DynamicLocation["VertexID$15", Automatic, Center]}, {
              DynamicLocation["VertexID$7", Automatic, Center], 
              DynamicLocation["VertexID$16", Automatic, Center]}, {
              DynamicLocation["VertexID$8", Automatic, Center], 
              DynamicLocation["VertexID$17", Automatic, Center]}, {
              DynamicLocation["VertexID$8", Automatic, Center], 
              DynamicLocation["VertexID$18", Automatic, Center]}, {
              DynamicLocation["VertexID$9", Automatic, Center], 
              DynamicLocation["VertexID$19", Automatic, Center]}, {
              DynamicLocation["VertexID$9", Automatic, Center], 
              DynamicLocation["VertexID$20", Automatic, Center]}, {
              DynamicLocation["VertexID$10", Automatic, Center], 
              DynamicLocation["VertexID$21", Automatic, Center]}, {
              DynamicLocation["VertexID$10", Automatic, Center], 
              DynamicLocation["VertexID$22", Automatic, Center]}}]}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{2.4607276520560335`, 2.508559833247126}, {
              2.413119105161186, 2.426099649058399}, {2.508336198950881, 
              2.426099649058399}, {2.4607276520560335`, 2.508559833247126}}], 
             
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$1"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{1.6877327013697643`, 2.8477308409844793`}, {
              1.7629038983962204`, 2.922902038010936}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$2"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{2.423142053542805, 1.5739644786594582`}, {
              2.498313250569262, 1.6491356756859143`}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$3"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{3.158551405715847, 2.8477308409844784`}, {
              3.2337226027423034`, 2.922902038010935}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$4"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{1.5739644786594584`, 3.893960757888888}, {
              1.6491356756859146`, 3.9691319549153445`}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$5"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{0.7247869037761107, 2.423142053542806}, {
              0.799958100802567, 2.4983132505692627`}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$6"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{1.5739644786594573`, 0.9523233491967232}, {
              1.6491356756859135`, 1.0274945462231795`}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$7"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{3.2723196284261515`, 0.9523233491967221}, {
              3.347490825452608, 1.0274945462231784`}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$8"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{4.1214972033095, 2.4231420535428048`}, {
              4.196668400335956, 2.4983132505692613`}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$9"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{3.2723196284261533`, 3.8939607578888875`}, {
              3.34749082545261, 3.969131954915344}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$10"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{1.8013776648946869`, 4.969287485303159}, {
              1.7537691179998394`, 4.886827301114432}, {1.8489862117895344`, 
              4.886827301114432}, {1.8013776648946869`, 4.969287485303159}}], 
             
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$11"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{0.6217643886481189, 4.224519718437492}, {
              0.6969355856745753, 4.299690915463948}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$12"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{8.881784197001252*^-16, 
              3.167909820408475}, {-0.04760854689484671, 
              3.0854496362197477`}, {0.04760854689484849, 
              3.0854496362197477`}, {8.881784197001252*^-16, 
              3.167909820408475}}], 
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$13"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{-0.03758559851322817, 1.7637920663814597`}, {
              0.03758559851322817, 1.8389632634079158`}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$14"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{0.6593499871613469, 0.7071821683524394}, {
              0.6117414402664992, 0.6247219841637124}, {0.7069585340561945, 
              0.6247219841637124}, {0.6593499871613469, 0.7071821683524394}}], 
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$15"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{1.7637920663814588`, -0.03758559851322817}, {
              1.838963263407915, 0.03758559851322817}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$16"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{3.1200776392173792`, 0.04783218119109235}, {
              3.0724690923225317`, -0.03462800299763468}, {
              3.1676861861122267`, -0.03462800299763468}, {
              3.1200776392173792`, 0.04783218119109235}}], 
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$17"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{4.22451971843749, 0.6217643886481167}, {
              4.299690915463946, 0.696935585674573}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$18"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{4.921455304112067, 1.8492098460857793`}, {
              4.873846757217219, 1.7667496618970522`}, {4.969063851006915, 
              1.7667496618970522`}, {4.921455304112067, 
              1.8492098460857793`}}], 
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$19"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{4.883869705598839, 3.0824920407041505`}, {
              4.959040902625295, 3.157663237730607}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$20"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{4.262105316950722, 4.30993749814181}, {
              4.214496770055874, 4.2274773139530835`}, {4.30971386384557, 
              4.2274773139530835`}, {4.262105316950722, 4.30993749814181}}], 
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$21"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{3.082492040704152, 4.883869705598839}, {
              3.1576632377306084`, 4.959040902625295}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$22"]}}], $CellContext`flag}, 
        TagBox[
         DynamicBox[GraphComputation`NetworkGraphicsBox[
          3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
          CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
           SynchronousUpdating -> False, 
           TrackedSymbols :> {$CellContext`flag}},
          
          ImageSizeCache->{{-0.2393066909899062, 
           179.2393066909899}, {-91.45152248717771, 86.23930669098992}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False,
        UnsavedVariables:>{$CellContext`flag}]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FrameTicks->None], 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{{1}, {{
             DirectedEdge[1, 2], 1}}, {{
             DirectedEdge[1, 2], 2}}, {{
             DirectedEdge[1, 3], 1}}, {{
             DirectedEdge[1, 2], 1}, {
             DirectedEdge[2, 3], 1}}, {{
             DirectedEdge[1, 2], 1}, {
             DirectedEdge[2, 3], 2}}, {{
             DirectedEdge[1, 2], 2}, {
             DirectedEdge[2, 3], 1}}, {{
             DirectedEdge[1, 2], 2}, {
             DirectedEdge[2, 3], 2}}, {{
             DirectedEdge[1, 3], 1}, {
             DirectedEdge[3, 1], 2}}, {{
             DirectedEdge[1, 3], 1}, {
             DirectedEdge[3, 2], 1}}, {{
             DirectedEdge[1, 2], 1}, {
             DirectedEdge[2, 3], 1}, {
             DirectedEdge[3, 1], 1}}, {{
             DirectedEdge[1, 2], 1}, {
             DirectedEdge[2, 3], 1}, {
             DirectedEdge[3, 1], 2}}, {{
             DirectedEdge[1, 2], 1}, {
             DirectedEdge[2, 3], 2}, {
             DirectedEdge[3, 1], 1}}, {{
             DirectedEdge[1, 2], 1}, {
             DirectedEdge[2, 3], 2}, {
             DirectedEdge[3, 1], 2}}, {{
             DirectedEdge[1, 2], 2}, {
             DirectedEdge[2, 3], 1}, {
             DirectedEdge[3, 1], 1}}, {{
             DirectedEdge[1, 2], 2}, {
             DirectedEdge[2, 3], 1}, {
             DirectedEdge[3, 1], 2}}, {{
             DirectedEdge[1, 2], 2}, {
             DirectedEdge[2, 3], 2}, {
             DirectedEdge[3, 1], 1}}, {{
             DirectedEdge[1, 2], 2}, {
             DirectedEdge[2, 3], 2}, {
             DirectedEdge[3, 1], 2}}, {{
             DirectedEdge[1, 3], 1}, {
             DirectedEdge[3, 1], 2}, {
             DirectedEdge[1, 2], 1}}, {{
             DirectedEdge[1, 3], 1}, {
             DirectedEdge[3, 1], 2}, {
             DirectedEdge[1, 2], 2}}, {{
             DirectedEdge[1, 3], 1}, {
             DirectedEdge[3, 2], 1}, {
             DirectedEdge[2, 1], 1}}, {{
             DirectedEdge[1, 3], 1}, {
             DirectedEdge[3, 2], 1}, {
             DirectedEdge[2, 3], 2}}}, {
          Null, {{1, 2}, {1, 3}, {1, 4}, {2, 5}, {2, 6}, {3, 7}, {3, 8}, {4, 
           9}, {4, 10}, {5, 11}, {5, 12}, {6, 13}, {6, 14}, {7, 15}, {7, 
           16}, {8, 17}, {8, 18}, {9, 19}, {9, 20}, {10, 21}, {10, 22}}}, {
          GraphLayout -> "RadialEmbedding", ImageSize -> Automatic, 
           VertexShapeFunction -> {{{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 3], 2}, {
                DirectedEdge[3, 1], 1}} -> "Triangle", {{
                DirectedEdge[1, 3], 1}, {
                DirectedEdge[3, 1], 2}, {
                DirectedEdge[1, 2], 1}} -> "Square", {{
                DirectedEdge[1, 2], 2}} -> "Square", {{
                DirectedEdge[1, 3], 1}, {
                DirectedEdge[3, 2], 1}, {
                DirectedEdge[2, 1], 1}} -> "Triangle", {{
                DirectedEdge[1, 2], 1}} -> "Square", {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 3], 1}} -> "Star", {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 3], 1}, {
                DirectedEdge[3, 1], 1}} -> "Triangle", {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 3], 1}, {
                DirectedEdge[3, 1], 2}} -> "Triangle", {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 3], 2}, {
                DirectedEdge[3, 1], 1}} -> "Triangle", {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 3], 1}, {
                DirectedEdge[3, 1], 2}} -> "Triangle", {{
                DirectedEdge[1, 3], 1}} -> "Star", {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 3], 2}, {
                DirectedEdge[3, 1], 2}} -> "Triangle", {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 3], 1}} -> "Star", {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 3], 2}} -> "Star", {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 3], 2}} -> "Star", {{
                DirectedEdge[1, 3], 1}, {
                DirectedEdge[3, 1], 2}, {
                DirectedEdge[1, 2], 2}} -> "Square", {{
                DirectedEdge[1, 3], 1}, {
                DirectedEdge[3, 1], 2}} -> "Triangle", {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 3], 1}, {
                DirectedEdge[3, 1], 1}} -> "Triangle", {{
                DirectedEdge[1, 3], 1}, {
                DirectedEdge[3, 2], 1}, {
                DirectedEdge[2, 3], 2}} -> "Star", {1} -> "Triangle", {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 3], 2}, {
                DirectedEdge[3, 1], 2}} -> "Triangle", {{
                DirectedEdge[1, 3], 1}, {
                DirectedEdge[3, 2], 1}} -> "Square"}, VertexStyle -> {{{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 3], 2}} -> RGBColor[0.5, 0, 0.5], {{
                DirectedEdge[1, 3], 1}, {
                DirectedEdge[3, 2], 1}} -> RGBColor[1, 1, 0], {{
                DirectedEdge[1, 3], 1}, {
                DirectedEdge[3, 1], 2}} -> RGBColor[1, 0, 0], {{
                DirectedEdge[1, 3], 1}, {
                DirectedEdge[3, 2], 1}, {
                DirectedEdge[2, 3], 2}} -> RGBColor[0.5, 0, 0.5], {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                DirectedEdge[1, 3], 1}, {
                DirectedEdge[3, 2], 1}, {
                DirectedEdge[2, 1], 1}} -> RGBColor[1, 0, 0], {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 3], 2}} -> RGBColor[0.5, 0, 0.5], {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 3], 1}, {
                DirectedEdge[3, 1], 1}} -> RGBColor[1, 0, 0], {{
                DirectedEdge[1, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 3], 2}, {
                DirectedEdge[3, 1], 1}} -> RGBColor[1, 0, 0], {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 3], 1}, {
                DirectedEdge[3, 1], 2}} -> RGBColor[1, 0, 0], {1} -> 
             RGBColor[1, 0, 0], {{
                DirectedEdge[1, 3], 1}, {
                DirectedEdge[3, 1], 2}, {
                DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0], {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 3], 1}, {
                DirectedEdge[3, 1], 1}} -> RGBColor[1, 0, 0], {{
                DirectedEdge[1, 2], 2}} -> RGBColor[1, 1, 0], {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 3], 1}, {
                DirectedEdge[3, 1], 2}} -> RGBColor[1, 0, 0], {{
                DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0], {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 3], 2}, {
                DirectedEdge[3, 1], 2}} -> RGBColor[1, 0, 0], {{
                DirectedEdge[1, 3], 1}, {
                DirectedEdge[3, 1], 2}, {
                DirectedEdge[1, 2], 2}} -> RGBColor[1, 1, 0], {{
                DirectedEdge[1, 2], 2}, {
                DirectedEdge[2, 3], 2}, {
                DirectedEdge[3, 1], 1}} -> RGBColor[1, 0, 0], {{
                DirectedEdge[1, 2], 1}, {
                DirectedEdge[2, 3], 2}, {
                DirectedEdge[3, 1], 2}} -> RGBColor[1, 0, 0]}}]], 
        Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], 
           LineBox[{{
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$2", Automatic, Center]}, {
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$3", Automatic, Center]}, {
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$4", Automatic, Center]}, {
              DynamicLocation["VertexID$2", Automatic, Center], 
              DynamicLocation["VertexID$5", Automatic, Center]}, {
              DynamicLocation["VertexID$2", Automatic, Center], 
              DynamicLocation["VertexID$6", Automatic, Center]}, {
              DynamicLocation["VertexID$3", Automatic, Center], 
              DynamicLocation["VertexID$7", Automatic, Center]}, {
              DynamicLocation["VertexID$3", Automatic, Center], 
              DynamicLocation["VertexID$8", Automatic, Center]}, {
              DynamicLocation["VertexID$4", Automatic, Center], 
              DynamicLocation["VertexID$9", Automatic, Center]}, {
              DynamicLocation["VertexID$4", Automatic, Center], 
              DynamicLocation["VertexID$10", Automatic, Center]}, {
              DynamicLocation["VertexID$5", Automatic, Center], 
              DynamicLocation["VertexID$11", Automatic, Center]}, {
              DynamicLocation["VertexID$5", Automatic, Center], 
              DynamicLocation["VertexID$12", Automatic, Center]}, {
              DynamicLocation["VertexID$6", Automatic, Center], 
              DynamicLocation["VertexID$13", Automatic, Center]}, {
              DynamicLocation["VertexID$6", Automatic, Center], 
              DynamicLocation["VertexID$14", Automatic, Center]}, {
              DynamicLocation["VertexID$7", Automatic, Center], 
              DynamicLocation["VertexID$15", Automatic, Center]}, {
              DynamicLocation["VertexID$7", Automatic, Center], 
              DynamicLocation["VertexID$16", Automatic, Center]}, {
              DynamicLocation["VertexID$8", Automatic, Center], 
              DynamicLocation["VertexID$17", Automatic, Center]}, {
              DynamicLocation["VertexID$8", Automatic, Center], 
              DynamicLocation["VertexID$18", Automatic, Center]}, {
              DynamicLocation["VertexID$9", Automatic, Center], 
              DynamicLocation["VertexID$19", Automatic, Center]}, {
              DynamicLocation["VertexID$9", Automatic, Center], 
              DynamicLocation["VertexID$20", Automatic, Center]}, {
              DynamicLocation["VertexID$10", Automatic, Center], 
              DynamicLocation["VertexID$21", Automatic, Center]}, {
              DynamicLocation["VertexID$10", Automatic, Center], 
              DynamicLocation["VertexID$22", Automatic, Center]}}]}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{2.4607276520560335`, 2.508559833247126}, {
              2.413119105161186, 2.426099649058399}, {2.508336198950881, 
              2.426099649058399}, {2.4607276520560335`, 2.508559833247126}}], 
             
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$1"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{1.6877327013697643`, 2.8477308409844793`}, {
              1.7629038983962204`, 2.922902038010936}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$2"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{2.423142053542805, 1.5739644786594582`}, {
              2.498313250569262, 1.6491356756859143`}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$3"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{3.196137004229075, 2.9354305424506717`}, {
              3.183748090187204, 2.897955142399231}, {3.14602290127611, 
              2.8971467789630716`}, {3.176091363047889, 
              2.8731773569124974`}, {3.165164761721406, 
              2.8352023365447416`}, {3.196137004229075, 
              2.8578638174398505`}, {3.2271092467367444`, 
              2.8352023365447416`}, {3.216182645410261, 
              2.8731773569124974`}, {3.24625110718204, 2.8971467789630716`}, {
              3.2085259182709462`, 2.897955142399231}, {3.196137004229075, 
              2.9354305424506717`}}], 
             RGBColor[0.5, 0, 0.5], StripOnInput -> False], "DynamicName", 
            BoxID -> "VertexID$4"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{1.6115500771726865`, 3.9816604593550813`}, {
              1.5991611631308151`, 3.9441850593036407`}, {1.5614359742197215`,
               3.943376695867481}, {1.5915044359915005`, 3.919407273816907}, {
              1.580577834665017, 3.881432253449151}, {1.6115500771726865`, 
              3.90409373434426}, {1.642522319680356, 3.881432253449151}, {
              1.6315957183538725`, 3.919407273816907}, {1.6616641801256515`, 
              3.943376695867481}, {1.6239389912145579`, 
              3.9441850593036407`}, {1.6115500771726865`, 
              3.9816604593550813`}}], 
             RGBColor[0.5, 0, 0.5], StripOnInput -> False], "DynamicName", 
            BoxID -> "VertexID$5"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{0.7623725022893388, 2.5108417550089994`}, {
              0.7499835882474675, 2.473366354957559}, {0.7122583993363738, 
              2.4725579915213993`}, {0.7423268611081528, 2.448588569470825}, {
              0.7314002597816693, 2.4106135491030694`}, {0.7623725022893388, 
              2.4332750299981782`}, {0.7933447447970083, 
              2.4106135491030694`}, {0.7824181434705249, 2.448588569470825}, {
              0.8124866052423039, 2.4725579915213993`}, {0.7747614163312102, 
              2.473366354957559}, {0.7623725022893388, 2.5108417550089994`}}], 
             RGBColor[0.5, 0, 0.5], StripOnInput -> False], "DynamicName", 
            BoxID -> "VertexID$6"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{1.6115500771726854`, 1.0400230506629164`}, {
              1.599161163130814, 1.0025476506114759`}, {1.5614359742197204`, 
              1.0017392871753166`}, {1.5915044359914994`, 
              0.9777698651247421}, {1.580577834665016, 0.9397948447569864}, {
              1.6115500771726854`, 0.962456325652095}, {1.642522319680355, 
              0.9397948447569864}, {1.6315957183538714`, 
              0.9777698651247421}, {1.6616641801256504`, 
              1.0017392871753166`}, {1.6239389912145568`, 
              1.0025476506114759`}, {1.6115500771726854`, 
              1.0400230506629164`}}], 
             RGBColor[0.5, 0, 0.5], StripOnInput -> False], "DynamicName", 
            BoxID -> "VertexID$7"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{3.30990522693938, 1.0400230506629153`}, {
              3.2975163128975087`, 1.0025476506114748`}, {3.259791123986415, 
              1.0017392871753155`}, {3.289859585758194, 0.977769865124741}, {
              3.2789329844317106`, 0.9397948447569853}, {3.30990522693938, 
              0.9624563256520939}, {3.340877469447049, 0.9397948447569853}, {
              3.329950868120566, 0.977769865124741}, {3.360019329892345, 
              1.0017392871753155`}, {3.322294140981251, 
              1.0025476506114748`}, {3.30990522693938, 1.0400230506629153`}}], 
             RGBColor[0.5, 0, 0.5], StripOnInput -> False], "DynamicName", 
            BoxID -> "VertexID$8"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{4.159082801822728, 2.5085598332471255`}, {
              4.11147425492788, 2.4260996490583984`}, {4.206691348717576, 
              2.4260996490583984`}, {4.159082801822728, 
              2.5085598332471255`}}], 
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$9"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{3.2723196284261533`, 3.8939607578888875`}, {
              3.34749082545261, 3.969131954915344}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$10"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{1.8013776648946869`, 4.969287485303159}, {
              1.7537691179998394`, 4.886827301114432}, {1.8489862117895344`, 
              4.886827301114432}, {1.8013776648946869`, 4.969287485303159}}], 
             
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$11"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{0.6593499871613471, 4.309937498141812}, {
              0.6117414402664995, 4.227477313953085}, {0.7069585340561947, 
              4.227477313953085}, {0.6593499871613471, 4.309937498141812}}], 
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$12"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{8.881784197001252*^-16, 
              3.167909820408475}, {-0.04760854689484671, 
              3.0854496362197477`}, {0.04760854689484849, 
              3.0854496362197477`}, {8.881784197001252*^-16, 
              3.167909820408475}}], 
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$13"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{0., 1.8492098460857802`}, {-0.0476085468948476, 
              1.766749661897053}, {0.0476085468948476, 1.766749661897053}, {
              0., 1.8492098460857802`}}], 
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$14"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{0.6593499871613469, 0.7071821683524394}, {
              0.6117414402664992, 0.6247219841637124}, {0.7069585340561945, 
              0.6247219841637124}, {0.6593499871613469, 0.7071821683524394}}], 
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$15"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{1.8013776648946869`, 0.04783218119109235}, {
              1.7537691179998394`, -0.03462800299763468}, {
              1.8489862117895344`, -0.03462800299763468}, {
              1.8013776648946869`, 0.04783218119109235}}], 
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$16"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{3.1200776392173792`, 0.04783218119109235}, {
              3.0724690923225317`, -0.03462800299763468}, {
              3.1676861861122267`, -0.03462800299763468}, {
              3.1200776392173792`, 0.04783218119109235}}], 
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$17"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{4.262105316950718, 0.7071821683524372}, {
              4.21449677005587, 0.6247219841637102}, {4.309713863845566, 
              0.6247219841637102}, {4.262105316950718, 0.7071821683524372}}], 
             
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$18"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{4.883869705598839, 1.7637920663814588`}, {
              4.959040902625295, 1.838963263407915}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$19"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{4.883869705598839, 3.0824920407041505`}, {
              4.959040902625295, 3.157663237730607}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$20"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{4.262105316950722, 4.30993749814181}, {
              4.214496770055874, 4.2274773139530835`}, {4.30971386384557, 
              4.2274773139530835`}, {4.262105316950722, 4.30993749814181}}], 
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$21"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{3.12007763921738, 4.971569407065032}, {
              3.107688725175509, 4.9340940070135915`}, {3.069963536264415, 
              4.933285643577432}, {3.100031998036194, 4.909316221526858}, {
              3.089105396709711, 4.871341201159102}, {3.12007763921738, 
              4.894002682054211}, {3.1510498817250494`, 4.871341201159102}, {
              3.140123280398566, 4.909316221526858}, {3.170191742170345, 
              4.933285643577432}, {3.1324665532592513`, 
              4.9340940070135915`}, {3.12007763921738, 4.971569407065032}}], 
             RGBColor[0.5, 0, 0.5], StripOnInput -> False], "DynamicName", 
            BoxID -> "VertexID$22"]}}], $CellContext`flag}, 
        TagBox[
         DynamicBox[GraphComputation`NetworkGraphicsBox[
          3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
          CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
           SynchronousUpdating -> False, 
           TrackedSymbols :> {$CellContext`flag}},
          
          ImageSizeCache->{{-0.2393066909899062, 
           178.65930669098992`}, {-92.23930669098989, 87.23930669098992}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False,
        UnsavedVariables:>{$CellContext`flag}]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FrameTicks->None], 
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]]},
    {
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]], 
     GraphicsBox[
      {Arrowheads[0.1], ArrowBox[{{0, 0.5}, {0, -0.5}}]}], 
     GraphicsBox[
      {Arrowheads[0.1], ArrowBox[{{0, 0.5}, {0, -0.5}}]}], 
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]]},
    {
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]], 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 2, 3, 4}, {Null, 
           SparseArray[
           Automatic, {4, 4}, 0, {
            1, {{0, 3, 6, 9, 12}, {{2}, {3}, {4}, {1}, {3}, {4}, {1}, {2}, {
              4}, {1}, {2}, {3}}}, Pattern}]}, {
          VertexSize -> {0.2}, GraphHighlight -> {3, 1, 
             UndirectedEdge[3, 4], 
             UndirectedEdge[2, 3], 
             UndirectedEdge[2, 4], 4, 2}, 
           GraphHighlightStyle -> {
            UndirectedEdge[2, 4] -> {EdgeStyle -> Hue[0.14, 1, 0.9]}, 
             4 -> {VertexStyle -> Hue[0.14, 1, 0.9]}, 
             UndirectedEdge[3, 4] -> {EdgeStyle -> Hue[0.14, 1, 0.9]}, 
             2 -> {VertexStyle -> Hue[0.14, 1, 0.9]}, 
             1 -> {VertexStyle -> Hue[0, 1, 0.8]}, 
             UndirectedEdge[2, 3] -> {EdgeStyle -> Hue[0.14, 1, 0.9]}, 
             3 -> {VertexStyle -> Hue[0.14, 1, 0.9]}}}]], Typeset`boxes, 
        Typeset`boxes$s2d = GraphicsGroupBox[{{
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], 
           LineBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$2", Automatic, Center]}], 
           LineBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$3", Automatic, Center]}], 
           LineBox[{
             DynamicLocation["VertexID$1", Automatic, Center], 
             DynamicLocation["VertexID$4", Automatic, Center]}], 
           StyleBox[
            LineBox[{
              DynamicLocation["VertexID$2", Automatic, Center], 
              DynamicLocation["VertexID$3", Automatic, Center]}], 
            Hue[0.14, 1, 0.9], StripOnInput -> False], 
           StyleBox[
            LineBox[{
              DynamicLocation["VertexID$2", Automatic, Center], 
              DynamicLocation["VertexID$4", Automatic, Center]}], 
            Hue[0.14, 1, 0.9], StripOnInput -> False], 
           StyleBox[
            LineBox[{
              DynamicLocation["VertexID$3", Automatic, Center], 
              DynamicLocation["VertexID$4", Automatic, Center]}], 
            Hue[0.14, 1, 0.9], StripOnInput -> False]}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[
            StyleBox[
             DiskBox[{-1., 1.0106430996148606`*^-15}, 0.1414213562373094], 
             Hue[0, 1, 0.8], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$1"], 
           TagBox[
            StyleBox[
             DiskBox[{6.049014748177263*^-16, -1.}, 0.1414213562373094], 
             Hue[0.14, 1, 0.9], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$2"], 
           TagBox[
            StyleBox[
             DiskBox[{1., -1.133107779529596*^-15}, 0.1414213562373094], 
             Hue[0.14, 1, 0.9], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$3"], 
           TagBox[
            StyleBox[
             DiskBox[{-7.044813998280222*^-16, 1.}, 0.1414213562373094], 
             Hue[0.14, 1, 0.9], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$4"]}}], $CellContext`flag}, 
        TagBox[
         DynamicBox[GraphComputation`NetworkGraphicsBox[
          3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
          CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
           SynchronousUpdating -> False, 
           TrackedSymbols :> {$CellContext`flag}},
          
          ImageSizeCache->{{2.5800000000000054`, 
           176.42000000000002`}, {-89.56319999999998, 84.27680000000005}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False,
        UnsavedVariables:>{$CellContext`flag}]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FrameTicks->None], 
     StyleBox[
      InterpretationBox[Cell[BoxData[
        FormBox[
         StyleBox["\<\"\[ScriptX]\"\>",
          StripOnInput->False,
          LineColor->RGBColor[1, 0, 0],
          FrontFaceColor->RGBColor[1, 0, 0],
          BackFaceColor->RGBColor[1, 0, 0],
          GraphicsColor->RGBColor[1, 0, 0],
          FontSize->24,
          FontColor->RGBColor[1, 0, 0]], TextForm]], "InlineText"],
       Text[
        Style["\[ScriptX]", 
         RGBColor[1, 0, 0], 24]]],
      StripOnInput->False,
      Magnification->4 Inherited], 
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]]},
    {
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]], 
     GraphicsBox[
      {Arrowheads[0.1], ArrowBox[{{0, 0.5}, {0, -0.5}}]}], 
     GraphicsBox[
      {Arrowheads[0.1], ArrowBox[{{0, 0.5}, {0, -0.5}}]}], 
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]]},
    {
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]], 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 2}, {
          SparseArray[
           Automatic, {2, 2}, 0, {
            1, {{0, 1, 3}, {{2}, {1}, {2}}}, {1, 1, 1}}], Null}, {
          EdgeLabels -> {"EdgeWeight"}, 
           VertexShapeFunction -> {1 -> "Triangle", 2 -> "Square"}, 
           VertexSize -> {0.1}, 
           VertexStyle -> {2 -> RGBColor[1, 1, 0], 1 -> RGBColor[1, 0, 0]}, 
           EdgeWeight -> {3, 1, 2}}]], Typeset`boxes, Typeset`boxes$s2d = 
        GraphicsGroupBox[{{
           Arrowheads[0.041582132564841494`], 
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation["VertexID$1", Automatic, Center], {
                0.4999999999999999, -0.15528070821816992`}, 
                DynamicLocation["VertexID$2", Automatic, Center]}]], 
             "DynamicName", BoxID -> "EdgeLabelID$1"], 
            InsetBox[
             FormBox["\"3\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$1", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation["VertexID$2", Automatic, Center], {
                0.5000000000000002, 0.15528070821816992`}, 
                DynamicLocation["VertexID$1", Automatic, Center]}]], 
             "DynamicName", BoxID -> "EdgeLabelID$2"], 
            InsetBox[
             FormBox["\"1\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$2", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation[
                "VertexID$2", Automatic, 
                 Center], {-0.08847925546776056, -0.19078353238530235`}, \
{-0.2873577330053514, -0.24717977484589643`}, {-0.41452835747980865`, \
-0.18822269607102315`}, {-0.41452835747980865`, 
                0.18822269607102307`}, {-0.2873577330053514, 
                0.24717977484589637`}, {-0.08847925546776059, 
                0.1907835323853023}, 
                DynamicLocation["VertexID$2", Automatic, Center]}, 
               SplineDegree -> 7]], "DynamicName", BoxID -> "EdgeLabelID$3"], 
            
            InsetBox[
             FormBox["\"2\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$3", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{1., 0.056145}, {0.9441174999999999, -0.04064605}, {
              1.0558825, -0.04064605}, {1., 0.056145}}], 
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$1"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{-0.04411765000000001, -0.04411765}, {
              0.04411765000000001, 0.044117650000000015`}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$2"]}}], $CellContext`flag}, 
        TagBox[
         DynamicBox[GraphComputation`NetworkGraphicsBox[
          3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
          CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
           SynchronousUpdating -> False, 
           TrackedSymbols :> {$CellContext`flag}},
          
          ImageSizeCache->{{-0.2393066909899053, 
           179.2393066909899}, {-34.23930669098989, 30.23930669098992}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False,
        UnsavedVariables:>{$CellContext`flag}]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FrameTicks->None], 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 2, 3}, {
           SparseArray[
           Automatic, {3, 3}, 0, {
            1, {{0, 2, 4, 6}, {{2}, {3}, {1}, {3}, {1}, {2}}}, Pattern}], 
           Null}, {EdgeLabels -> {"EdgeWeight"}, 
           VertexShapeFunction -> {
            3 -> "Star", 1 -> "Triangle", 2 -> "Square"}, VertexSize -> {0.1},
            VertexStyle -> {
            2 -> RGBColor[1, 1, 0], 1 -> RGBColor[1, 0, 0], 3 -> 
             RGBColor[0.5, 0, 0.5]}, EdgeWeight -> {2, 1, 1, 2, 2, 1}}]], 
        Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
           Arrowheads[0.03555748430834104], 
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation["VertexID$1", Automatic, Center], {
                8.437694987151189*^-16, -0.23104592393085188`}, 
                DynamicLocation["VertexID$2", Automatic, Center]}]], 
             "DynamicName", BoxID -> "EdgeLabelID$1"], 
            InsetBox[
             FormBox["\"2\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$1", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation[
                "VertexID$1", Automatic, Center], {-0.6659337642194738, 
                0.3844770380345749}, 
                DynamicLocation["VertexID$3", Automatic, Center]}]], 
             "DynamicName", BoxID -> "EdgeLabelID$2"], 
            InsetBox[
             FormBox["\"1\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$2", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation[
                "VertexID$2", Automatic, 
                 Center], {-3.4416913763379854`*^-16, -0.7689540760691488}, 
                DynamicLocation["VertexID$1", Automatic, Center]}]], 
             "DynamicName", BoxID -> "EdgeLabelID$3"], 
            InsetBox[
             FormBox["\"1\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$3", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation["VertexID$2", Automatic, Center], {
                0.20009163956496426`, 0.11552296196542552`}, 
                DynamicLocation["VertexID$3", Automatic, Center]}]], 
             "DynamicName", BoxID -> "EdgeLabelID$4"], 
            InsetBox[
             FormBox["\"2\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$4", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation[
                "VertexID$3", Automatic, Center], {-0.20009163956496454`, 
                0.11552296196542586`}, 
                DynamicLocation["VertexID$1", Automatic, Center]}]], 
             "DynamicName", BoxID -> "EdgeLabelID$5"], 
            InsetBox[
             FormBox["\"2\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$5", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation["VertexID$3", Automatic, Center], {
                0.6659337642194748, 0.38447703803457334`}, 
                DynamicLocation["VertexID$2", Automatic, Center]}]], 
             "DynamicName", BoxID -> "EdgeLabelID$6"], 
            InsetBox[
             FormBox["\"1\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$6", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{-0.8660254037844384, -0.4027540074090448}, \
{-0.9628167330384061, -0.5704010237269843}, {-0.7692340745304707, \
-0.5704010237269843}, {-0.8660254037844384, -0.4027540074090448}}], 
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$1"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{0.7896113924738979, -0.5764140113105423}, {
              0.94243941509498, -0.4235859886894602}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$2"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{1.8369701987210297`*^-16, 
              1.1018852906790277`}, {-0.025187482843666422`, 
              1.0256953201404457`}, {-0.10188529067902763`, 
              1.024051863731684}, {-0.04075411627161095, 
              0.975320441055653}, {-0.06296862050662597, 
              0.8981147093209721}, {1.8369701987210297`*^-16, 
              0.9441870009946831}, {0.06296862050662633, 
              0.8981147093209721}, {0.04075411627161131, 0.975320441055653}, {
              0.10188529067902799`, 1.024051863731684}, {0.02518748284366679, 
              1.0256953201404457`}, {1.8369701987210297`*^-16, 
              1.1018852906790277`}}], 
             RGBColor[0.5, 0, 0.5], StripOnInput -> False], "DynamicName", 
            BoxID -> "VertexID$3"]}}], $CellContext`flag}, 
        TagBox[
         DynamicBox[GraphComputation`NetworkGraphicsBox[
          3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
          CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
           SynchronousUpdating -> False, 
           TrackedSymbols :> {$CellContext`flag}},
          
          ImageSizeCache->{{-0.2393066909899062, 
           178.65930669098992`}, {-91.2393066909899, 85.2393066909899}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False,
        UnsavedVariables:>{$CellContext`flag}]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FrameTicks->None], 
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {Left, Right}},
   GridBoxItemSize->{"Columns" -> {
       Scaled[0.2], 
       Scaled[0.3], 
       Scaled[0.3], 
       Scaled[0.2]}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.583869831664446*^9, 3.583869876863771*^9}, 
   3.583949366440621*^9, 3.583949907500833*^9, 3.5839500214883347`*^9, 
   3.583950904774633*^9, {3.5839509734782467`*^9, 3.5839509837982264`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 TextAlignment->Center,
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Universal Covering Tree", "Section",
 CellChangeTimes->{{3.583504537673525*^9, 3.583504582132621*^9}, {
  3.583509437760704*^9, 3.583509440334321*^9}, {3.583604913812951*^9, 
  3.5836049144171343`*^9}}],

Cell[CellGroupData[{

Cell["What is a universal covering tree?", "Subsection",
 CellChangeTimes->{{3.583603153527471*^9, 3.5836031912009563`*^9}, {
  3.583604909628951*^9, 3.583604921172461*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  
  RowBox[{
   RowBox[{
    RowBox[{"sizes", " ", "=", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"CreateUniversalCovering", "[", 
        RowBox[{"orbigraph1", ",", " ", "#"}], "]"}], " ", "&"}], "/@", " ", 
      RowBox[{"Range", "[", "3", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"GraphPlotRange", "[", "graph_Graph", "]"}], " ", ":=", " ", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"embedding", " ", "=", " ", 
        RowBox[{"GraphEmbedding", "@", "graph"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"Min", "[", 
            RowBox[{"First", " ", "/@", " ", "embedding"}], "]"}], "-", "1"}],
           ",", " ", 
          RowBox[{
           RowBox[{"Max", "[", 
            RowBox[{"First", "/@", "embedding"}], "]"}], "+", "1"}]}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"Min", "[", 
            RowBox[{"Last", "/@", "embedding"}], "]"}], "-", "1"}], ",", " ", 
          
          RowBox[{
           RowBox[{"Max", "[", 
            RowBox[{"Last", "/@", "embedding"}], "]"}], "+", "1"}]}], "}"}]}],
        "}"}]}], "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"biggest", " ", "=", " ", 
     RowBox[{"Last", "@", "sizes"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"sizes", " ", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"SetProperty", "[", 
        RowBox[{"#", ",", " ", "\[IndentingNewLine]", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"VertexCoordinates", "\[Rule]", " ", 
            RowBox[{"Take", "[", 
             RowBox[{
              RowBox[{"GraphEmbedding", "@", 
               RowBox[{"Last", "@", "sizes"}]}], ",", " ", 
              RowBox[{"VertexCount", "@", "#"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"PlotRange", "\[Rule]", " ", 
            RowBox[{"GraphPlotRange", "[", "biggest", "]"}]}]}], 
          "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "]"}], "&"}],
       "/@", "\[IndentingNewLine]", "sizes"}]}], ";"}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", 
   RowBox[{"Row", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"SetProperty", "[", 
       RowBox[{"orbigraph1", ",", 
        RowBox[{"ImageSize", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"300", ",", "300"}], "}"}]}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Spacer", "[", "50", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ListAnimate", "[", 
       RowBox[{"sizes", ",", " ", 
        RowBox[{"DefaultDuration", "\[Rule]", "3"}]}], "]"}]}], 
     "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]"}]}]], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.583504944724468*^9, 3.5835049592416162`*^9}, {
   3.5835049927540073`*^9, 3.583505053865456*^9}, {3.583505222942459*^9, 
   3.583505241869524*^9}, {3.5835054829201117`*^9, 3.583505569151123*^9}, {
   3.583505736571486*^9, 3.583505791465477*^9}, {3.583505966062635*^9, 
   3.58350597062294*^9}, {3.5835060884056*^9, 3.58350609657927*^9}, {
   3.58350634765458*^9, 3.58350642598237*^9}, {3.583506503115983*^9, 
   3.583506599627789*^9}, {3.583506975530591*^9, 3.58350701624997*^9}, {
   3.5835070866885147`*^9, 3.5835072337917957`*^9}, {3.583507382884967*^9, 
   3.583507581783242*^9}, {3.583507611928054*^9, 3.583507757178371*^9}, {
   3.583507801074963*^9, 3.583507912632885*^9}, {3.583507944307445*^9, 
   3.583508018584435*^9}, {3.5835089710368347`*^9, 3.5835089808353148`*^9}, {
   3.583509036635407*^9, 3.583509041090455*^9}, {3.583509077009577*^9, 
   3.58350908729753*^9}, {3.5835091294576683`*^9, 3.583509141560104*^9}, {
   3.583509248894765*^9, 3.583509253845396*^9}, {3.583509488665283*^9, 
   3.5835095038468847`*^9}, {3.583511423096323*^9, 3.583511565989129*^9}, {
   3.583513828523304*^9, 3.5835138470916357`*^9}, {3.5835143482647057`*^9, 
   3.5835143613602858`*^9}, {3.583514547106325*^9, 3.583514581296501*^9}, {
   3.5835146660939903`*^9, 3.583514688178154*^9}, {3.583514809012204*^9, 
   3.5835148537166433`*^9}, {3.583514911777981*^9, 3.583514938576725*^9}, {
   3.5835149967354383`*^9, 3.583515087119169*^9}, {3.583515161333404*^9, 
   3.5835152123477907`*^9}, {3.583515368944729*^9, 3.583515423168466*^9}, {
   3.583515457031969*^9, 3.583515474702992*^9}, {3.583515529454176*^9, 
   3.5835156287868147`*^9}, 3.58351569717947*^9, {3.583515751937457*^9, 
   3.583515765166383*^9}, {3.583515842954213*^9, 3.583515865390348*^9}, {
   3.583515897550774*^9, 3.583515905480852*^9}, {3.5835165467699413`*^9, 
   3.583516591806279*^9}, {3.583516680606122*^9, 3.5835167003583393`*^9}, {
   3.583517198428335*^9, 3.583517254564885*^9}, {3.5835175064851713`*^9, 
   3.583517581643581*^9}, {3.583517628732957*^9, 3.583517643689509*^9}, {
   3.583521833550868*^9, 3.5835218362706757`*^9}, {3.5835236927229137`*^9, 
   3.5835237037387667`*^9}, {3.58352460889541*^9, 3.583524611091569*^9}, {
   3.583524668813601*^9, 3.5835246706872253`*^9}, {3.5835247443577538`*^9, 
   3.583524881995575*^9}, {3.583524956938699*^9, 3.583524997448794*^9}, {
   3.5835250402165203`*^9, 3.583525195900112*^9}, {3.583525509647999*^9, 
   3.58352556753292*^9}, {3.5835256771322117`*^9, 3.583525740599876*^9}, {
   3.583526020236393*^9, 3.583526043483322*^9}, {3.5835260835152197`*^9, 
   3.583526145184979*^9}, {3.5835262240238247`*^9, 3.583526273165412*^9}, {
   3.583526443214428*^9, 3.583526472444624*^9}, {3.583526532074785*^9, 
   3.583526568012516*^9}, {3.583526603163302*^9, 3.583526663928062*^9}, {
   3.583526714086712*^9, 3.5835268056137667`*^9}, {3.583526840675075*^9, 
   3.583526890628715*^9}, {3.583526954115641*^9, 3.583527137566971*^9}, {
   3.583527222604545*^9, 3.583527320330392*^9}, {3.583527359370315*^9, 
   3.583527371993815*^9}, {3.5835274136648283`*^9, 3.583527640437421*^9}, {
   3.583528035288609*^9, 3.5835280653090677`*^9}, {3.5835281154766493`*^9, 
   3.583528179634451*^9}, {3.583528252521051*^9, 3.583528274608552*^9}, {
   3.583528387406331*^9, 3.58352842448392*^9}, {3.583528477612151*^9, 
   3.5835288453014307`*^9}, 3.583530379399987*^9, {3.58353069240977*^9, 
   3.583530709811276*^9}, {3.5835307878087997`*^9, 3.583530797476122*^9}, {
   3.583531386321269*^9, 3.583531795145163*^9}, {3.5835320674353943`*^9, 
   3.583532095834298*^9}, {3.583532128082847*^9, 3.5835321534596157`*^9}, {
   3.583532377128251*^9, 3.583532406332727*^9}, {3.583532452005969*^9, 
   3.583532457836699*^9}, {3.583532588658032*^9, 3.583532635203437*^9}, {
   3.583532679769361*^9, 3.583532725462553*^9}, {3.583534990723576*^9, 
   3.5835350099935093`*^9}, {3.583535041616453*^9, 3.583535125743266*^9}, {
   3.583535177669486*^9, 3.583535195093073*^9}, {3.583535229754916*^9, 
   3.583535248316104*^9}, {3.583535311242296*^9, 3.583535313085679*^9}, 
   3.583535360440584*^9, {3.583535406552835*^9, 3.583535436136731*^9}, {
   3.583535544167017*^9, 3.5835356204086742`*^9}, {3.5835357307467127`*^9, 
   3.5835357484648943`*^9}, {3.5835358234156523`*^9, 3.583535829602228*^9}, {
   3.58353593467024*^9, 3.5835359687767344`*^9}, {3.583536027835637*^9, 
   3.583536103497898*^9}, {3.583537603515522*^9, 3.583537679051919*^9}, {
   3.58359019173496*^9, 3.5835902214749413`*^9}, {3.583590273995901*^9, 
   3.5835903084980927`*^9}, {3.5835903597292233`*^9, 
   3.5835904180874147`*^9}, {3.583590483268821*^9, 3.583590484838483*^9}, 
   3.58359051787752*^9, {3.583590922874465*^9, 3.5835909575371113`*^9}, {
   3.5835910007219143`*^9, 3.583591002233374*^9}, {3.5835910415461283`*^9, 
   3.583591226189279*^9}, {3.583591283684677*^9, 3.5835913088443813`*^9}, 
   3.583591379834833*^9, {3.5835915177388277`*^9, 3.583591568836029*^9}, {
   3.583591745005522*^9, 3.583591881078197*^9}, {3.583591912759396*^9, 
   3.583591913392231*^9}, {3.583592009609057*^9, 3.5835920130196867`*^9}, {
   3.5835920848695593`*^9, 3.583592137060684*^9}, {3.583592173075921*^9, 
   3.583592194538849*^9}, {3.5835922563359613`*^9, 3.5835922722646723`*^9}, {
   3.5835923215833073`*^9, 3.5835923953440866`*^9}, 3.583592593811945*^9, {
   3.5835927656128817`*^9, 3.5835927657985153`*^9}, {3.583592799330533*^9, 
   3.58359294457218*^9}, {3.583593035030363*^9, 3.5835933066756153`*^9}, 
   3.583593708246862*^9, {3.583593738550124*^9, 3.583593739923765*^9}, {
   3.583593820135426*^9, 3.583593960071262*^9}, {3.583594325672365*^9, 
   3.583594584369133*^9}, {3.583594617715447*^9, 3.583594665699744*^9}, {
   3.583594717018062*^9, 3.5835947449287767`*^9}, {3.583594798981761*^9, 
   3.583594800999576*^9}, {3.583594854265675*^9, 3.583594934844824*^9}, {
   3.583601127602009*^9, 3.5836012265717897`*^9}, {3.583602068444725*^9, 
   3.5836020769246693`*^9}, {3.583602107196233*^9, 3.5836021080155993`*^9}, {
   3.5836021391383142`*^9, 3.58360216990254*^9}, {3.58360246241577*^9, 
   3.583602472796468*^9}, {3.5836025110302277`*^9, 3.58360263489089*^9}, {
   3.583602714359172*^9, 3.583602769488693*^9}, {3.583602867981946*^9, 
   3.5836029106827803`*^9}, {3.5836030121426086`*^9, 3.583603044337311*^9}, {
   3.583603083772376*^9, 3.58360309692288*^9}, {3.5836042338245687`*^9, 
   3.583604241991658*^9}, {3.5836042906584377`*^9, 3.583604311183337*^9}, {
   3.583604355897971*^9, 3.583604372288039*^9}, {3.583604412175*^9, 
   3.583604432679254*^9}, {3.583604706369153*^9, 3.583604741314386*^9}, {
   3.583604772574151*^9, 3.583604799371385*^9}, {3.583604833466195*^9, 
   3.583604835784227*^9}, {3.583604866539257*^9, 3.583604874402608*^9}, {
   3.583761360477338*^9, 3.5837614259457207`*^9}, {3.5837618346740417`*^9, 
   3.5837618899534597`*^9}, {3.583762127115325*^9, 3.583762177566827*^9}, {
   3.583762559882112*^9, 3.5837625688253813`*^9}, {3.5837651873977118`*^9, 
   3.583765216202577*^9}, 3.583951101617882*^9, {3.5839513736268377`*^9, 
   3.5839514482578297`*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    NamespaceBox["NetworkGraphics", 
     DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 2, 3}, {
          SparseArray[
           Automatic, {3, 3}, 0, {
            1, {{0, 3, 5, 7}, {{1}, {2}, {3}, {1}, {3}, {1}, {2}}}, {1, 1, 1, 
             1, 1, 1, 1}}], Null}, {
          EdgeLabels -> {"EdgeWeight"}, EdgeWeight -> {3, 1, 1, 4, 1, 4, 1}, 
           ImageSize -> {300, 300}, 
           VertexShapeFunction -> {
            2 -> "Triangle", 3 -> "Star", 1 -> "Square"}, VertexSize -> {0.2},
            VertexStyle -> {
            1 -> RGBColor[1, 0, 0], 2 -> RGBColor[1, 1, 0], 3 -> 
             RGBColor[0.5, 0, 0.5]}}]], Typeset`boxes, Typeset`boxes$s2d = 
       GraphicsGroupBox[{{
           Arrowheads[0.04158219578146897], 
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation["VertexID$1", Automatic, Center], {
                0.6873904251757703, -0.08915602018494104}, {
                0.7430802511242329, -0.2882334630989339}, {
                0.6836720610015965, -0.4151939759099758}, {
                0.30722904122918515`, -0.413857514310497}, {
                0.2487238169004704, -0.2864783810384543}, {
                0.3058257650517279, -0.08780137555297982}, 
                DynamicLocation["VertexID$1", Automatic, Center]}, 
               SplineDegree -> 7]], "DynamicName", BoxID -> "EdgeLabelID$1"], 
            
            InsetBox[
             FormBox["\"3\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$1", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation["VertexID$1", Automatic, Center], {
                0.6142573696809985, 0.5102397598812024}, 
                DynamicLocation["VertexID$2", Automatic, Center]}]], 
             "DynamicName", BoxID -> "EdgeLabelID$2"], 
            InsetBox[
             FormBox["\"1\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$2", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation["VertexID$1", Automatic, Center], {
                0.1137092818331808, 0.35673507828119033`}, 
                DynamicLocation["VertexID$3", Automatic, Center]}]], 
             "DynamicName", BoxID -> "EdgeLabelID$3"], 
            InsetBox[
             FormBox["\"1\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$3", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation["VertexID$2", Automatic, Center], {
                0.8826585025027763, 0.3540051804647464}, 
                DynamicLocation["VertexID$1", Automatic, Center]}]], 
             "DynamicName", BoxID -> "EdgeLabelID$4"], 
            InsetBox[
             FormBox["\"4\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$4", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation["VertexID$2", Automatic, Center], {
                0.49944556895469644`, 0.7107402587459368}, 
                DynamicLocation["VertexID$3", Automatic, Center]}]], 
             "DynamicName", BoxID -> "EdgeLabelID$5"], 
            InsetBox[
             FormBox["\"1\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$5", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation["VertexID$3", Automatic, Center], {
                0.3832129335480799, 0.5110599453486782}, 
                DynamicLocation["VertexID$1", Automatic, Center]}]], 
             "DynamicName", BoxID -> "EdgeLabelID$6"], 
            InsetBox[
             FormBox["\"4\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$6", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation["VertexID$3", Automatic, Center], {
                0.5005480878478179, 1.0212997052298805`}, 
                DynamicLocation["VertexID$2", Automatic, Center]}]], 
             "DynamicName", BoxID -> "EdgeLabelID$7"], 
            InsetBox[
             FormBox["\"1\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$7", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[
            StyleBox[
             
             RectangleBox[{0.40868692018231173`, -0.08823529519894883}, {
              0.5851575105802094, 0.08823529519894883}], 
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$1"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{0.9999936568025142, 0.9765349342360353}, {
              0.8882286628838613, 0.7829528447692071}, {1.1117586507211672`, 
              0.7829528447692071}, {0.9999936568025142, 0.9765349342360353}}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$2"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{0., 0.9854420172284705}, {-0.02908399841748402, 
              0.8974654220154452}, {-0.11764699359860206`, 
              0.8955677221187027}, {-0.04705879743944083, 
              0.8392975251804717}, {-0.0727098960437155, 
              0.7501480300312663}, {0., 0.803347727136569}, {
              0.0727098960437155, 0.7501480300312663}, {0.04705879743944083, 
              0.8392975251804717}, {0.11764699359860206`, 
              0.8955677221187027}, {0.02908399841748402, 
              0.8974654220154452}, {0., 0.9854420172284705}}], 
             RGBColor[0.5, 0, 0.5], StripOnInput -> False], "DynamicName", 
            BoxID -> "VertexID$3"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[
        GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
         ImageSizeCache -> {{21.760693309010094`, 
         276.2393066909899}, {-150.2393066909899, 146.2393066909899}}], 
       MouseAppearanceTag["NetworkGraphics"]], AllowKernelInitialization -> 
      False, UnsavedVariables :> {$CellContext`flag}]], 
    DefaultBaseStyle -> {
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FrameTicks -> None, ImageSize -> {300, 300}],InterpretationBox[
    StyleBox[
     GraphicsBox[{}, BaselinePosition -> Baseline, ImageSize -> {50, 0}], 
     CacheGraphics -> False], 
    Spacer[50]],TagBox[
    StyleBox[
     DynamicModuleBox[{$CellContext`i6$$ = 2, Typeset`show$$ = True, 
       Typeset`bookmarkList$$ = {
        "\"min\"" :> {$CellContext`i6$$ = 1}, 
         "\"max\"" :> {$CellContext`i6$$ = 3}}, Typeset`bookmarkMode$$ = 
       "Menu", Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
       "\"untitled\"", Typeset`specs$$ = {{{
           Hold[$CellContext`i6$$], 1, ""}, 1, 3, 1}}, Typeset`size$$ = 
       Automatic, Typeset`update$$ = 0, Typeset`initDone$$, 
       Typeset`skipInitDone$$ = True, $CellContext`i6$12293$$ = 0}, 
      PaneBox[
       PanelBox[
        DynamicWrapperBox[
         GridBox[{{
            ItemBox[
             ItemBox[
              TagBox[
               StyleBox[
                GridBox[{{"\"\"", 
                   AnimatorBox[
                    Dynamic[$CellContext`i6$$], {1, 3, 1}, AnimationRate -> 
                    Automatic, 
                    AppearanceElements -> {
                    "ProgressSlider", "PlayPauseButton", 
                    "FasterSlowerButtons", "DirectionButton"}, AutoAction -> 
                    False, DefaultDuration -> 3, DisplayAllSteps -> True, 
                    PausedTime -> 4.511870384216309]}}, AutoDelete -> False, 
                 GridBoxAlignment -> {
                  "Columns" -> {Right, {Left}}, "ColumnsIndexed" -> {}, 
                   "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                "ListAnimateLabel", StripOnInput -> False], {
               "ControlArea", Top}], Alignment -> {Automatic, Inherited}, 
              StripOnInput -> False], Background -> None, StripOnInput -> 
             False]}, {
            ItemBox[
             TagBox[
              StyleBox[
               PaneBox[
                TagBox[
                 PaneSelectorBox[{1 -> GraphicsBox[
                    NamespaceBox["NetworkGraphics", 
                    DynamicModuleBox[{Typeset`graph = HoldComplete[
                    Graph[{{1}, {{
                    DirectedEdge[1, 1], 1}}, {{
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 2], 1}}, {{
                    DirectedEdge[1, 3], 1}}}, {
                    Null, {{1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}}}, {
                    GraphLayout -> "RadialEmbedding", 
                    PlotRange -> {{-1., 6.765254812993723}, {-1., 
                    6.7652548129937236`}}, VertexShapeFunction -> {{{
                    DirectedEdge[1, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 1], 1}} -> "Square", {{
                    DirectedEdge[1, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 1], 3}} -> "Square", {1} -> "Square"}, 
                    VertexStyle -> {{{
                    DirectedEdge[1, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 1], 1}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {1} -> 
                    RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0]}}]], 
                    Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
                    Directive[
                    Opacity[0.7], 
                    Hue[0.6, 0.7, 0.5]], 
                    LineBox[{{
                    DynamicLocation["VertexID$1", Automatic, Center], 
                    DynamicLocation["VertexID$2", Automatic, Center]}, {
                    DynamicLocation["VertexID$1", Automatic, Center], 
                    DynamicLocation["VertexID$3", Automatic, Center]}, {
                    DynamicLocation["VertexID$1", Automatic, Center], 
                    DynamicLocation["VertexID$4", Automatic, Center]}, {
                    DynamicLocation["VertexID$1", Automatic, Center], 
                    DynamicLocation["VertexID$5", Automatic, Center]}, {
                    DynamicLocation["VertexID$1", Automatic, Center], 
                    DynamicLocation["VertexID$6", Automatic, Center]}}]}, {
                    Directive[
                    Hue[0.6, 0.2, 0.8], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.7]]]], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.9318104253669865, 0.9807539090718329}, {
                    0.9703026072233207, 1.019246090928167}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$1"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.3440251730745136, 1.7897709034467804`}, {
                    0.38251735493084765`, 1.8282630853031145`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$2"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{-0.01924609092816704, 0.6717369146968857}, {
                    0.01924609092816704, 0.7102290965532199}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$3"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.9318104253669863, -0.01924609092816704}, {
                    0.9703026072233205, 0.01924609092816704}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$4"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{1.9021130325903073`, 0.7154759642291924}, {
                    1.8777345882195555`, 0.6732513817926219}, {
                    1.926491476961059, 0.6732513817926219}, {
                    1.9021130325903073`, 0.7154759642291924}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$5"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{1.538841768587627, 1.8346784344043467`}, {
                    1.532497898180264, 1.8154887717279464`}, {
                    1.5131803285582275`, 1.8150748409456587`}, {
                    1.5285771925758673`, 1.802801052725455}, {
                    1.5229821143814541`, 1.7833555543455477`}, {
                    1.538841768587627, 1.794959597892192}, {
                    1.5547014227937999`, 1.7833555543455477`}, {
                    1.5491063445993867`, 1.802801052725455}, {
                    1.5645032086170265`, 1.8150748409456587`}, {
                    1.54518563899499, 1.8154887717279464`}, {
                    1.538841768587627, 1.8346784344043467`}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> 
                    "VertexID$6"]}}], $CellContext`flag}, 
                    TagBox[
                    DynamicBox[
                    GraphComputation`NetworkGraphicsBox[
                    3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
                    CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
                    SynchronousUpdating -> False, 
                    TrackedSymbols :> {$CellContext`flag}}, 
                    ImageSizeCache -> {{42.2287965160111, 
                    139.2393066909899}, {42.760693309010094`, 
                    135.77120348398898`}}], 
                    MouseAppearanceTag["NetworkGraphics"]], 
                    AllowKernelInitialization -> False, 
                    UnsavedVariables :> {$CellContext`flag}]], 
                    DefaultBaseStyle -> {
                    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
                    Hue[0.8, 1., 0.6]}, FrameTicks -> None, 
                    PlotRange -> {{-1., 6.765254812993723}, {-1., 
                    6.7652548129937236`}}], 2 -> GraphicsBox[
                    NamespaceBox["NetworkGraphics", 
                    DynamicModuleBox[{Typeset`graph = HoldComplete[
                    Graph[{{1}, {{
                    DirectedEdge[1, 1], 1}}, {{
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 2], 1}}, {{
                    DirectedEdge[1, 3], 1}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 2], 1}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 3], 1}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}}}, {
                    Null, {{1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {2, 7}, {2,
                     8}, {2, 9}, {2, 10}, {3, 11}, {3, 12}, {3, 13}, {3, 
                    14}, {4, 15}, {4, 16}, {4, 17}, {4, 18}, {5, 19}, {5, 
                    20}, {5, 21}, {5, 22}, {6, 23}, {6, 24}, {6, 25}, {6, 
                    26}}}, {
                    GraphLayout -> "RadialEmbedding", 
                    PlotRange -> {{-1., 6.765254812993723}, {-1., 
                    6.7652548129937236`}}, VertexShapeFunction -> {{{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 1], 1}} -> "Square", {{
                    DirectedEdge[1, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}} -> "Square", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}} -> "Square", {1} -> "Square", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}} -> "Square", {{
                    DirectedEdge[1, 1], 2}} -> "Square"}, VertexStyle -> {{{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}} -> RGBColor[1, 1, 0], {{
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {1} -> 
                    RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0], {{
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0], {{
                    DirectedEdge[1, 1], 1}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0]}}]], 
                    Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
                    Directive[
                    Opacity[0.7], 
                    Hue[0.6, 0.7, 0.5]], 
                    LineBox[{{
                    DynamicLocation["VertexID$1", Automatic, Center], 
                    DynamicLocation["VertexID$2", Automatic, Center]}, {
                    DynamicLocation["VertexID$1", Automatic, Center], 
                    DynamicLocation["VertexID$3", Automatic, Center]}, {
                    DynamicLocation["VertexID$1", Automatic, Center], 
                    DynamicLocation["VertexID$4", Automatic, Center]}, {
                    DynamicLocation["VertexID$1", Automatic, Center], 
                    DynamicLocation["VertexID$5", Automatic, Center]}, {
                    DynamicLocation["VertexID$1", Automatic, Center], 
                    DynamicLocation["VertexID$6", Automatic, Center]}, {
                    DynamicLocation["VertexID$2", Automatic, Center], 
                    DynamicLocation["VertexID$7", Automatic, Center]}, {
                    DynamicLocation["VertexID$2", Automatic, Center], 
                    DynamicLocation["VertexID$8", Automatic, Center]}, {
                    DynamicLocation["VertexID$2", Automatic, Center], 
                    DynamicLocation["VertexID$9", Automatic, Center]}, {
                    DynamicLocation["VertexID$2", Automatic, Center], 
                    DynamicLocation["VertexID$10", Automatic, Center]}, {
                    DynamicLocation["VertexID$3", Automatic, Center], 
                    DynamicLocation["VertexID$11", Automatic, Center]}, {
                    DynamicLocation["VertexID$3", Automatic, Center], 
                    DynamicLocation["VertexID$12", Automatic, Center]}, {
                    DynamicLocation["VertexID$3", Automatic, Center], 
                    DynamicLocation["VertexID$13", Automatic, Center]}, {
                    DynamicLocation["VertexID$3", Automatic, Center], 
                    DynamicLocation["VertexID$14", Automatic, Center]}, {
                    DynamicLocation["VertexID$4", Automatic, Center], 
                    DynamicLocation["VertexID$15", Automatic, Center]}, {
                    DynamicLocation["VertexID$4", Automatic, Center], 
                    DynamicLocation["VertexID$16", Automatic, Center]}, {
                    DynamicLocation["VertexID$4", Automatic, Center], 
                    DynamicLocation["VertexID$17", Automatic, Center]}, {
                    DynamicLocation["VertexID$4", Automatic, Center], 
                    DynamicLocation["VertexID$18", Automatic, Center]}, {
                    DynamicLocation["VertexID$5", Automatic, Center], 
                    DynamicLocation["VertexID$19", Automatic, Center]}, {
                    DynamicLocation["VertexID$5", Automatic, Center], 
                    DynamicLocation["VertexID$20", Automatic, Center]}, {
                    DynamicLocation["VertexID$5", Automatic, Center], 
                    DynamicLocation["VertexID$21", Automatic, Center]}, {
                    DynamicLocation["VertexID$5", Automatic, Center], 
                    DynamicLocation["VertexID$22", Automatic, Center]}, {
                    DynamicLocation["VertexID$6", Automatic, Center], 
                    DynamicLocation["VertexID$23", Automatic, Center]}, {
                    DynamicLocation["VertexID$6", Automatic, Center], 
                    DynamicLocation["VertexID$24", Automatic, Center]}, {
                    DynamicLocation["VertexID$6", Automatic, Center], 
                    DynamicLocation["VertexID$25", Automatic, Center]}, {
                    DynamicLocation["VertexID$6", Automatic, Center], 
                    DynamicLocation["VertexID$26", Automatic, Center]}}]}, {
                    Directive[
                    Hue[0.6, 0.2, 0.8], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.7]]]], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{1.7772844961023382`, 1.7772844961023382`}, {
                    1.8381601116392976`, 1.8381601116392976`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$1"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{1.239385815525026, 2.5176385150942497`}, {
                    1.3002614310619853`, 2.578514130631209}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$2"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.9069461484245237, 1.4944944245550134`}, {
                    0.9678217639614831, 1.5553700400919728`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$3"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{1.777284496102338, 0.8621566012131652}, {
                    1.8381601116392974`, 0.9230322167501246}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$4"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{2.6780606515486323`, 1.5636679926634311`}, {
                    2.6395059961528426`, 1.4968895633135155`}, {
                    2.716615306944422, 1.4968895633135155`}, {
                    2.6780606515486323`, 1.5636679926634311`}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$5"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{2.3456209844481304`, 2.5886600435565823`}, {
                    2.335588115504086, 2.5583114774053435`}, {
                    2.3050372637542775`, 2.55765684340056}, {
                    2.329387496170589, 2.5382457740134337`}, {
                    2.3205388465841987`, 2.5074926021688766`}, {
                    2.3456209844481304`, 2.525844466354081}, {
                    2.370703122312062, 2.5074926021688766`}, {
                    2.3618544727256716`, 2.5382457740134337`}, {
                    2.3862047051419832`, 2.55765684340056}, {
                    2.355653853392175, 2.5583114774053435`}, {
                    2.3456209844481304`, 2.5886600435565823`}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$6"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{1.4909694107415774`, 3.585006799973156}, {
                    1.5518450262785368`, 3.6458824155101155`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$7"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.9463657554496682, 3.4080543457283783`}, {
                    1.0072413709866275`, 3.4689299612653377`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$8"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{0.5135360236126092, 3.1406443444689653`}, {
                    0.47498136821681936`, 3.07386591511905}, {
                    0.552090679008399, 3.07386591511905}, {0.5135360236126092,
                     3.1406443444689653`}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$9"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{0.1769524542447778, 2.679224765217341}, {
                    0.16691958530073314`, 2.6488761990661023`}, {
                    0.13636873355092477`, 2.648221565061319}, {
                    0.16071896596723656`, 2.6288104956741924`}, {
                    0.15187031638084597`, 2.5980573238296354`}, {
                    0.1769524542447778, 2.6164091880148397`}, {
                    0.2020345921087096, 2.5980573238296354`}, {
                    0.19318594252231902`, 2.6288104956741924`}, {
                    0.2175361749386308, 2.648221565061319}, {
                    0.18698532318882244`, 2.6488761990661023`}, {
                    0.1769524542447778, 2.679224765217341}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$10"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{-0.0304378077684797, 2.063599581463099}, {
                    0.0304378077684797, 2.1244751970000584`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$11"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{-0.0304378077684797, 1.4909694107415776`}, {
                    0.0304378077684797, 1.551845026278537}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$12"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{0.17695245424477757`, 1.0155393235580865`}, {
                    0.13839779884898776`, 0.9487608942081708}, {
                    0.21550710964056738`, 0.9487608942081708}, {
                    0.17695245424477757`, 1.0155393235580865`}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$13"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{0.513536023612609, 0.5541197443064623}, {
                    0.5035031546685643, 0.5237711781552231}, {
                    0.47295230291875595`, 0.52311654415044}, {
                    0.49730253533506774`, 0.5037054747633136}, {
                    0.48845388574867715`, 0.4729523029187562}, {
                    0.513536023612609, 0.4913041671039608}, {
                    0.5386181614765407, 0.4729523029187562}, {
                    0.5297695118901502, 0.5037054747633136}, {
                    0.554119744306462, 0.52311654415044}, {0.5235688925566536,
                     0.5237711781552231}, {0.513536023612609, 
                    0.5541197443064623}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$14"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.9463657554496677, 0.14651464647629808`}, {
                    1.007241370986627, 0.2073902620132575}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$15"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{1.490969410741577, -0.0304378077684797}, {
                    1.5518450262785364`, 0.0304378077684797}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$16"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{2.0940373892315782`, 0.03873576033993861}, {
                    2.0554827338357886`, -0.028042669009977057`}, {
                    2.132592044627368, -0.028042669009977057`}, {
                    2.0940373892315782`, 0.03873576033993861}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$17"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{2.638641044523488, 0.2175361749386306}, {
                    2.6286081755794433`, 0.18718760878739146`}, {
                    2.598057323829635, 0.1865329747826083}, {
                    2.6224075562459466`, 0.167121905395482}, {
                    2.613558906659556, 0.13636873355092455`}, {
                    2.638641044523488, 0.1547205977361292}, {
                    2.6637231823874195`, 0.13636873355092455`}, {
                    2.654874532801029, 0.167121905395482}, {
                    2.6792247652173407`, 0.1865329747826083}, {
                    2.6486739134675323`, 0.18718760878739146`}, {
                    2.638641044523488, 0.2175361749386306}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$18"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{3.0714707763605467`, 
                    0.48309821584412926`}, {3.132346391897506, 
                    0.5439738313810887}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$19"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{3.4080543457283783`, 0.9463657554496676}, {
                    3.4689299612653377`, 1.007241370986627}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$20"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{3.585006799973156, 1.490969410741577}, {
                    3.6458824155101155`, 1.5518450262785364`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$21"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{3.615444607741636, 2.134621109925431}, {
                    3.6054117387975912`, 2.1042725437741923`}, {
                    3.574860887047783, 2.103617909769409}, {
                    3.5992111194640946`, 2.0842068403822824`}, {
                    3.590362469877704, 2.0534536685377254`}, {
                    3.615444607741636, 2.0718055327229297`}, {
                    3.6405267456055674`, 2.0534536685377254`}, {
                    3.631678096019177, 2.0842068403822824`}, {
                    3.6560283284354886`, 2.103617909769409}, {
                    3.6254774766856803`, 2.1042725437741923`}, {
                    3.615444607741636, 2.134621109925431}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$22"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{3.4080543457283787`, 2.608203236755008}, {
                    3.468929961265338, 2.6690788522919675`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$23"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{3.071470776360547, 3.0714707763605467`}, {
                    3.1323463918975065`, 3.132346391897506}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$24"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{2.608203236755009, 3.4080543457283783`}, {
                    2.6690788522919684`, 3.4689299612653377`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$25"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{2.094037389231579, 3.6541803680815743`}, {
                    2.0554827338357895`, 3.587401938731659}, {
                    2.1325920446273687`, 3.587401938731659}, {
                    2.094037389231579, 3.6541803680815743`}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$26"]}}], $CellContext`flag}, 
                    TagBox[
                    DynamicBox[
                    GraphComputation`NetworkGraphicsBox[
                    3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
                    CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
                    SynchronousUpdating -> False, 
                    TrackedSymbols :> {$CellContext`flag}}, 
                    ImageSizeCache -> {{41.709944506702826`, 
                    219.2393066909899}, {-41.239306690989906`, 
                    136.29005549329725`}}], 
                    MouseAppearanceTag["NetworkGraphics"]], 
                    AllowKernelInitialization -> False, 
                    UnsavedVariables :> {$CellContext`flag}]], 
                    DefaultBaseStyle -> {
                    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
                    Hue[0.8, 1., 0.6]}, FrameTicks -> None, 
                    PlotRange -> {{-1., 6.765254812993723}, {-1., 
                    6.7652548129937236`}}], 3 -> GraphicsBox[
                    NamespaceBox["NetworkGraphics", 
                    DynamicModuleBox[{Typeset`graph = HoldComplete[
                    Graph[{{1}, {{
                    DirectedEdge[1, 1], 1}}, {{
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 2], 1}}, {{
                    DirectedEdge[1, 3], 1}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 2], 1}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 3], 1}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}}, {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}}, {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}}, {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}, {
                    DirectedEdge[1, 1], 1}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}, {
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}, {
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}, {
                    DirectedEdge[1, 3], 1}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}, {
                    DirectedEdge[1, 1], 1}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}, {
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}, {
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}, {
                    DirectedEdge[1, 3], 1}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}, {
                    DirectedEdge[1, 1], 1}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}, {
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}, {
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}, {
                    DirectedEdge[1, 3], 1}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}, {
                    DirectedEdge[3, 1], 1}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}, {
                    DirectedEdge[3, 1], 2}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}, {
                    DirectedEdge[3, 1], 3}}, {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}, {
                    DirectedEdge[3, 1], 4}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}, {
                    DirectedEdge[1, 1], 1}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}, {
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}, {
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}, {
                    DirectedEdge[1, 2], 1}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}, {
                    DirectedEdge[1, 1], 1}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}, {
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}, {
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}, {
                    DirectedEdge[1, 2], 1}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}, {
                    DirectedEdge[1, 1], 1}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}, {
                    DirectedEdge[1, 1], 2}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}, {
                    DirectedEdge[1, 1], 3}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}, {
                    DirectedEdge[1, 2], 1}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}, {
                    DirectedEdge[2, 1], 1}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}, {
                    DirectedEdge[2, 1], 2}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}, {
                    DirectedEdge[2, 1], 3}}, {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}, {
                    DirectedEdge[2, 1], 4}}}, {
                    Null, {{1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {2, 7}, {2,
                     8}, {2, 9}, {2, 10}, {3, 11}, {3, 12}, {3, 13}, {3, 
                    14}, {4, 15}, {4, 16}, {4, 17}, {4, 18}, {5, 19}, {5, 
                    20}, {5, 21}, {5, 22}, {6, 23}, {6, 24}, {6, 25}, {6, 
                    26}, {7, 27}, {7, 28}, {7, 29}, {7, 30}, {8, 31}, {8, 
                    32}, {8, 33}, {8, 34}, {9, 35}, {9, 36}, {9, 37}, {9, 
                    38}, {10, 39}, {10, 40}, {10, 41}, {10, 42}, {11, 43}, {
                    11, 44}, {11, 45}, {11, 46}, {12, 47}, {12, 48}, {12, 
                    49}, {12, 50}, {13, 51}, {13, 52}, {13, 53}, {13, 54}, {
                    14, 55}, {14, 56}, {14, 57}, {14, 58}, {15, 59}, {15, 
                    60}, {15, 61}, {15, 62}, {16, 63}, {16, 64}, {16, 65}, {
                    16, 66}, {17, 67}, {17, 68}, {17, 69}, {17, 70}, {18, 
                    71}, {18, 72}, {18, 73}, {18, 74}, {19, 75}, {19, 76}, {
                    19, 77}, {19, 78}, {20, 79}, {20, 80}, {20, 81}, {20, 
                    82}, {21, 83}, {21, 84}, {21, 85}, {21, 86}, {22, 87}, {
                    22, 88}, {22, 89}, {22, 90}, {23, 91}, {23, 92}, {23, 
                    93}, {23, 94}, {24, 95}, {24, 96}, {24, 97}, {24, 98}, {
                    25, 99}, {25, 100}, {25, 101}, {25, 102}, {26, 103}, {26, 
                    104}, {26, 105}, {26, 106}}}, {
                    GraphLayout -> "RadialEmbedding", 
                    PlotRange -> {{-1., 6.765254812993723}, {-1., 
                    6.7652548129937236`}}, VertexShapeFunction -> {{{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}, {
                    DirectedEdge[1, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}, {
                    DirectedEdge[1, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}, {
                    DirectedEdge[3, 1], 4}} -> "Square", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}} -> "Square", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}, {
                    DirectedEdge[2, 1], 1}} -> "Square", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}} -> "Square", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}} -> "Square", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}} -> "Square", {1} -> "Square", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}, {
                    DirectedEdge[2, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}} -> "Square", {{
                    DirectedEdge[1, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}} -> "Square", {{
                    DirectedEdge[1, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}, {
                    DirectedEdge[1, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}, {
                    DirectedEdge[1, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}, {
                    DirectedEdge[1, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}, {
                    DirectedEdge[1, 1], 1}} -> "Square", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}, {
                    DirectedEdge[1, 1], 1}} -> "Square", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}, {
                    DirectedEdge[3, 1], 1}} -> "Square", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}, {
                    DirectedEdge[1, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}, {
                    DirectedEdge[1, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}, {
                    DirectedEdge[1, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 1], 1}} -> "Square", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}, {
                    DirectedEdge[3, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}, {
                    DirectedEdge[2, 1], 4}} -> "Square", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}, {
                    DirectedEdge[1, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}, {
                    DirectedEdge[1, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}, {
                    DirectedEdge[1, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}, {
                    DirectedEdge[1, 1], 1}} -> "Square", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}, {
                    DirectedEdge[1, 1], 1}} -> "Square", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}, {
                    DirectedEdge[1, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}} -> "Square", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}, {
                    DirectedEdge[1, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}, {
                    DirectedEdge[2, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}, {
                    DirectedEdge[1, 1], 1}} -> "Square", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}, {
                    DirectedEdge[1, 1], 1}} -> "Square", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}, {
                    DirectedEdge[1, 3], 1}} -> "Star", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}, {
                    DirectedEdge[3, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}, {
                    DirectedEdge[1, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}, {
                    DirectedEdge[1, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}} -> "Square", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}} -> "Square", {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}} -> "Square", {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}} -> "Square", {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}, {
                    DirectedEdge[1, 2], 1}} -> "Triangle", {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}, {
                    DirectedEdge[1, 3], 1}} -> "Star"}, VertexStyle -> {{{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}, {
                    DirectedEdge[3, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}, {
                    DirectedEdge[1, 1], 1}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}, {
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}} -> RGBColor[1, 1, 0], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}, {
                    DirectedEdge[2, 1], 4}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}, {
                    DirectedEdge[1, 1], 1}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}, {
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 1], 1}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}, {
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}, {
                    DirectedEdge[3, 1], 4}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}, {
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}, {
                    DirectedEdge[1, 1], 1}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}, {
                    DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}, {
                    DirectedEdge[1, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}, {
                    DirectedEdge[1, 1], 1}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}, {
                    DirectedEdge[1, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}, {
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}, {
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}, {
                    DirectedEdge[1, 1], 1}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}, {
                    DirectedEdge[3, 1], 1}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}, {
                    DirectedEdge[3, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}, {
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {1} -> 
                    RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}, {
                    DirectedEdge[1, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}, {
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}} -> RGBColor[1, 1, 0], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}, {
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}} -> RGBColor[1, 1, 0], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}, {
                    DirectedEdge[2, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}, {
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 2}, {
                    DirectedEdge[1, 1], 1}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}} -> RGBColor[1, 1, 0], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}, {
                    DirectedEdge[2, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 2], 1}, {
                    DirectedEdge[2, 1], 1}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}, {
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 4}, {
                    DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0], {{
                    DirectedEdge[1, 1], 1}, {
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}, {
                    DirectedEdge[1, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 2}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 3], 1}} -> RGBColor[0.5, 0, 0.5], {{
                    DirectedEdge[1, 3], 1}, {
                    DirectedEdge[3, 1], 3}, {
                    DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 2}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 3}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 1], 3}, {
                    DirectedEdge[1, 2], 1}, {
                    DirectedEdge[2, 1], 4}} -> RGBColor[1, 0, 0], {{
                    DirectedEdge[1, 2], 1}} -> RGBColor[1, 1, 0]}}]], 
                    Typeset`boxes, Typeset`boxes$s2d = GraphicsGroupBox[{{
                    Directive[
                    Opacity[0.7], 
                    Hue[0.6, 0.7, 0.5]], 
                    LineBox[{{
                    DynamicLocation["VertexID$1", Automatic, Center], 
                    DynamicLocation["VertexID$2", Automatic, Center]}, {
                    DynamicLocation["VertexID$1", Automatic, Center], 
                    DynamicLocation["VertexID$3", Automatic, Center]}, {
                    DynamicLocation["VertexID$1", Automatic, Center], 
                    DynamicLocation["VertexID$4", Automatic, Center]}, {
                    DynamicLocation["VertexID$1", Automatic, Center], 
                    DynamicLocation["VertexID$5", Automatic, Center]}, {
                    DynamicLocation["VertexID$1", Automatic, Center], 
                    DynamicLocation["VertexID$6", Automatic, Center]}, {
                    DynamicLocation["VertexID$2", Automatic, Center], 
                    DynamicLocation["VertexID$7", Automatic, Center]}, {
                    DynamicLocation["VertexID$2", Automatic, Center], 
                    DynamicLocation["VertexID$8", Automatic, Center]}, {
                    DynamicLocation["VertexID$2", Automatic, Center], 
                    DynamicLocation["VertexID$9", Automatic, Center]}, {
                    DynamicLocation["VertexID$2", Automatic, Center], 
                    DynamicLocation["VertexID$10", Automatic, Center]}, {
                    DynamicLocation["VertexID$3", Automatic, Center], 
                    DynamicLocation["VertexID$11", Automatic, Center]}, {
                    DynamicLocation["VertexID$3", Automatic, Center], 
                    DynamicLocation["VertexID$12", Automatic, Center]}, {
                    DynamicLocation["VertexID$3", Automatic, Center], 
                    DynamicLocation["VertexID$13", Automatic, Center]}, {
                    DynamicLocation["VertexID$3", Automatic, Center], 
                    DynamicLocation["VertexID$14", Automatic, Center]}, {
                    DynamicLocation["VertexID$4", Automatic, Center], 
                    DynamicLocation["VertexID$15", Automatic, Center]}, {
                    DynamicLocation["VertexID$4", Automatic, Center], 
                    DynamicLocation["VertexID$16", Automatic, Center]}, {
                    DynamicLocation["VertexID$4", Automatic, Center], 
                    DynamicLocation["VertexID$17", Automatic, Center]}, {
                    DynamicLocation["VertexID$4", Automatic, Center], 
                    DynamicLocation["VertexID$18", Automatic, Center]}, {
                    DynamicLocation["VertexID$5", Automatic, Center], 
                    DynamicLocation["VertexID$19", Automatic, Center]}, {
                    DynamicLocation["VertexID$5", Automatic, Center], 
                    DynamicLocation["VertexID$20", Automatic, Center]}, {
                    DynamicLocation["VertexID$5", Automatic, Center], 
                    DynamicLocation["VertexID$21", Automatic, Center]}, {
                    DynamicLocation["VertexID$5", Automatic, Center], 
                    DynamicLocation["VertexID$22", Automatic, Center]}, {
                    DynamicLocation["VertexID$6", Automatic, Center], 
                    DynamicLocation["VertexID$23", Automatic, Center]}, {
                    DynamicLocation["VertexID$6", Automatic, Center], 
                    DynamicLocation["VertexID$24", Automatic, Center]}, {
                    DynamicLocation["VertexID$6", Automatic, Center], 
                    DynamicLocation["VertexID$25", Automatic, Center]}, {
                    DynamicLocation["VertexID$6", Automatic, Center], 
                    DynamicLocation["VertexID$26", Automatic, Center]}, {
                    DynamicLocation["VertexID$7", Automatic, Center], 
                    DynamicLocation["VertexID$27", Automatic, Center]}, {
                    DynamicLocation["VertexID$7", Automatic, Center], 
                    DynamicLocation["VertexID$28", Automatic, Center]}, {
                    DynamicLocation["VertexID$7", Automatic, Center], 
                    DynamicLocation["VertexID$29", Automatic, Center]}, {
                    DynamicLocation["VertexID$7", Automatic, Center], 
                    DynamicLocation["VertexID$30", Automatic, Center]}, {
                    DynamicLocation["VertexID$8", Automatic, Center], 
                    DynamicLocation["VertexID$31", Automatic, Center]}, {
                    DynamicLocation["VertexID$8", Automatic, Center], 
                    DynamicLocation["VertexID$32", Automatic, Center]}, {
                    DynamicLocation["VertexID$8", Automatic, Center], 
                    DynamicLocation["VertexID$33", Automatic, Center]}, {
                    DynamicLocation["VertexID$8", Automatic, Center], 
                    DynamicLocation["VertexID$34", Automatic, Center]}, {
                    DynamicLocation["VertexID$9", Automatic, Center], 
                    DynamicLocation["VertexID$35", Automatic, Center]}, {
                    DynamicLocation["VertexID$9", Automatic, Center], 
                    DynamicLocation["VertexID$36", Automatic, Center]}, {
                    DynamicLocation["VertexID$9", Automatic, Center], 
                    DynamicLocation["VertexID$37", Automatic, Center]}, {
                    DynamicLocation["VertexID$9", Automatic, Center], 
                    DynamicLocation["VertexID$38", Automatic, Center]}, {
                    DynamicLocation["VertexID$10", Automatic, Center], 
                    DynamicLocation["VertexID$39", Automatic, Center]}, {
                    DynamicLocation["VertexID$10", Automatic, Center], 
                    DynamicLocation["VertexID$40", Automatic, Center]}, {
                    DynamicLocation["VertexID$10", Automatic, Center], 
                    DynamicLocation["VertexID$41", Automatic, Center]}, {
                    DynamicLocation["VertexID$10", Automatic, Center], 
                    DynamicLocation["VertexID$42", Automatic, Center]}, {
                    DynamicLocation["VertexID$11", Automatic, Center], 
                    DynamicLocation["VertexID$43", Automatic, Center]}, {
                    DynamicLocation["VertexID$11", Automatic, Center], 
                    DynamicLocation["VertexID$44", Automatic, Center]}, {
                    DynamicLocation["VertexID$11", Automatic, Center], 
                    DynamicLocation["VertexID$45", Automatic, Center]}, {
                    DynamicLocation["VertexID$11", Automatic, Center], 
                    DynamicLocation["VertexID$46", Automatic, Center]}, {
                    DynamicLocation["VertexID$12", Automatic, Center], 
                    DynamicLocation["VertexID$47", Automatic, Center]}, {
                    DynamicLocation["VertexID$12", Automatic, Center], 
                    DynamicLocation["VertexID$48", Automatic, Center]}, {
                    DynamicLocation["VertexID$12", Automatic, Center], 
                    DynamicLocation["VertexID$49", Automatic, Center]}, {
                    DynamicLocation["VertexID$12", Automatic, Center], 
                    DynamicLocation["VertexID$50", Automatic, Center]}, {
                    DynamicLocation["VertexID$13", Automatic, Center], 
                    DynamicLocation["VertexID$51", Automatic, Center]}, {
                    DynamicLocation["VertexID$13", Automatic, Center], 
                    DynamicLocation["VertexID$52", Automatic, Center]}, {
                    DynamicLocation["VertexID$13", Automatic, Center], 
                    DynamicLocation["VertexID$53", Automatic, Center]}, {
                    DynamicLocation["VertexID$13", Automatic, Center], 
                    DynamicLocation["VertexID$54", Automatic, Center]}, {
                    DynamicLocation["VertexID$14", Automatic, Center], 
                    DynamicLocation["VertexID$55", Automatic, Center]}, {
                    DynamicLocation["VertexID$14", Automatic, Center], 
                    DynamicLocation["VertexID$56", Automatic, Center]}, {
                    DynamicLocation["VertexID$14", Automatic, Center], 
                    DynamicLocation["VertexID$57", Automatic, Center]}, {
                    DynamicLocation["VertexID$14", Automatic, Center], 
                    DynamicLocation["VertexID$58", Automatic, Center]}, {
                    DynamicLocation["VertexID$15", Automatic, Center], 
                    DynamicLocation["VertexID$59", Automatic, Center]}, {
                    DynamicLocation["VertexID$15", Automatic, Center], 
                    DynamicLocation["VertexID$60", Automatic, Center]}, {
                    DynamicLocation["VertexID$15", Automatic, Center], 
                    DynamicLocation["VertexID$61", Automatic, Center]}, {
                    DynamicLocation["VertexID$15", Automatic, Center], 
                    DynamicLocation["VertexID$62", Automatic, Center]}, {
                    DynamicLocation["VertexID$16", Automatic, Center], 
                    DynamicLocation["VertexID$63", Automatic, Center]}, {
                    DynamicLocation["VertexID$16", Automatic, Center], 
                    DynamicLocation["VertexID$64", Automatic, Center]}, {
                    DynamicLocation["VertexID$16", Automatic, Center], 
                    DynamicLocation["VertexID$65", Automatic, Center]}, {
                    DynamicLocation["VertexID$16", Automatic, Center], 
                    DynamicLocation["VertexID$66", Automatic, Center]}, {
                    DynamicLocation["VertexID$17", Automatic, Center], 
                    DynamicLocation["VertexID$67", Automatic, Center]}, {
                    DynamicLocation["VertexID$17", Automatic, Center], 
                    DynamicLocation["VertexID$68", Automatic, Center]}, {
                    DynamicLocation["VertexID$17", Automatic, Center], 
                    DynamicLocation["VertexID$69", Automatic, Center]}, {
                    DynamicLocation["VertexID$17", Automatic, Center], 
                    DynamicLocation["VertexID$70", Automatic, Center]}, {
                    DynamicLocation["VertexID$18", Automatic, Center], 
                    DynamicLocation["VertexID$71", Automatic, Center]}, {
                    DynamicLocation["VertexID$18", Automatic, Center], 
                    DynamicLocation["VertexID$72", Automatic, Center]}, {
                    DynamicLocation["VertexID$18", Automatic, Center], 
                    DynamicLocation["VertexID$73", Automatic, Center]}, {
                    DynamicLocation["VertexID$18", Automatic, Center], 
                    DynamicLocation["VertexID$74", Automatic, Center]}, {
                    DynamicLocation["VertexID$19", Automatic, Center], 
                    DynamicLocation["VertexID$75", Automatic, Center]}, {
                    DynamicLocation["VertexID$19", Automatic, Center], 
                    DynamicLocation["VertexID$76", Automatic, Center]}, {
                    DynamicLocation["VertexID$19", Automatic, Center], 
                    DynamicLocation["VertexID$77", Automatic, Center]}, {
                    DynamicLocation["VertexID$19", Automatic, Center], 
                    DynamicLocation["VertexID$78", Automatic, Center]}, {
                    DynamicLocation["VertexID$20", Automatic, Center], 
                    DynamicLocation["VertexID$79", Automatic, Center]}, {
                    DynamicLocation["VertexID$20", Automatic, Center], 
                    DynamicLocation["VertexID$80", Automatic, Center]}, {
                    DynamicLocation["VertexID$20", Automatic, Center], 
                    DynamicLocation["VertexID$81", Automatic, Center]}, {
                    DynamicLocation["VertexID$20", Automatic, Center], 
                    DynamicLocation["VertexID$82", Automatic, Center]}, {
                    DynamicLocation["VertexID$21", Automatic, Center], 
                    DynamicLocation["VertexID$83", Automatic, Center]}, {
                    DynamicLocation["VertexID$21", Automatic, Center], 
                    DynamicLocation["VertexID$84", Automatic, Center]}, {
                    DynamicLocation["VertexID$21", Automatic, Center], 
                    DynamicLocation["VertexID$85", Automatic, Center]}, {
                    DynamicLocation["VertexID$21", Automatic, Center], 
                    DynamicLocation["VertexID$86", Automatic, Center]}, {
                    DynamicLocation["VertexID$22", Automatic, Center], 
                    DynamicLocation["VertexID$87", Automatic, Center]}, {
                    DynamicLocation["VertexID$22", Automatic, Center], 
                    DynamicLocation["VertexID$88", Automatic, Center]}, {
                    DynamicLocation["VertexID$22", Automatic, Center], 
                    DynamicLocation["VertexID$89", Automatic, Center]}, {
                    DynamicLocation["VertexID$22", Automatic, Center], 
                    DynamicLocation["VertexID$90", Automatic, Center]}, {
                    DynamicLocation["VertexID$23", Automatic, Center], 
                    DynamicLocation["VertexID$91", Automatic, Center]}, {
                    DynamicLocation["VertexID$23", Automatic, Center], 
                    DynamicLocation["VertexID$92", Automatic, Center]}, {
                    DynamicLocation["VertexID$23", Automatic, Center], 
                    DynamicLocation["VertexID$93", Automatic, Center]}, {
                    DynamicLocation["VertexID$23", Automatic, Center], 
                    DynamicLocation["VertexID$94", Automatic, Center]}, {
                    DynamicLocation["VertexID$24", Automatic, Center], 
                    DynamicLocation["VertexID$95", Automatic, Center]}, {
                    DynamicLocation["VertexID$24", Automatic, Center], 
                    DynamicLocation["VertexID$96", Automatic, Center]}, {
                    DynamicLocation["VertexID$24", Automatic, Center], 
                    DynamicLocation["VertexID$97", Automatic, Center]}, {
                    DynamicLocation["VertexID$24", Automatic, Center], 
                    DynamicLocation["VertexID$98", Automatic, Center]}, {
                    DynamicLocation["VertexID$25", Automatic, Center], 
                    DynamicLocation["VertexID$99", Automatic, Center]}, {
                    DynamicLocation["VertexID$25", Automatic, Center], 
                    DynamicLocation["VertexID$100", Automatic, Center]}, {
                    DynamicLocation["VertexID$25", Automatic, Center], 
                    DynamicLocation["VertexID$101", Automatic, Center]}, {
                    DynamicLocation["VertexID$25", Automatic, Center], 
                    DynamicLocation["VertexID$102", Automatic, Center]}, {
                    DynamicLocation["VertexID$26", Automatic, Center], 
                    DynamicLocation["VertexID$103", Automatic, Center]}, {
                    DynamicLocation["VertexID$26", Automatic, Center], 
                    DynamicLocation["VertexID$104", Automatic, Center]}, {
                    DynamicLocation["VertexID$26", Automatic, Center], 
                    DynamicLocation["VertexID$105", Automatic, Center]}, {
                    DynamicLocation["VertexID$26", Automatic, Center], 
                    DynamicLocation["VertexID$106", Automatic, Center]}}]}, {
                    Directive[
                    Hue[0.6, 0.2, 0.8], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.7]]]], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{2.8409337371974663`, 2.840933737197467}, {
                    2.9243210757962563`, 2.9243210757962568`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$1"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{2.275709343876705, 3.61889837317345}, {
                    2.359096682475495, 3.70228571177224}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$2"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{1.9263814575339353`, 2.5437776883000804`}, {
                    2.0097687961327253`, 2.6271650268988704`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$3"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{2.8409337371974663`, 1.8793165630402728`}, {
                    2.9243210757962563`, 1.9627039016390628`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$4"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{3.7971796861603924`, 2.638531551485925}, {
                    3.7443675695897354`, 2.547058546241058}, {
                    3.8499918027310494`, 2.547058546241058}, {
                    3.7971796861603924`, 2.638531551485925}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$5"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{3.447851799817623, 3.7161835700368235`}, {
                    3.434108789050916, 3.674612143788087}, {
                    3.3922602722536443`, 3.6737154269839345`}, {
                    3.4256151887920314`, 3.6471261695074957`}, {
                    3.413494320153678, 3.6050005149088666`}, {
                    3.447851799817623, 3.630138874484082}, {
                    3.4822092794815678`, 3.6050005149088666`}, {
                    3.470088410843214, 3.6471261695074957`}, {
                    3.5034433273816012`, 3.6737154269839345`}, {
                    3.4615948105843297`, 3.674612143788087}, {
                    3.447851799817623, 3.7161835700368235`}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$6"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{2.5400736007719082`, 4.740489879259676}, {
                    2.6234609393706982`, 4.823877217858466}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$7"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{1.9678036142899558`, 4.554548089088751}, {
                    2.0511909528887458`, 4.637935427687541}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$8"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{1.522695356992867, 4.295619649887306}, {
                    1.46988324042221, 4.20414664464244}, {1.575507473563524, 
                    4.20414664464244}, {1.522695356992867, 
                    4.295619649887306}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$9"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{1.1690130546055777`, 3.8113490569683512`}, {
                    1.155270043838871, 3.7697776307196147`}, {
                    1.113421527041599, 3.768880913915462}, {
                    1.1467764435799863`, 3.7422916564390234`}, {
                    1.1346555749416327`, 3.7001660018403943`}, {
                    1.1690130546055777`, 3.72530436141561}, {
                    1.2033705342695227`, 3.7001660018403943`}, {
                    1.191249665631169, 3.7422916564390234`}, {
                    1.2246045821695564`, 3.768880913915462}, {
                    1.1827560653722844`, 3.7697776307196147`}, {
                    1.1690130546055777`, 3.8113490569683512`}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$10"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.9413775951352572, 3.1417938736230253`}, {
                    1.0247649337340472`, 3.2251812122218153`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$11"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.9413775951352572, 2.5400736007719087`}, {
                    1.0247649337340472`, 2.6234609393706987`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$12"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{1.1690130546055775`, 2.062557477475801}, {
                    1.1162009380349205`, 1.971084472230934}, {
                    1.2218251711762345`, 1.971084472230934}, {
                    1.1690130546055775`, 2.062557477475801}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$13"], 
                    TagBox[
                    StyleBox[
                    PolygonBox[{{1.5226953569928667`, 1.578286884556846}, {
                    1.50895234622616, 1.5367154583081093`}, {
                    1.467103829428888, 1.5358187415039566`}, {
                    1.5004587459672754`, 1.5092294840275178`}, {
                    1.4883378773289218`, 1.4671038294288887`}, {
                    1.5226953569928667`, 1.4922421890041044`}, {
                    1.5570528366568117`, 1.4671038294288887`}, {
                    1.5449319680184581`, 1.5092294840275178`}, {
                    1.5782868845568454`, 1.5358187415039566`}, {
                    1.5364383677595734`, 1.5367154583081093`}, {
                    1.5226953569928667`, 1.578286884556846}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$14"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{1.9678036142899553`, 1.1273193853061831`}, {
                    2.0511909528887453`, 1.2107067239049731`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$15"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{2.540073600771908, 0.9413775951352576}, {
                    2.623460939370698, 1.0247649337340476`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$16"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{3.1834875429224194`, 1.0361314583211025`}, {
                    3.1306754263517624`, 0.9446584530762354}, {
                    3.2362996594930764`, 0.9446584530762354}, {
                    3.1834875429224194`, 1.0361314583211025`}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$17"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{3.755757529404372, 1.2246045821695566`}, {
                    3.742014518637665, 1.1830331559208198`}, {
                    3.7001660018403935`, 1.182136439116667}, {
                    3.7335209183787805`, 1.1555471816402283`}, {
                    3.721400049740427, 1.1134215270415992`}, {
                    3.755757529404372, 1.138559886616815}, {3.790115009068317,
                     1.1134215270415992`}, {3.7779941404299633`, 
                    1.1555471816402283`}, {3.8113490569683504`, 
                    1.182136439116667}, {3.769500540171079, 
                    1.1830331559208198`}, {3.755757529404372, 
                    1.2246045821695566`}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$18"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{4.200865786701461, 1.4810016876934722`}, {
                    4.284253125300251, 1.5643890262922622`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$19"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{4.55454808908875, 1.9678036142899558`}, {
                    4.63793542768754, 2.0511909528887458`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$20"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{4.740489879259675, 2.540073600771908}, {
                    4.823877217858465, 2.623460939370698}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$21"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{4.78218354855907, 3.239079070486398}, {
                    4.7684405377923635`, 3.1975076442376613`}, {
                    4.726592020995091, 3.196610927433509}, {4.759946937533479,
                     3.17002166995707}, {4.747826068895125, 
                    3.127896015358441}, {4.78218354855907, 
                    3.1530343749336565`}, {4.816541028223015, 
                    3.127896015358441}, {4.804420159584661, 
                    3.17002166995707}, {4.837775076123049, 
                    3.196610927433509}, {4.7959265593257765`, 
                    3.1975076442376613`}, {4.78218354855907, 
                    3.239079070486398}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$22"], 
                    TagBox[
                    StyleBox[
                    RectangleBox[{4.55454808908875, 3.714063860104977}, {
                    4.63793542768754, 3.797451198703767}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$23"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{4.200865786701461, 4.200865786701461}, {
                    4.284253125300251, 4.284253125300251}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$24"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{3.7140638601049774`, 4.55454808908875}, {
                    3.7974511987037673`, 4.63793542768754}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$25"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{3.1834875429224203`, 4.83524374244552}, {
                    3.1306754263517633`, 4.743770737200654}, {
                    3.2362996594930773`, 4.743770737200654}, {
                    3.1834875429224203`, 4.83524374244552}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$26"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{2.7276749979329638`, 5.723561143694328}, {
                    2.8110623365317537`, 5.806948482293118}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$27"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{2.501855797193876, 5.7057887871623905`}, {
                    2.585243135792666, 5.7891761257611805`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$28"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{2.3198207940091624`, 5.765107509772288}, {
                    2.2670086774385054`, 5.6736345045274215`}, {
                    2.3726329105798194`, 5.6736345045274215`}, {
                    2.3198207940091624`, 5.765107509772288}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$29"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{2.099562011443231, 5.714759388254891}, {
                    2.085819000676524, 5.673187962006154}, {
                    2.0439704838792525`, 5.672291245202001}, {
                    2.0773254004176396`, 5.6457019877255625`}, {
                    2.065204531779286, 5.6035763331269335`}, {
                    2.099562011443231, 5.628714692702149}, {2.133919491107176,
                     5.6035763331269335`}, {2.1217986224688223`, 
                    5.6457019877255625`}, {2.1551535390072094`, 
                    5.672291245202001}, {2.113305022209938, 
                    5.673187962006154}, {2.099562011443231, 
                    5.714759388254891}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$30"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{1.8424374181340775`, 5.547476441003093}, {
                    1.9258247567328675`, 5.630863779601883}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$31"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{1.6331625559650649`, 5.460791954828927}, {
                    1.7165498945638549`, 5.544179293427717}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$32"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{1.4730276740524157`, 5.452709034737646}, {
                    1.4202155574817588`, 5.36123602949278}, {
                    1.5258397906230727`, 5.36123602949278}, {
                    1.4730276740524157`, 5.452709034737646}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$33"], 
                    TagBox[
                    StyleBox[
                    PolygonBox[{{1.279889773930371, 5.336885311000695}, {
                    1.2661467631636643`, 5.295313884751958}, {
                    1.2242982463663923`, 5.294417167947805}, {
                    1.2576531629047796`, 5.267827910471366}, {
                    1.245532294266426, 5.225702255872737}, {1.279889773930371,
                     5.250840615447953}, {1.314247253594316, 
                    5.225702255872737}, {1.3021263849559623`, 
                    5.267827910471366}, {1.3354813014943496`, 
                    5.294417167947805}, {1.2936327846970777`, 
                    5.295313884751958}, {1.279889773930371, 
                    5.336885311000695}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$34"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{1.054939614978047, 5.106456480871493}, {
                    1.138326953576837, 5.189843819470283}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$35"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.8826943729919148, 4.9593451465281575`}, {
                    0.9660817115907048, 5.0427324851269475`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$36"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.7225223278667761, 4.799173101403018}, {
                    0.805909666465566, 4.882560440001808}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$37"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{0.6171046628228347, 4.72421305628026}, {
                    0.6033616520561279, 4.682641630031523}, {
                    0.561513135258856, 4.68174491322737}, {0.5948680517972432,
                     4.6551556557509315`}, {0.5827471831588897, 
                    4.613030001152302}, {0.6171046628228347, 
                    4.638168360727518}, {0.6514621424867797, 
                    4.613030001152302}, {0.6393412738484262, 
                    4.6551556557509315`}, {0.6726961903868134, 
                    4.68174491322737}, {0.6308476735895415, 
                    4.682641630031523}, {0.6171046628228347, 
                    4.72421305628026}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$38"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.4422673602576124, 4.443671369763958}, {
                    0.5256546988564024, 4.527058708362748}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$39"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.3239123028431319, 4.250533469641913}, {
                    0.4072996414419219, 4.333920808240703}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$40"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.22107551956600566`, 4.048704918429869}, {
                    0.3044628581647957, 4.132092257028659}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$41"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{0.17608470269123577`, 3.9341839194467014`}, {
                    0.12327258612057886`, 3.8427109142018345`}, {
                    0.2288968192618927, 3.8427109142018345`}, {
                    0.17608470269123577`, 3.9341839194467014`}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$42"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.06439328300341526, 3.623999132251097}, {
                    0.14778062160220531`, 3.707386470849887}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$43"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.011513827808489176`, 
                    3.4037403496851666`}, {0.09490116640727922, 
                    3.4871276882839566`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$44"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{0.017772356531937206`, 
                    3.274765540386902}, {-0.03503976003871971, 
                    3.183292535142035}, {0.07058447310259412, 
                    3.183292535142035}, {0.017772356531937206`, 
                    3.274765540386902}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$45"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{0., 
                    3.051477673325344}, {-0.013743010766706802`, 
                    3.0099062470766076`}, {-0.05559152756397865, 
                    3.009009530272455}, {-0.022236611025591463`, 
                    2.9824202727960163`}, {-0.03435747966394495, 
                    2.9402946181973872`}, {0., 2.9654329777726027`}, {
                    0.03435747966394495, 2.9402946181973872`}, {
                    0.022236611025591463`, 2.9824202727960163`}, {
                    0.05559152756397865, 3.009009530272455}, {
                    0.013743010766706802`, 3.0099062470766076`}, {0., 
                    3.051477673325344}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$46"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{-0.04169366929939502, 
                    2.7276749979329638`}, {0.04169366929939502, 
                    2.8110623365317537`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$47"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{-0.023921312767457813`, 
                    2.5018557971938775`}, {0.059466025831332224`, 
                    2.5852431357926675`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$48"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{0.053207497107884194`, 
                    2.3728809878956127`}, {0.0003953805372272773, 
                    2.281407982650746}, {0.10601961367854111`, 
                    2.281407982650746}, {0.053207497107884194`, 
                    2.3728809878956127`}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$49"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{0.10608695230280984`, 2.1551535390072103`}, {
                    0.09234394153610304, 2.1135821127584737`}, {
                    0.050495424738831195`, 2.1126853959543213`}, {
                    0.08385034127721838, 2.0860961384778824`}, {
                    0.0717294726388649, 2.0439704838792534`}, {
                    0.10608695230280984`, 2.069108843454469}, {
                    0.1404444319667548, 2.0439704838792534`}, {
                    0.1283235633284013, 2.0860961384778824`}, {
                    0.1616784798667885, 2.1126853959543213`}, {
                    0.11982996306951665`, 2.1135821127584737`}, {
                    0.10608695230280984`, 2.1551535390072103`}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$50"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.1343910333918403, 1.8424374181340772`}, {
                    0.21777837199063035`, 1.9258247567328672`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$51"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.2210755195660052, 1.6331625559650653`}, {
                    0.30446285816479524`, 1.7165498945638553`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$52"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.32391230284313144`, 
                    1.4313340047530214`}, {0.40729964144192143`, 
                    1.5147213433518114`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$53"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{0.4839610295570069, 1.33548130149435}, {
                    0.4702180187903001, 1.2939098752456133`}, {
                    0.42836950199302826`, 1.2930131584414606`}, {
                    0.46172441853141544`, 1.2664239009650218`}, {
                    0.44960354989306195`, 1.2242982463663927`}, {
                    0.4839610295570069, 1.2494366059416084`}, {
                    0.5183185092209519, 1.2242982463663927`}, {
                    0.5061976405825984, 1.2664239009650218`}, {
                    0.5395525571209856, 1.2930131584414606`}, {
                    0.49770404032371374`, 1.2939098752456133`}, {
                    0.4839610295570069, 1.33548130149435}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$54"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.5754109935234393, 1.0549396149780474`}, {
                    0.6587983321222293, 1.1383269535768374`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$55"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.7225223278667756, 0.8826943729919157}, {
                    0.8059096664655656, 0.9660817115907057}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$56"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{0.8826943729919134, 0.722522327866777}, {
                    0.9660817115907034, 0.8059096664655669}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$57"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{1.0966332842774411`, 0.6701648567092849}, {
                    1.0438211677067841`, 0.5786918514644179}, {
                    1.149445400848098, 0.5786918514644179}, {
                    1.0966332842774411`, 0.6701648567092849}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$58"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{1.2381961046309753`, 
                    0.44226736025761326`}, {1.3215834432297653`, 
                    0.5256546988564033}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$59"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{1.4313340047530225`, 0.323912302843131}, {
                    1.5147213433518125`, 0.407299641441921}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$60"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{1.6748562252644614`, 0.3158293827518501}, {
                    1.6220441086938044`, 0.22435637750698303`}, {
                    1.7276683418351184`, 0.22435637750698303`}, {
                    1.6748562252644614`, 0.3158293827518501}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$61"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{1.884131087433476, 0.23167623025521308`}, {
                    1.8703880766667693`, 0.19010480400647642`}, {
                    1.8285395598694973`, 0.18920808720232363`}, {
                    1.8618944764078846`, 0.16261882972588487`}, {
                    1.849773607769531, 0.1204931751272558}, {
                    1.884131087433476, 0.14563153470247142`}, {
                    1.918488567097421, 0.1204931751272558}, {
                    1.9063676984590674`, 0.16261882972588487`}, {
                    1.9397226149974547`, 0.18920808720232363`}, {
                    1.8978740982001827`, 0.19010480400647642`}, {
                    1.884131087433476, 0.23167623025521308`}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$62"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{2.057868342143836, 0.06439328300341571}, {
                    2.141255680742626, 0.14778062160220576`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$63"], 
                    TagBox[
                    StyleBox[
                    RectangleBox[{2.2781271247097687`, 
                    0.011513827808489176`}, {2.3615144633085587`, 
                    0.09490116640727922}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$64"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{2.5435494664932734`, 0.07083255041838704}, {
                    2.4907373499226164`, -0.020640454826480005`}, {
                    2.5963615830639304`, -0.020640454826480005`}, {
                    2.5435494664932734`, 0.07083255041838704}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$65"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{2.7693686672323623`, 0.05559152756397865}, {
                    2.7556256564656554`, 0.014020101315241973`}, {
                    2.713777139668384, 0.01312338451108919}, {
                    2.747132056206771, -0.013465872965349577`}, {
                    2.7350111875684173`, -0.05559152756397865}, {
                    2.7693686672323623`, -0.030453167988763005`}, {
                    2.8037261468963073`, -0.05559152756397865}, {
                    2.7916052782579537`, -0.013465872965349577`}, {
                    2.8249601947963408`, 0.01312338451108919}, {
                    2.7831116779990692`, 0.014020101315241973`}, {
                    2.7693686672323623`, 0.05559152756397865}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$66"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{
                    2.9541924764619694`, -0.041693669299394574`}, {
                    3.0375798150607594`, 0.04169366929939546}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$67"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{
                    3.1800116772010583`, -0.02392131276745737}, {
                    3.2633990157998483`, 0.05946602583133267}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$68"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{3.403740349685168, 0.011513827808490064`}, {
                    3.487127688283958, 0.09490116640728011}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$69"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{3.6656928015504957`, 0.1616784798667907}, {
                    3.651949790783789, 0.12010705361805404`}, {
                    3.6101012739865173`, 0.11921033681390125`}, {
                    3.6434561905249043`, 0.09262107933746248}, {
                    3.6313353218865507`, 0.050495424738833415`}, {
                    3.6656928015504957`, 0.07563378431404906}, {
                    3.7000502812144407`, 0.050495424738833415`}, {
                    3.687929412576087, 0.09262107933746248}, {
                    3.721284329114474, 0.11921033681390125`}, {
                    3.6794358123172026`, 0.12010705361805404`}, {
                    3.6656928015504957`, 0.1616784798667907}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$70"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{3.8394300562608557`, 
                    0.13439103339184075`}, {3.9228173948596456`, 
                    0.2177783719906308}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$71"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{4.04870491842987, 0.221075519566007}, {
                    4.13209225702866, 0.304462858164797}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$72"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{4.250533469641914, 0.32391230284313277`}, {
                    4.333920808240704, 0.40729964144192277`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$73"], 
                    TagBox[
                    StyleBox[
                    PolygonBox[{{4.485365039063356, 0.5370212234434598}, {
                    4.432552922492699, 0.4455482181985928}, {
                    4.5381771556340125`, 0.4455482181985928}, {
                    4.485365039063356, 0.5370212234434598}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$74"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{4.6269278594168854`, 0.5754109935234393}, {
                    4.710315198015675, 0.6587983321222293}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$75"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{4.79917310140302, 0.7225223278667774}, {
                    4.88256044000181, 0.8059096664655674}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$76"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{4.9593451465281575`, 0.8826943729919163}, {
                    5.0427324851269475`, 0.9660817115907063}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$77"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{5.148150150170891, 1.1522248118414242`}, {
                    5.134407139404185, 1.1106533855926874`}, {
                    5.092558622606912, 1.1097566687885347`}, {5.1259135391453,
                     1.083167411312096}, {5.113792670506946, 
                    1.0410417567134669`}, {5.148150150170891, 
                    1.0661801162886826`}, {5.182507629834836, 
                    1.0410417567134669`}, {5.170386761196482, 
                    1.083167411312096}, {5.20374167773487, 
                    1.1097566687885347`}, {5.1618931609375975`, 
                    1.1106533855926874`}, {5.148150150170891, 
                    1.1522248118414242`}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$78"], 
                    TagBox[
                    StyleBox[
                    RectangleBox[{5.239600114137319, 1.2381961046309757`}, {
                    5.322987452736109, 1.3215834432297657`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$79"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{5.357955171551802, 1.4313340047530227`}, {
                    5.441342510150592, 1.5147213433518127`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$80"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{5.460791954828927, 1.6331625559650667`}, {
                    5.544179293427717, 1.7165498945638566`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$81"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{5.589170110302488, 1.9397226149974547`}, {
                    5.575427099535782, 1.898151188748718}, {5.533578582738509,
                     1.8972544719445652`}, {5.566933499276897, 
                    1.8706652144681264`}, {5.554812630638543, 
                    1.8285395598694973`}, {5.589170110302488, 
                    1.853677919444713}, {5.623527589966433, 
                    1.8285395598694973`}, {5.61140672132808, 
                    1.8706652144681264`}, {5.644761637866467, 
                    1.8972544719445652`}, {5.602913121069195, 
                    1.898151188748718}, {5.589170110302488, 
                    1.9397226149974547`}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$82"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{5.617474191391517, 2.057868342143836}, {
                    5.700861529990307, 2.141255680742626}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$83"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{5.6703536465864435`, 2.278127124709769}, {
                    5.7537409851852335`, 2.361514463308559}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$84"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{5.7057887871623905`, 2.501855797193879}, {
                    5.7891761257611805`, 2.585243135792669}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$85"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{5.765254812993723, 2.824960194796341}, {
                    5.751511802227016, 2.7833887685476046`}, {
                    5.709663285429744, 2.782492051743452}, {5.743018201968131,
                     2.7559027942670133`}, {5.730897333329778, 
                    2.7137771396683843`}, {5.765254812993723, 
                    2.7389154992436}, {5.799612292657668, 
                    2.7137771396683843`}, {5.787491424019314, 
                    2.7559027942670133`}, {5.820846340557702, 
                    2.782492051743452}, {5.778997823760429, 
                    2.7833887685476046`}, {5.765254812993723, 
                    2.824960194796341}}], 
                    RGBColor[0.5, 0, 0.5], StripOnInput -> False], 
                    "DynamicName", BoxID -> "VertexID$86"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{5.723561143694328, 2.9541924764619694`}, {
                    5.806948482293118, 3.0375798150607594`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$87"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{5.7057887871623905`, 3.1800116772010583`}, {
                    5.7891761257611805`, 3.2633990157998483`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$88"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{5.6703536465864435`, 3.403740349685168}, {
                    5.7537409851852335`, 3.487127688283958}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$89"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{5.617474191391516, 3.623999132251101}, {
                    5.700861529990306, 3.707386470849891}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$90"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{5.547476441003092, 3.8394300562608557`}, {
                    5.630863779601882, 3.9228173948596456`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$91"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{5.460791954828926, 4.048704918429871}, {
                    5.544179293427716, 4.132092257028661}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$92"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{5.357955171551801, 4.250533469641914}, {
                    5.441342510150591, 4.333920808240704}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$93"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{5.2812937834367135`, 4.538425232949805}, {
                    5.228481666866057, 4.446952227704939}, {5.33410590000737, 
                    4.446952227704939}, {5.2812937834367135`, 
                    4.538425232949805}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$94"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{5.106456480871493, 4.626927859416886}, {
                    5.189843819470283, 4.710315198015676}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$95"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{4.959345146528156, 4.79917310140302}, {
                    5.042732485126946, 4.88256044000181}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$96"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{4.799173101403017, 4.959345146528158}, {
                    4.882560440001807, 5.042732485126948}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$97"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{4.668621528716278, 5.201210344057341}, {
                    4.615809412145621, 5.109737338812475}, {4.721433645286934,
                     5.109737338812475}, {4.668621528716278, 
                    5.201210344057341}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$98"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{4.443671369763958, 5.23960011413732}, {
                    4.527058708362748, 5.32298745273611}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$99"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{4.25053346964191, 5.357955171551803}, {
                    4.3339208082407, 5.441342510150593}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$100"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{4.048704918429866, 5.460791954828928}, {
                    4.132092257028656, 5.544179293427718}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$101"], 
                    TagBox[
                    StyleBox[
                    
                    PolygonBox[{{3.881123725560247, 5.642230304188939}, {
                    3.82831160898959, 5.550757298944072}, {3.933935842130904, 
                    5.550757298944072}, {3.881123725560247, 
                    5.642230304188939}}], 
                    RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$102"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{3.623999132251097, 5.617474191391517}, {
                    3.707386470849887, 5.700861529990307}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$103"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{3.4037403496851644`, 5.670353646586444}, {
                    3.4871276882839544`, 5.753740985185234}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$104"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{3.1800116772010543`, 5.705788787162391}, {
                    3.2633990157998443`, 5.789176125761181}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$105"], 
                    TagBox[
                    StyleBox[
                    
                    RectangleBox[{2.954192476461966, 5.723561143694329}, {
                    3.037579815060756, 5.8069484822931186`}], 
                    RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", 
                    BoxID -> "VertexID$106"]}}], $CellContext`flag}, 
                    TagBox[
                    DynamicBox[
                    GraphComputation`NetworkGraphicsBox[
                    3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
                    CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
                    SynchronousUpdating -> False, 
                    TrackedSymbols :> {$CellContext`flag}}, 
                    ImageSizeCache -> {{39.760693309010094`, 
                    320.2393066909899}, {-140.8118812734826, 
                    138.23930669098993`}}], 
                    MouseAppearanceTag["NetworkGraphics"]], 
                    AllowKernelInitialization -> False, 
                    UnsavedVariables :> {$CellContext`flag}]], 
                    DefaultBaseStyle -> {
                    "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
                    Hue[0.8, 1., 0.6]}, FrameTicks -> None, 
                    PlotRange -> {{-1., 6.765254812993723}, {-1., 
                    6.7652548129937236`}}]}, 
                  Dynamic[$CellContext`i6$$], Alignment -> Automatic, 
                  ImageSize -> All], Identity, Editable -> True, Selectable -> 
                 True], ImageMargins -> 10], Deployed -> False, StripOnInput -> 
               False, ScriptLevel -> 0, 
               GraphicsBoxOptions -> {PreserveImageOptions -> True}, 
               Graphics3DBoxOptions -> {PreserveImageOptions -> True}], 
              Identity, Editable -> False, Selectable -> False], 
             Alignment -> {Left, Center}, Background -> GrayLevel[1], Frame -> 
             1, FrameStyle -> GrayLevel[0, 0.2], ItemSize -> Automatic, 
             StripOnInput -> False]}}, AutoDelete -> False, 
          GridBoxAlignment -> {
           "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Top}}, 
            "RowsIndexed" -> {}}, 
          GridBoxDividers -> {
           "Columns" -> {{False}}, "ColumnsIndexed" -> {}, 
            "Rows" -> {{False}}, "RowsIndexed" -> {}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {"Columns" -> {
              Offset[0.7], {
               Offset[0.5599999999999999]}, 
              Offset[0.7]}, "ColumnsIndexed" -> {}, "Rows" -> {
              Offset[0.4], {
               Offset[0.8]}, 
              Offset[0.4]}, "RowsIndexed" -> {}}], 
         If[
          CurrentValue["SelectionOver"], 
          Manipulate`Dump`ReadControllerState[
           Map[Manipulate`Dump`updateOneVar[#, 
             CurrentValue["PreviousFormatTime"], 
             CurrentValue["CurrentFormatTime"]]& , {
             
             Manipulate`Dump`controllerLink[{$CellContext`i6$$, \
$CellContext`i6$12293$$}, "X1", 
              If["DefaultAbsolute", True, "JB1"], False, {1, 3, 1}, 3, 1.]}], 
           
           
           CurrentValue[{
            "ControllerData", {
             "Gamepad", "Joystick", "Multi-Axis Controller"}}], {}]], 
         ImageSizeCache -> {393., {207.875, 213.625}}], 
        DefaultBaseStyle -> {}, FrameMargins -> {{5, 5}, {5, 5}}], 
       BaselinePosition -> Automatic, ImageMargins -> 0], Deinitialization :> 
      None, DynamicModuleValues :> {}, SynchronousInitialization -> True, 
      UnsavedVariables :> {Typeset`initDone$$}, 
      UntrackedVariables :> {Typeset`size$$}], "ListAnimate", Deployed -> 
     True, StripOnInput -> False], 
    Manipulate`InterpretManipulate[1]]},
  "RowDefault"]], "Output",
 CellChangeTimes->{{3.583603025016389*^9, 3.583603045378541*^9}, 
   3.58360424325989*^9, {3.583604302256013*^9, 3.583604312156238*^9}, 
   3.583604433722775*^9, 3.583604742216691*^9, {3.5836047771526623`*^9, 
   3.583604801260418*^9}, 3.583604836592663*^9, 3.58360487566253*^9, 
   3.583613752927042*^9, 3.583613855830008*^9, 3.583614558328034*^9, 
   3.583676386590909*^9, {3.583761370255324*^9, 3.583761427340371*^9}, {
   3.583761847179556*^9, 3.583761894149229*^9}, 3.583762570501092*^9, {
   3.583765196064082*^9, 3.583765216749606*^9}, 3.583768274007019*^9, 
   3.583768914464348*^9, 3.5837749259165077`*^9, 3.583775177370577*^9, 
   3.5837818393028393`*^9, 3.583782784084712*^9, 3.583783406775075*^9, 
   3.583786676779687*^9, 3.583787158971179*^9, 3.583949366738965*^9, 
   3.583949907832563*^9, 3.583950021815629*^9, 3.583950905097543*^9, {
   3.5839514180082083`*^9, 3.583951449376142*^9}},
 TextAlignment->Center]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 TextAlignment->Center,
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Good and Bad Orbifolds", "Section",
 CellChangeTimes->{{3.583504537673525*^9, 3.583504582132621*^9}, {
  3.583509437760704*^9, 3.583509440334321*^9}, {3.583604913812951*^9, 
  3.5836049144171343`*^9}, {3.583604949342388*^9, 3.583604952190271*^9}, {
  3.583689447610469*^9, 3.583689449360402*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"teardrop", "=", 
   RowBox[{"Piecewise", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"1", "/", 
          RowBox[{"Sqrt", "[", "3", "]"}]}], "*", "x"}], ",", 
        RowBox[{"x", "\[LessEqual]", 
         RowBox[{"Sqrt", "[", "3", "]"}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Sqrt", "[", 
         RowBox[{
          RowBox[{"4", "/", "3"}], "-", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"x", "-", 
             RowBox[{"4", "/", 
              RowBox[{"Sqrt", "[", "3", "]"}]}]}], ")"}], "^", "2"}]}], "]"}],
         ",", 
        RowBox[{
         RowBox[{"Sqrt", "[", "3", "]"}], "<", "x", "\[LessEqual]", 
         RowBox[{"2", "*", 
          RowBox[{"Sqrt", "[", "3", "]"}]}]}]}], "}"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cone", "=", 
   RowBox[{"RevolutionPlot3D", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"teardrop", ",", 
       RowBox[{"-", "x"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Theta]", ",", "0", ",", 
       RowBox[{"2", "\[Pi]"}]}], "}"}], ",", 
     RowBox[{"Mesh", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"5", ",", "10"}], "}"}]}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "4"}], ",", "0"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"bulb", "=", 
    RowBox[{"RevolutionPlot3D", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"teardrop", ",", 
        RowBox[{"-", "x"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "1", ",", 
        RowBox[{"2", 
         RowBox[{"Sqrt", "[", "3", "]"}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[Theta]", ",", "0", ",", 
        RowBox[{"2", "\[Pi]"}]}], "}"}], ",", 
      RowBox[{"Mesh", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"10", ",", "10"}], "}"}]}], ",", 
      RowBox[{"PlotRange", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "4"}], ",", "0"}], "}"}]}], "}"}]}], ",", 
      RowBox[{"Exclusions", "\[Rule]", "None"}], ",", 
      RowBox[{"PlotStyle", "\[Rule]", "Blue"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"football", " ", "=", " ", 
    RowBox[{"RevolutionPlot3D", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{".5", "*", 
         RowBox[{"(", 
          RowBox[{"1", "-", 
           RowBox[{"x", "^", "2"}]}], ")"}]}], ",", "x"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[Theta]", ",", "0", ",", 
        RowBox[{"2", "\[Pi]"}]}], "}"}], ",", 
      RowBox[{"Mesh", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"5", ",", "10"}], "}"}]}], ",", 
      RowBox[{"PlotStyle", "\[Rule]", "Blue"}], ",", 
      RowBox[{"Axes", "\[Rule]", "False"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"sphere", " ", "=", " ", 
    RowBox[{"RevolutionPlot3D", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Sqrt", "[", 
         RowBox[{"1", "-", 
          SuperscriptBox["t", "2"]}], "]"}], ",", "t"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", 
        RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[Theta]", ",", "0", ",", 
        RowBox[{"2", "\[Pi]"}]}], "}"}], ",", 
      RowBox[{"PlotStyle", "\[Rule]", "Blue"}], ",", " ", 
      RowBox[{"Axes", "\[Rule]", "False"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"dwnArrw", " ", "=", " ", 
    RowBox[{"Graphics", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Arrowheads", "[", ".1", "]"}], ",", 
       RowBox[{"Arrow", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", ".3"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", ".3"}]}], "}"}]}], "}"}], "]"}]}], "}"}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Grid", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Spacer", "[", "5", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Style", "[", 
        RowBox[{"\"\<Good Orbifold\>\"", ",", " ", "\"\<Subsection\>\""}], 
        "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Style", "[", 
        RowBox[{"\"\<Bad Orbifold\>\"", ",", " ", "\"\<Subsection\>\""}], 
        "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Spacer", "[", "5", "]"}]}], "\[IndentingNewLine]", "}"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Spacer", "[", "5", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Spacer", "[", "5", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Spacer", "[", "5", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Spacer", "[", "5", "]"}]}], "\[IndentingNewLine]", "}"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Spacer", "[", "5", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Style", "[", 
        RowBox[{
        "\"\<Some universal cover...\>\"", ",", " ", 
         "\"\<Subsubsection\>\""}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Style", "[", 
        RowBox[{
        "\"\<Some universal cover...\>\"", ",", " ", 
         "\"\<Subsubsection\>\""}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Spacer", "[", "5", "]"}]}], "\[IndentingNewLine]", "}"}], ",",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Spacer", "[", "5", "]"}], ",", "\[IndentingNewLine]", 
       "dwnArrw", ",", "\[IndentingNewLine]", "dwnArrw", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Spacer", "[", "5", "]"}]}], "\[IndentingNewLine]", "}"}], ",",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Spacer", "[", "5", "]"}], ",", "\[IndentingNewLine]", 
       "sphere", ",", "\[IndentingNewLine]", 
       RowBox[{"Magnify", "[", 
        RowBox[{
         RowBox[{"Text", "[", 
          RowBox[{"Style", "[", 
           RowBox[{"\"\<\[ScriptX]\>\"", ",", " ", "Red", ",", " ", "24"}], 
           "]"}], "]"}], ",", " ", "4"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Spacer", "[", "5", "]"}]}], "\[IndentingNewLine]", "}"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Spacer", "[", "5", "]"}], ",", "\[IndentingNewLine]", 
       "dwnArrw", ",", "\[IndentingNewLine]", "dwnArrw", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Spacer", "[", "5", "]"}]}], "\[IndentingNewLine]", "}"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Spacer", "[", "5", "]"}], ",", "\[IndentingNewLine]", 
       "football", ",", "\[IndentingNewLine]", 
       RowBox[{"Show", "[", 
        RowBox[{"cone", ",", "bulb", ",", 
         RowBox[{"SphericalRegion", "\[Rule]", "True"}], ",", 
         RowBox[{"Axes", "\[Rule]", "False"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"300", ",", "300"}], "}"}]}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Spacer", "[", "5", "]"}]}], "\[IndentingNewLine]", "}"}]}], 
    "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Alignment", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"Left", ",", " ", "Right"}], "}"}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"ItemSize", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Scaled", "[", ".2", "]"}], ",", " ", 
       RowBox[{"Scaled", "[", ".3", "]"}], ",", " ", 
       RowBox[{"Scaled", "[", ".3", "]"}], ",", " ", 
       RowBox[{"Scaled", "[", ".2", "]"}]}], "}"}], "}"}]}]}], 
  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]"}], "Input",
 CellOpen->False,
 CellChangeTimes->{
  3.583689434030222*^9, {3.583690038818116*^9, 3.583690064557714*^9}, {
   3.58369221561723*^9, 3.583692295584877*^9}, {3.5836971219493*^9, 
   3.583697128587344*^9}, {3.5836974345230513`*^9, 3.58369746233471*^9}, {
   3.5836974976174173`*^9, 3.583697552388973*^9}, {3.58369763742273*^9, 
   3.583697661283956*^9}, {3.583697697187623*^9, 3.583697697681795*^9}, {
   3.583697921812044*^9, 3.5836979270391903`*^9}, {3.583698022251027*^9, 
   3.583698106174611*^9}, {3.583698152561407*^9, 3.583698152736507*^9}, {
   3.583698209683529*^9, 3.58369823806411*^9}, {3.583699151298019*^9, 
   3.583699185253458*^9}, {3.583699394613495*^9, 3.583699469642783*^9}, {
   3.583950965930999*^9, 3.5839509892351837`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]], 
     StyleBox["\<\"Good Orbifold\"\>", "Subsection",
      StripOnInput->False], 
     StyleBox["\<\"Bad Orbifold\"\>", "Subsection",
      StripOnInput->False], 
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]]},
    {
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]], 
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]], 
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]], 
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]]},
    {
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]], 
     StyleBox["\<\"Some universal cover...\"\>", "Subsubsection",
      StripOnInput->False], 
     StyleBox["\<\"Some universal cover...\"\>", "Subsubsection",
      StripOnInput->False], 
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]]},
    {
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]], 
     GraphicsBox[
      {Arrowheads[0.1], ArrowBox[{{0, 0.3}, {0, -0.3}}]}], 
     GraphicsBox[
      {Arrowheads[0.1], ArrowBox[{{0, 0.3}, {0, -0.3}}]}], 
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]]},
    {
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]], 
     Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1:eJyEXXVYVs3TxkIxsbuxuwsZO7EwX/W1u7sVuzGwEMF8sRVFxUJWUUTFlhSD
buwuvnPY2fHh/JxP/uG65jrXPvfeMzt1ds+WHTbZbmRGMzOzHznNzDJp/83y
HWsRu6wl7M7f2tFmwZvmZZ93OZOa+lrkquv6fOX8cMiYqcXyQPONNqNmnNrp
OTFJ3N5cJKL+yFg4ZtF2SeEC22yO5si/eGJYrJgbM8zDr1UihN3ZPHjeeSeb
V/tnjrLqGCmqDZkwe01CMkztPzzSruEum5Fp44SJHBtPJy87+gqinlxLjH3m
gs8/FjV3nar17dhruNnZdl+TB64o9xEzf6Rqf6+hyj3Hw11L7bYxwz/meWDG
BwYPMPiBmS8w/ADDJzTo63rt7EaAR2buE76MrAmK5xVhQV52Z57Drfvrh1vt
uguKZ0+/nw5TakRDz9MexYtMfgKK5+K7Gp3OdCQOqk3vvOrh7SBQPHsuObXL
IWcipLauMetRoVBQPK+bcWlj3n1JsOvUqZETXZ6C4nnY2Lf/ZVuTDFkKzG0S
Mj8MFM8Be2p19wpIhtK9d1y7diMMFM/M88CMDwweYPADM19g+OH4hJYdp9fp
FdwAxgw5W63b8GbEc73tc8YecQiAH9c2jUjyDSWel/s27Vk7JQwSYmvnHL00
gniO3Xmt/bbB4fD828DiBVdHE8/nV+1I8TOPhKd5O2y65hxLPE8umC/Ms1QU
bJs9q/Ctr3HE8xGPoo2aiyiw3L/ucb7r8cTzsE4/B+x9HwWZy/cKv545gXhm
ngdmfGDwAIMfmPkCww/HJwS8yNOsYM3SsGpladd5+VsSz3WWFbg4o+8V2Jyh
QiGvvOHE85kz3g2zvr4OA2e2ODArMIZ43h8RsjNgsB94Z05+3cQ5gXjece3W
+2+Xb4PV9wUVPtdKJp4L3Fh6aldnf/hZvMZz95gU4hlKrm3nW/suhCeW2nM6
/BXx/PRogTsb5t+FvGV/lHep+5p4Zp4HZnxg8ACDH5j5AsMPxye0OXQMitYs
LaJu3bQ35bmKa/Ylc/peEdB41bfLJjwn9+h3y+L1dWGz7NJCU55v7nzvEjzY
T5zKmXzdlGf4eaXNr8u3xVKfHB8/mfDcdPbn+ns6+4sHe/2PmPLc32tl/K3a
d8XqPLnHmfJccc7ZmY7z74raiwa92mXCM/M8MOMDgwcY/MDMFxh+OD7BzOVY
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
Ir1YYl05UtaVpJdArIOOyjqI9PJlsew/BMr+A+nlMPY3LKam9TdIL7/+k32S
C7JPQnr55S/7LT9kv4X0Ugv7Ng6yb0N6ccT+z2LZ/yG9MHJgxgHmd4HBCcy8
OD6B4QcYPmE19g0ayL4B6cUd+zClZB+G9HIC+wa7Zd+A9OKMfSR32UcivfyD
/ahrsh9FenHCvlZt2dcivUzG/thc2R8jvRzBPpt5lbQ+G+klCPt1QvbrSC+M
HJhxgPldYHACMy+OT2D4AYZPuIH9tyay/0Z6AbsLyfr+oaRDWUbOM8nHVP9t
4YWbev/NWz3vhv230mvS+m/C2Ae+13qA7fJ9jt5KX8zvAvM8MOMDg4frE4oW
OK9Lcl6/94+VqHJMr8O7Xp0/crTmbxTOGT+XOun1/IZ851wbaH5L2dXQI+YH
9Pq/xQfbNv9qfk7ZVaEVpxfo/YLkzS8fankE1V+vLFsldKySDK6H85/bq/lR
ZVflbpQqoPcjOtW2HLTTI4zqL0YOzDjA/C4wOIGZFzB9e2B4A4Y3uHejUFRO
rX4uNdzup5aHEp8bLkfl0OvwKf2zVfyk+RvF574FlVz1ut3HYcZqLf8lPrsu
FBnT6vzndXdp+TLxWa9IYmu9L5Ayrlrdn5r/U3x62a1arPcRln6q80TLx4lP
Rg7MOMD8LjA4gZkXMH1mjh8IS+29cb5W327PWaKLvo4Vb4Gzs9k30+rkX4Pn
fdf9AdWbk+qeOq7V1W/nzLbX/YfirVdIwy0ntDq8WJG+tbT673d/Jnjz6Zpa
3R4VWypI90+Kt4/FKr14pdX52UeWvqT7M8UbIwdmHGB+FxicwMwLmD4wxw98
TtoSsFDzdxmWva1mypvDad+uNprfbHppzGNT3loteP3cXfOzERey9TDlzffy
C7PTml92PdrqZ5QJbz3zDGpfV/PjRYte3WfK2/aFQ1a90/x+l0f/LTfljZED
Mw4wvwsMTmDmBUyfluMH5heveFevD33nzGptuk6Xr5tfXc8Det/46PHRZJ2+
f9i5hZ43zN3d39x0nRbuftZDr2PrPwnPbbpO51dJ+q7XvRWGT9rzw2Sdfp80
0VrPYzo/+qe56Tpl5MCMA8zvAoMTmHkB00fl+IGgqQFJev3Wyi++3yiTeHGl
yI54vQ507li+R32TeFGz9Kafet24MKPt3QEm8WLS8r4v9Doz87PezVJM4sW1
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
wb4pP0zWac2HaetLWM32GX6y0GZrhfO/ZmnrUZR9MnLo+347rBXOfdfS1q9o
1qfO7I8Ou6wVTjwVZbiP0snr+tE0/yMO2l7r6bl0n7XCucs9zV+Jsks8wk8U
2metcBbrkObfxE3fMDF54F5rhdMd+bwq+RRGPrNIPoXCGYR8zpZ8CoXzz/c5
OnltRT4XSz6Fwrkf+fyZksanIL+HfB6QfAqFcwfa53Vpn4RzDNrnbWmfhNMK
7XOMtE/C+ef7EJ283qN9jpH2STjvon0+lvZJOC3QPstI+yScdrjeJ8v1Tjjj
0693wnk9/XonnH++T9DJqzSu90VyvRPOrCfket8l1zvhTMD17iLXO+H8F/1n
d+k/CWdN9J9NpP8knHXQf5aR/pNw/vk+PievUug/s0v/STh7ov9Mkf6TcN5C
/2kp/Sfh/FhexqONMh4Rzl8dZDzaLeMR4cyJ8ai0jEeE88/32Tl5uWA8ipLx
iHDuw3jUSsYjwlkI49EcGY8IpzvmJytkfkI4c2J+YifzE8LZFPOT5zI/IZx/
vg/OySs35g+9ZP5AOI9h/lBV5g+EczXmD31l/kA4r2LcTwqu9FGL+94Kpy3m
CTl8g/Q8wVvhfI55RbM11/S8wlvh/PN9ak5eKi/anfpAz4u8FU6VR8HtRQW1
PMpb4XyEedd5m94ztLzLW+F8sNKlVpG9zyDlzvs1dz39yM+/f9iz46RvUXBn
QXTM3E/+5Odv9fWOfWcWD7VL/HzX84g/+flA5LO4IR/z/WeoZZ7eKfDPo2Lm
521DyM93WnPm8LAlyfB9UIlU9wkPyZ9Prtv3y2C3ALhS2q1X32LBhGf25V03
El49hxWX3Qslaf8VHvdlZ8p32hsJrbKcyNjALZzwDEc7zGTIi77NPFAhplIM
zN3heX7E8TjCM3PmrvHrSsXCxAGuzwfeiCI8K242MXOrdA2ia64qEO77nPAM
DLEbPEvjpemsDk46TwpPofp5r00o9QTyxLgXL1ogjvBEMPnPlU/jahTZ+gim
TYutVWTp77wi1Wl8ZO+zQWC3osm8kmOSCM9/GdqX2OhzVnxrUzrw3rrfeY4o
PuTF1I8eokAD3+cTs8UQng5ZFztmH3tQzM2Sd+qjN7/znFJMntNs0vVbd9v6
iubrJzdIsH39m5+1Mwd/czkqzGruX9p8dwrhMUv4eu9dyiNxLkuhJ8ltQgnP
/RVhb/etCBLNe0+Y+jUpgvAE5YKCB6uGiE09Qie9exZDeN5hvDA35DNL2/fa
03lwpLi+07P28egEwnPB5X1knMczMajBibounxIIz6jO0ydWKRUmGq3+L3jH
13uE55jDo10aDmGVnDBOw0V4Fj69d3ns4GjRveTY+ZYJzwhPAYyzMwx5y46V
c5Y63dbWx+chsYXOvyA8b+7turaiTryYv7vYkTVVI37nJ7m+1Bn5+oUY+2+n
1zH+uwhPU+vTsZqexGu/mBGTP3oQHttRdstW7o0XqT3jqlzyugrG/CRjYd/1
a8beoPwk4mWPap88XouKo9z77Zl/nPAMWfvkaJRNivC9l7955/DrhKdnaNRq
bb2LttvDn97x9CP/mZj4aaFmx+KkZc31sz/5k//M0Phhsfdm8WJJBYsyPY74
k/8sivwMM+Qhs/M/H6+td1Fr8jDbc7Yh5D9r91wTq613MXJPcI+TEx6SnzTz
73xwiFuAKDy49sU+xYIJT8DoX26Jr56Lefm6NND/KzxbTmTbp613keI5cVZ9
t/C/5hv2vlHB2noXmfKPL6Ktd8Lz+s1Us/WlYsWqY5aNtPVOeN5bbrt6sNI1
sWjZ2ycvfZ8Tni3tLS7O0XiZN8htuM6TwnNpuEuJSaWeiJ0Dzz0pUiDur3lF
7MmQL0W3PhL1F1xIKbz0d7xuvdfKvu/ZIHHRWlhp653wDC3efvk6n7NwZ0i9
H9p6/53nTBufNEGzm4atXF/rdqTwNOp6P/DXmIMw/ZnLfG29/zV/KD8rR7Hb
bX2h/tl5/2rrnfB0L9VqcrLLURjSv/JGbb0TnreLz+XR1jtUmVuof0qbUMJT
oceXqL3auirn2/Cmvs4UnjWrM9z9r2oIrPAPuK2t97/mCf4W/z7rNDgSCi7N
eVlb74QHMn4eEOvxDCo9urBbW++Ep9XVnT8qlwqDQRGZpuz8eo/w+BfP2l73
O11L3ZuzX/NDCk+lXp+6ausdXDM3OJk34dlf84GsmwNza+sd8n8NXF3k/AvC
U8OjfwttvcOnPm0Hr60aQXia2UZZaesdPM0rL/rgv4vwXK8eGqD7ZZ9JT/vO
0Py0wsPF9wsTEktq6xqe7N3W+uT84/S7vjjOIjnOb7+BecUC7D8o+SPkoZnk
gZ4f9PjhcM3PwNRZ+/JcMfEzNZGfdZIfkqv7MX+YyfsxVT/HGeX5M6SXZ8N7
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
G8dX+PfjPi5r3MdF9o913z6srxV+N9wPVg73gyn8xvvXyH8i//txf5TCb9xP
pfAb918p/MbxFf5g5H8O7u8y4nfCulXh34D8m+M+sd/9+fT3oCn8xn1TCr9x
n5XCb9yXpfAbx1f4K6L9j8V9Xwr/4/R9JMI/1rB/jPITw31kCn88+p9duJ9K
4Tfuv1L4jfu1FH7j+Ar/jfT+h/CH4fr9inWWwp+Q3v8QfuO9YAq/X/p9qoTf
uC9L4Tfu41L4jeMr/HXR/5fFfWIKfyGsX9B/Ev5a6P+b4n4zhd94P5fCXxDj
72zcf0X+x7BfS+E37u9S+I3jK/y5MP6Wwf1jCn95jF/hWBco/Km4D20P7kNT
+I33ZFGdhflPH9yXRfmDYR+Xwm/c96XwG8dX+Jth/vMC95Up/P0wfwjEfFvh
z4X5T0/cn6bw/8K8bgnmjer5Hl6wXI+LOVcsffFD07PxPWw2w/vWBZ2inupx
2in3VNe5mt1RvzrTiBp6nB45ed227JrdqflWnh9yUY/T247cvjhcszs13z/f
w+XkZXxevY82jq/y9oWIZyfiMb4nzWZ4H2qH882F81V8XsD9fqPxPILiZ/p/
lTrqcXdTf/shHTU7Uvyo96onDO+XHY7NXqnnAe/fX16l+UXixzWgQAc9D2ix
c3qDqZpdK3729e2fQ88Dpp1f9UPzi8TPn+/ncvIyPq/4MY5P+5kRzwfEo/gx
4lf8qPluxvlSvo3nCFbjOQLFT9YmiYdba3H9mrl7Xy3OED/OhveVip/GdYpa
6XlGwDc7V33dKH6uHgq9lknLM9o/qjRFi3vEz9CYTuKnlme8nWTbR4t7xM+f
7+1y8jI+r/gxjq/4MeJR/BjxK36y4Xx9cL6KnxXp998SPws/ZJ8etnSV95ur
ct+l4idf8YWL//R+s+SEBdPdktZ5t28v91EqfuztXAro9Zs4KfddKn5qvo3r
HRjh4B15RO7TVPz8+T4vJy/j84of4/iKn1KIpwPiUfwY8St+FuF83+J8FT/N
cR/1NDw3ofi5lC/4u56XHK2U39zUfozvARU/h4pt9/yp+Vl/s7HWpvZzs671
qCyan53836vspvZTtlCeSalanrSn15ZXISb28+d7vpy8jM8rfozjK34OI567
iOdv7zcv43yP4XwVP064H/4mntegeqrRRG89bqW6DW/awcT/GN/fKX7GOVzO
q8fRIklFQ2NM/M+pDGtD9Tys3bFc9lNM/M/DwqP36nG0/4m9LU39z5/v/3Ly
Mj6v+DGOr/gZj3iKIp6/vZdU8zU7KOer+DmF5xpu4jkRxc+aHsVO6nlJ8byZ
M3wziV/G926Kn3LdduTU86QdP4c1nGUSv5wfdRmq50kf4q9lzWoSv8rMy/5a
z/OSlq8uOMQkfv35XjAnL+Pzih/j+Iqf8ojHCfH87X3iWpxvCZyv4qc2nk+p
gOdTjPwUkM8LIz9FDe/vFD8bJB5h5CdJ4hdGfiLlfIWRn/T3hf3mRz1v5EeN
b+RnI+L523tAxU9BnK/i5zTajw+ei1H8dEZ7+yXXF/FjfM+l+JmA9lxY2jPx
44H231baP/HzGNfLP3K9ED9/vkfMycv4PJ0rNIyv+JmYfr3/9f2dbXp/Qvzs
RP9zA8/jKH6uoL86Iv3VX9+jHUN/eEf6Q+LnDvrPSdJ/Ej8V0N/ulv6W+Pnz
/WJOXsbnFT/G8WmfT/p48df3bt7p4xHx0wvj11Q8B6T4efHqvxkm8f2v77/C
Og6faRLfiZ/BQU6FTOIv8ROW6W1fk3hN/Pz53jEnL+Pzih/j+IqfZ4gH4/tf
35e9xPlifP/d38b8xw7PHyl+PjWW+dJNmS/99b1VeczHQmU+Rvwcxfyti8zf
iJ/OmO99lvke8fPn+8icvIzPK36M4yt+rBDPU8Tzt/dcnw3zVfx8wnNPm/Dc
k+JnPObb/8l8+6/vm5ZjPp8q83niZwvm/11k/k/87MB6wV7WC8TPn+8pc/Iy
Pq/4MY6v+FmBeMw+SDx/ez81AefrhvMl/4z110o8b6X46Yb1Wh1Zr/31PdFc
rAdvyHqQ+HmF9eMWWT/+9j9Yb96Q9Sbx8+d7zTT/Y3he8WMcX/EzD/H4Ip6/
vVfqjvOti/NV/PQ5dvDMS9/ncPSsz95Dla7Re5lKiHOhoY7esGjf3cJLX8GC
NRtfFNv6iPIQdV/GabwvQ+F8gHJPg/zZj5nj+xQLhg0F2/0c4hZAvzsJ7cfZ
UJ8+6ep7a/jxOFiUlKlObKUY+t3++H7zBd6vocbvi/Jwg/zn1z6Z7nj6Qb3F
q87p58bU717Fdf3EUPcVt145+axtCISnOO/Uz4Gp391juE9Bje+E8vwG+da6
Fxum+O8Sm05MrKbvr1e/O+HMsz/WUzHLyt0/OP+4qFFpt5W+j1797g38Dn8Q
fodfjR9p+D6/km9uEHDA6es94bTSvEGVUr/3H27FOCgMdYrd3F3nC59/IXbk
PNRBPzdAdYrh++1qfE5eosX2Qvr5isXngifp5y3U7zbE/KSxIf/fsyFipn5e
ovaRkOadB0fS7xq/+63G5+SXeh6J18+ZlMvTvruDz1n6XXvMGxsZ8urCZWd2
1M+N3Jk2+u2dtr70u8bvRavxOXmW/tYf9PM21SaMDnerdI3eny7E3+1iyFer
z3mQu8jSV6L9k7L59fM06neN3xlW43Py3FcTzfsWCxad7Ht0088hqd+tizw3
N+SBMYGWY/RzRHa7ry/SzxWp3zV+n1aNz8k71Bnn4e/pJ8Jqtxion8dSv8vl
V7/22lTxtA0R4xuVttHPV6nfNX7XVI3PyQuuDDv0wn8XFB6/tLF+Lk39Lpe3
vG1rHbVj/nEI2J6lrn7OTP2u8XuYanxOXjp0Rg79PN7F3OFu+vk89btcPnBj
RsWC+vm6gqkdvfTzdup3jd9RVONz8rDb2zbq5xIdi5eo8T7lEf0uF2fHHViX
dCw6AaKjH5jZDo6k3zV+f4++n8DIld++iH5bxbVHKD9pkOfHcSzxHIqSq/Mp
BQ1y5Z8j0D8r+QCUPzfIb+A53KF4DlfF000Yj6ZhPFLyvHju6c2XtHNPJJ+O
/IRKfkj+BM9PWRnO/05BnncY4tEnPIe7EM/hqnGCME7Nxzil5LkRzxfEo/Qy
C/EEIh4lz4e85TWc61H7GWwM+xmUvLVBvh/fX1wz7B94iOemP+C5aZUX9cN8
wA3zAapn8Zxac3lOjfxqNNrnSmmfJJ+O9nwEz6EoPU5A+QmDfCvGzQIYN5V8
P8rzGuSheM4uhzxn95t/XHeWct2RfAie18tiOE/tx/R7z+G55ul4rlmNUxHz
gReYDyh5IOLJjXiUHsMRTy7Eo+RTkYejhnM6e1Bf1w36cmf2UXRFvTRFvSh9
Kb2sQb0o+SQ8n34Vz6crebghH1PyX3hesrQ8L0n6rYf+8Iz0hyRvb7hnR+nL
wnBehvYtGPIWJT9nyHOUvCee96wrz3sS/z3bST//RPp5kj9mzq1redehP+Vd
nQ3nx9U4Kwz5mJK3Rjz1EA/1VQx4lLyRgR+l9/2Mfq2Z/ScZl0i9lEG9KH3V
RL2cR70o+VL8DkAsfgdAyc2/pc+HlXwjntu9Jc/t/s4bMf4WkvGX5NMwXofh
OR2lr8Xp4zjJb2Pe6Il5o5L7oPyyQR6E544byXPHxP/P9HnF730j6c8vk35X
Yn7iY8h7V+M5fYHn9NU4bTAf3oX5sJJHIJ4GiEfp9x3imYh4yM8b7g9Seu+Y
/v0+6Zfbt+OU/jw16asv6qUo6kXJT+D3Fr7j9xbIz2M9sgXrESWPw/Pji+X5
cdJvG8z3nsl87/e5D8wPx+O5IaWvFigfaZAnY96+EfN2JY9H+TaDfA6ef88u
z78T/wmYx3aVeSzJv+I5+gyG7zDUwXwYDHXHTvweQjJ+D0GNswvrkUZYj1D/
GfFkRjxKv1GIpxfiUXLuXBWnX26/UwTqZRnqRenL1qAXJc+M37U4i9+1UPL1
WA/uwnqQ9ifckd8xKCq/Y0D6zYn1ha2sL0jeFuuRMniOSelL1Sl5DXJ1Hqck
1k1Kruqp/gb5TPwOQzP5HQaTdS3rJmtZN5G8CH7PYZThexeq/upjqPvUdycO
jZTfnVDjFMR6MBHrQSWfhXjqIR6lX1XHdUY8Ss6d8+L0y+0T+4l6KYV6UfrK
m77uI/lY/H5IXfx+iJKrenwF1uNKboff0+gov6dB+lX1bG1Zz5Jc6TEnnqsy
6rGTQa54KI51q5J3QHlOgzwS9bJc6oX6ZoVQLxFSLySX+nwjfj6aGZtc/byX
0q+q92sa6m6lx0b4fQ/a54Z6bIz1OPl5xJNJfp+E6inVN/BBPErOnTvj9Mvt
r1N66YF6UfrKhnqpinpR8tr4nZYa+J0WJb+M/ZB62A+hPAGfby+fp7pS9U+K
yudJnoL+2QHPeSl9JaB8i0HeDP3eOOwbKHlLlI8wyJ3RD8dLP0z8u6AfbiD9
MMkL4nqfYvh+SyP0840MfY+56Lez4XdU1DiJ6LdtsR9C+74Qz2vEo/S7F/HU
RDxKzp2D4/TL7Uusg3rJgXpR+vJCvVRFvSi5+h5OF/wejpJboJ1UxH6Uko9G
/1BP+gfSb0n0D4ukfyC58dyZ0hcnN/Zt/iZfhXnXVZl3Ef/dMO9yknkXybnv
5HB9J+P3atQ4xn6UkhvxKP0a8Sg5dy6P0y+3n3Mc6qUW6kXpS+llGeqF6jKM
CyXwu0N0TgHjQgfsByp5xvT5AOl3G+YDO2Q+QHLjOTilL05u7Jv9Td4f6yxr
WWcR/5WWp6uzSM59j4jr+xm/C6TGMfYDldyIR+nXiEfJuXOCnH65fbAWqJdT
qBfaX4F6cUG9KHkM5oFL8ftOlM9jHvgU+7FKfhbz/68y/yf95q+X7n0EyY3n
8pS+OLmxb/k3uRv2VWbKvgrxnxP7KtGyr0Jy7rtPXN/V+P0l2tdn6McquRGP
0q8Rj5Jz5xY5/XL7hwPSfweP9LUT6zJH1IuSL8G6zx+/o6Xku1akq/tIPit9
vU/6jcP3X41lvU9y4zlBpS9Obuwb/02egv3SFbJfSvzfwX7patkv/b3vnfm+
Ftf3Nn7nSo1j7IcruREP7fcw4CH/z5yj5PTL7bseg3pJQL0ofX1GvTREvSj5
V+y/VcTvlSl5fuzzeOP7CCUfif29m7K/R/p9jP29XbK/R3LjuUWlL05+Bfvw
9rIPT3yuxz68g+zDk5z7Lhn3Hvwajj8Fx1f8G8dXcu7cJcf/UOTnLvKjeAtB
frYjP0reAfurPfH7bHSeC/urzvheRslvY189p39aX514tsO+uo/sq5P8Dj6f
C59X46j38mfxeSU33qdg/C69J34f1fhdevU9VeN36dX3V5W+1Hdc3+D34dW+
iH8KDl6gf89ols3Gvhlcj/7Pd8lu4nfJyH5Q/tkgV9+Lq3LP8XDXUrttlN4v
4vfiQvakfS/u9/nBj2PL6n3V1WNK771vUo+rcaJ+vUw3jtr/P96wb8H4HX76
Dif+rpX8Th3V7+p3Z+LvGr9Pq77zr+xN8fDY8H029d3aanhfgNqnMQD5rI18
Gr/b72T+NN13+xML+4/Xv/dUIDJkiuXYg7Q/0wa/11dSfq+P6ru19bdd0/t9
Wd63i99kUvcpPZaDtN/9fa7KcO+D0hcnV7z1xu/7Kb0cQt5OSt5IbrRb430E
1vjdYDWvVYi/jMRP66U5zvcCfp9QzWs1Pt8Cn1dy9T3DLsgP5Tn4/Jd3kh8l
/xfPUzvieWpl/wnIfyvJP8k5P2bkgb4TbuBT2Qkrx/PmD/C8ubKT/qjHk9J+
SK5wJkdIOzHeZ2HkX9nVQZyX4j//hay5ttVsAd8uh+458qAq3XOUtUTc1jun
ouFF5anuGa0e4f07sZwcxge2nVbbtzHsvWaxto72X41TOczuztdjL6G0o0Xt
79p/NQ4jh03Pbt84qOF4+epyPx2XGqd4trzPzLTf65XrzEf999U4jByGjF++
LNDc3nt8PdfnK+eHw6i0e0+SRA4n38WFC6zwdttSJKL+yFgaJ/mfH4PmnV/t
fShumIdfq0S8tyhSvHvsHWHXcJ335mETZq9JSMZ7i8LE+B75E2Ofrffevvl0
8rKjr/D5x6KmpdPeJg8cvB+4nqr17dhrlPuIP7+HMjNjngdmfGDwAIMfmPly
/ED/0S832ywIvzIj/7EWscta0n03e346Lv3a9LZIvDuk+LEZL4jPRjMO5tfs
QLQrUu2cqV6qFOxUbWTRALGie8tQi9bxxOfC2v0uRpcJEgEfT/iV8UwkPjNY
hYSsnBMsGt0TeV71SiY+f5x6NnJr8xDhf/ZDXf9WKcTng6wHukQtDBE+l3Yf
H78phfhkngdmfGDwAIMfmPly/IDtrSrHDz+oKpr7t65oYs+wfemx3N27BYux
txI8u3ULJj4bH7974duxl8LxxsaW30zWS2/XpB4XN0eKZ/cy5tT+E58TdrrO
PDE1WjR+5lZZ+098RoR1a1bJPUb0jTqeUNE9hvjsOnNmgGYHomiRCot1e1B8
Zm9ZePPuvbECGsY10/4Tn8zzwIwPDB5g8AMzX44faD3jVnXNv4jVFVY9qP3b
z8Cyqi87abwL70YtXb80vU18Dsk/OVDTk/jPO2x2BhM/9im1UKqmVxE+a9eM
EUUDiM8x63u/1exAPAlq9CaqTBDxecDmVTPNbsRD++WZNDsiPp8V2D5EszOR
mnXtmi3NQ4jPLZUvPtXsUhR8mXVy5MIQ4pN5HpjxgcEDDH5g5svxA4uf24Nm
l6LWk7kXDv32/7AE5dWknO63UuPvk+MLxScjhzaor1VSXzROE9T7Zql3GoeR
wz+4jprJdUTjAK7HtnI90jiMHC5c3rDUxB/S84wc+kx5ff6zxtf0lf/O0/lT
dmWBcaefjDs0ztDg5CvDNX0UPJlslV3Tj7KrJ/MLV9L1t7Lsz2JlPdV9uGGi
4dPaNVdo+l5+ssQYXf/Krtb92+iEo2YfvaY32qDbi7KriLMTNkVo9uS39Um2
CZp9KbtingdmfGDwAIMfmPly/MAMjOORMo7TvWwxOSsP1tfzimYTR+nrW/FZ
FPOB2jIfID57/Cx684LmLx6PD9ih+w/FZ3DJk2HHNf+ytvc2H93fKD7XJ1g4
6f6o7ZN363X/pPh0vhhQTfdfdo98KzcYGUt8Vqx6PtZV83f7O7WP1f2f4pN5
HpjxgcEDDH5g5svxA4Mxvzoh8yvi02liZNJRLd509oke/U2LP4rPDJinfZJ5
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
b6u2TxU5HYU8iuVGxpeBR3qAeaSWD/YEeKc7mXdq+WArwVPdwTxVywc7AF7r
eea1Wj7YG+DBNmEerOWDKeNJ0U+KPaTYr70v3QQ8UxlPi4Pwk/cxP9niMBF8
5k7MZ7Y4HAT/eSjzny0OA8GXjmG+tMXhcvCrezC/2uKgjCdFPyn2kGK/9r40
FeuwgNehxaEjeO/zmfducVgInvwu5slbHBqBV38n8+otDpd9wjz8bczDtzjs
A28/k3n7FgdlPCn6SbGHFPu196VF2NeZvK8tDoqczvdnP7mX/aQdr8jpFcSX
0xxf7HhFTlsG7zvVbEI+XfyhOHVct2/t/Wxp34XN/fv18fHLptaZ5v0f7nc2
ZeWs8O+hl2yJSz3fMI/kfqdnenZL/z771rX5v2+Kyie5xyk4d7qXfy+eV9j4
/kNT80nua17/eWKcfy+etf6eBQVj80nuZUY+uGmof/+6+vTNby1835DcFyi8
GqPJR34ctXty9GE6eXD4p1O8v3zffcCMgvwU5JshV3hQEfL7IVf4VBHy1ZAr
vKwI+THIFX4XufLHIVd4YhHyWMgVvpYqV3gmZhTuAXvzPSCdxTqpOzrQ5oni
XHpuYpNMn68qPEaFT2WSzkb3vzgkj0a+3SK2V7vjdDX4jQovy7T85K6yUbfm
028FwzpFty+lvuA9Kvwuk9xu+HuFyfk0K71nTKe0UsoJ4/yaxhOjpB7lE7YE
8uhgo8Vv+nzYzeBJKrws6jWt78vjJq2jlKJQmc9jFX7j8+sb3O3fh/2aekNr
/55WcOs55IFH/XvTV3qknfDwM2eA27G5iyv9++NRl44o8nAyycAnfU2Xp/17
yqd+GNAvGJVvooHD58frvePfd/7cLWVx4dR8MwXv22R67wX+fefKwJ5Q3th8
sxLvtfLCfa/593CPzYsZtuB9Y8R+5R7ZvA2+zQ7m29h73t07KtOfLM41u/+e
NtHnqwoPWbkHN2lrepzzeatnN3Tb5vNYhZ+s3Kebwmkr0h+5Nd80zBuyv2H7
UiO8ZeVe3lQOmpt4KDnf1A80Dt6VVmoqMb/K/T6FQsdafR/IM7MyP+vu82GF
56zcv9O50OD9Pm/1khaPrfN5rDK/Cm/ZKH7MZMwcd3D15uOU0GRD1rJdeST3
4Mo+1Xjamv+M8BvwD2ZYdPnLHi5085imdx9OlnPNa6T4Z1L8Eil8clL8fwTv
FP6QFL46KfElgqcKP0wKH56U+EWK/7d9a4vRtxZ1u1p8VPmurp/JBs6KvyLF
75HiP1V+qeJ/zGnUb76C+s1HlXrSk0o96an/W0/6RndlfEQ9aSnyKOW5pNhJ
ddBH9I6affXpg+LKMM/w2wFbwzzDNriX3wq/lMt+CfjsN8/D//yX/Q9dB/+T
Cz9zOfsZegB+xu23GYN9dwJ+5lL2M1RvBfsZV96I5aToJwP/M5v9D22C/1Hs
JOW9NBzoPPxVc/ZX1BDroQv6+RSgr2MK6tPvhPxHyOcAZ0UPSZ1CVCBcp2Dj
+18R117nuEYS186gfuEmrl8gqV8oQrwbw/GOJN5tn9O8u8+/+efQD69e6vnJ
TPjJwah3aMv1DiT1DmsQH6dxfCSJj40RBz/iOEiIg6Zp21uK/Tgxjk7MOejt
V8kHMhBPD3E8JYmn7vgC7GtlPCnPJcV+Uuy39Rq9uV6DpF5DwZMUPLX5ImW+
6ADqNZZxvYb1JyuQP0zg/MHy0ucjz6ngPMfmh1mYx3k8j0bmUclPTDPgPJpx
NoKzkueQUv9CSr5ESh0NKXkXKfU4pORvWt9LUvDRcCYFZ62Oxih5nZE+fveg
j5/Yo+Sl5OZRkico+RgpeR0p+aGWR5me8D+70GdM/E/xKI6DL3ActHlmIuLm
WI6bNp/8bS3H2ai94Thr88ZHEJfncVy2+aErl/dV9FAizgVFfC6weaNij2Y/
tUe8ns/x2uJQiH5NHdCvSXBQxtN3yH+e4/zHvAp8fkH+s4jzH3MOfvgR5F1b
OO8yVwG3T5F3ZXDeZVLgh9ciX03ifNVswv69BnlgIueBpg9w7oI8cADngeYP
8MOpyFdPcr5q3sF+H4i8tB/npUb8cA7y0krOS81M+GF3/BbMlzKelOeSYj8p
9tNh1EW2TAvXRZqvMe8KnqTgqc0XufOFczTtxPmiD58vzOVYJyNwvtjL5wu7
3zciX22+M5yvmnT4YUWu6SdFv5YnR5wvSjGPSh2ZUeqhIvy/rAeFR22U+lOj
1IEapY5VqyfVfkcipT5Xq1eNqPNFHSiVgT+chDrTVcwf1n5XoU/GLG896drd
ZvnwT3fHXHlU+jUZpR7EdHq37ZxhG/aYL7qbtn7d3D7081HqaCL0d0Rdm1On
aetwlfoLcyPqN7dy/SbOgwWaXNNPd6B+dinXzwpuJg71s/dw/SxJ/axSN2F+
RH3rLq5vRb3GXk1Oin7NHq1O1uQ6dbXyXKX+V6sX1upetTpZo9TVanWvEb/z
nMJ6UPjtEfx/Gd8L6/8XXv+2nlf45Engk2fC/k7Yd4/zvrP2d3bkDbBOFP30
JfbXT7y/TCbWyWfYp/14n9o6a4UfbnrCPyxl/2A6Y75cuawTV389zOPnsGc/
7JF5VH7/obo45/6l5vcyIr4LE4c6bqXuldx8W+RK/YtW72+U3z8jfjcoVX43
KMHvBoqcRqAf1BPoB/UY+PPKudgo47XzUUSff6l/d8+Vgo9SF2/c3wlF7uaB
InfzhG8gd/tbdoA9bn4VhD0u3176Md7com5la8+Pl8fOi39owx7bL9EdL33Y
prfI+Nj34ycrRoc8v277++WNnHxv9OJDtP6B6P+07ZhN+ajDcvnq8ty4pi/G
H6k4TOP2P9P1qPdXnuuOl+deMiLn3v2rC2nqFYP+eMD7K891+c+i35WLHpdP
KOO3jU4e6MUz0/WarWuHevFN7HHHi56Z760r83Aw47P2TJroxTex59IXJsz3
cDBXjU77/IaO2UZwcPl4Vf0wZ5V4OJim/35uuf9XnuuOl+f2jcvZ7uFgYnsP
WuT/lee6vDXR78pFj8TlZYjL0n+vM+L7l4jv0q+vT83n2vFifzO2346vDxxa
Mw42T5sB3CYyblaP4E+Mv9VTNpznfTbPu+1nGIv1M4XXj+0rmI11uI3XodQD
mslYt9GV4XVbpQfr/6rrw+vf6tHyzJmQL4Bc5rfi6KCb/Pf8LabkPf/5Mt71
t/b7Sm9Oj9+2MY/2tLhQ0PLd47YPp+j5HXpEv/K7pTGPHg0dKpn/1R+7NSqZ
E/dL1XMd/r+shxHf1H+m2veX7b6rN6bNldW+j2z7oHY48/iQat9Ttn1NKy/7
8Olq30G2+zET9lwBe8T+oQVZ/f35KD9bOrY6PgvNoguhjXnmz6ENc30c5Lkf
PbXt7LO3zP4qYWf4u+5V3w+CngroEf3dcd4/4Hz3R+pDk1FvK+O351xYlV6U
a2b/bV6C99eOz61Zn2v3byKeW8bPtevqddjfju23/TBH1nxfqyf16SVZ1ebL
6nkJcuBmxx/FeqjTKrwe7PhrsX728fqx/U6LML4uxouekvX16/rveSpxRkX4
vfG+e7Bf1sFvi/5p2C8n4Odlv7j3R7Kek2KbJPjzt/nBZj9u9+wSHP6E/VWB
+CL7axfOfSXOd/0uDq/p5+W57Zx4IXrK8V5H+L2sHiX/iajXkH2hnIMi6hdk
/E7H78k+Ev98Pfyk6HF5/qJnK/xeD/g90dP/qYfW+PMa3e6SG731ZffFs/Cf
k+A/RX8Dx9/KvIu8FeKRzK/oeRLxS3B2+/zI/MbDngZsj13nIdjfDXFT5mUI
fie81/neh+DTBvFLnpvjxEHRs6PmPrV67qu5363c5SELzi7/VuRtnDhi4y/W
YQrijuDs8lStHqzzVogjomcy9sVB3hd2n05x4pHoz8F+DCF+yTy6+078sHvP
K/rvS4i94rZnjtCAQWsbdfD+ynjpezMIfW/EzpboP9MY/WfEngr4+VPw8zJf
iYgjfRFHZL5q72saCNbenzMQfHFwuwzPTrMoYdUY3177vfVa+08Ggu53fuV9
U6FnIeup+i5Srf0GA8Ha++Z5+oHbw4ybXf+194ULBLXfr2rnAweCv8JfHYa/
kvG182YDQXcexR533mU/1s4vDQRr5zEGglnYX8nYX2JP7Xy/QNDFWeypnRcX
CLpxQebLzX+0fEP0u/mJvO8q5AkPIk8Q+937VlkPbr4hety4IHmy+108sdNd
t6LfjRdWD/zVT87379xzpbyv6//FTjeOiH6ZxxTkM6Lf9dtifwL8cz/nu11u
PiPj3XxD7HH9rdjj7iPBx/XDMv4Y7im6Ot+VcM+5go/rV8Ue1z+L/lLsu9PI
f0T//wBJklIk
       "], {{
         {RGBColor[0, 0, 1], EdgeForm[None], 
          GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJxFnXn8F9P3x9+fmXm/Z03WZC9ryJJ9KRSyZkv2NVuRnUi2SMi+r1FRsm+F
bInsCW1kLVokQmRL/F7PXvf7+P0xnzmfO3fuzHvmzr3nvM7rnNu6++kHnBbV
arVni1ot1v6WRq22Ul6rTW2q1ZaSvH1aq20ruYP2u2a12iuq/JYqPqL9qiqv
VGc7HdtG8rJqYy+du4/a2VX/b6XtCMn/qn5nybto+03yGJ3bQfI4yQ9LXoXy
eq22gdpZTXJ77XfUtV7WsV9U51Xt26v8dV3rOJWvrf/HqnyE9iur/Etd8yNt
m+ha3VTnXJ1/rcpX0r6h+veq3nSOa9tUdZqpfIG2m1Reaf+9thslv6d7KCX/
oDpvSS44Jrmtzvs4nDtU7TdXmz+r/amqs5zq/K3yiZKXlfyn5K8lt5BcV535
kteU3ELy8jp3Z8k7Sf5d9/+arrmD5IvUdmc9u2d17oeSx2lrJXl97d/S1lpy
X+13Vp2nJZ+sdq5WOw/q3Cu1f1P306T2BkgeK5kXeXOi+9f+adVpp/JNVf6M
rnepzv2WZ6vyC9XmLmrzGd676nym8krnLKs6nXgHqrOp9huo/Gmd+5WOjdJ+
I5XHqrOVjm0suS55a8mbSH5R8j6qv6LqbaH/19HWRe3P1rlbSt5c2zOqs63q
FKrzu57Phjp3dZV/oTojVdZW8jTJz0reUPJ/qrOJ6rSR/I/uuYO2HdXmYpVv
rPL1VP6z5LUkryh5be1XUPvDdf46kleR/JDkxXom/bWfq3Pfl3yF5HmSJ0ge
IPlHyWPVzmLd3xzJ9+g662pbVnKkdiLJV6re+6qT6P9fVf6trrdI+6V47Lxz
1blKdV5Sm/+p7B9tH6h+XccWSv5c8j+Sm3Teg6q7nrZVVb679s30LvaU3D92
f6QfXhm7n87nGjrvZ2036//m2v+m7RbJt0fud6vU3C8Xa7+atst17g2R+/Az
kpfmm9b2ve5hGT2TZfmmJOdq5zvV+VLyCpITlQ9W/Xt0bkPy/ZLvjtyfr9H+
D9Wt+BZif1upylfmPLU5SP+vK3mlzN/nfqo4S9u6+v9btb+ajpWqv6/KvtW2
msrP0rO6U2W3a+uuZz9aZXdLfkTy2pIXS16L70fbDrruEL5byRtI3lttfMPN
qN4stb966mMTdG9ra7+mtsf1bDfStl3NbTXX1lbye6rTWvIa2rbT8YXatlf5
N2pnVbVTqDxjDMzcl1dRWSb5Pl1/kepspP/XVfmNuv9cbT0leTO+icx9t7Pa
y/ROd1eb20j+Wdu2knfTPlf5HpK3lbwg3FuTrrVl6u9rc+03y/w9jNe1luZ9
q84Nulamaz2pOpfqvLN0zvM1j7UrRR5v+S5Gqnzfmu+vWeQxOVXZS9oOkbw1
70zlR9Y8hr+s7SjJc9T2Urw3ye2a/B0fyrik8ibJHWueF17RdrTkXXSPYyQf
K3kHya9KPqbmMWG0toNr/jYfb/jc5VXnCcYXrqXyhxt+JhupfE39vwvXlbyW
5F0lr9DEx+fvnff/X+gDc3X80Yaf2xN6DlcXfncTdZ+x6u8s+SPJUeRrMQ4/
pvo7Sf5bcqu621xZ13qy4fr0gQMqj0ubqPx5lR/AOCz5Ocn71zzWz2jyN8t3
MYe+WfP38h1jT83f4vQmf48jdF6p8xfp/3l6h3fo/xbhG/9MZStIvlNlv6c+
Z6729zXczk+Sc93niuFbnsY3EMaEz5vczvd815Hvk+93OeYbycP0W44vPA50
0vXXV3nXmsfSUQ2/3+90bvPIv4vxdtnIdTqr/gaqd6DkF+iT+n+FMP4vr323
mseYmU1un/HvmyaPgV8wD9Y9ZzGeLxe5nQ1Vtnvm//+U/GzD/Z/5oYo8R+Qq
W6/uvjpO+38bHqtreg6zU4/Xd6vs79TjLmPzm2F8PkS/9Q3Jy0i+TNedyT1p
G63vZZLqfqztutjj9y8qP1/t3Kp2Rqq8j+TbJI+S/I6u+1/D80ITukDquYFx
euXK7/1mlU3VbynV3hkqv03nPaDyC1T+mMoXqn5fyU9J/l3y8Wqvn/4fxPim
+/lNZTdIPkbyr5Kvl3y05AWSr5N8mOpfyDgveaDKH9b+IW0n6PgdzBu61pmq
M0HtP6r/D5d8EXOB5L9U51bth6rOZP2WVOV/8S1IbqQeu2/TfV8deT4arOe2
MLzXR3St5SW/rvNHSF5O8ljGIp17g7YTap6vn254THtK+1a6hyzohCljnspb
NfkbYi67T9ecS/+JrbPVI3/ja6udzVXeiKwHsud7v1JtDkanYd7Rfp7qtNDx
h3Q/y6IzqfwOPfMDdd8fqv5Vqj9E9d5S+Z0q76byj1R+U+x5mDn6LpUfpPKP
JZ+t+tep/hOqf4PkX9X+B8xrqrOf6rxO/1H5XaozRuUjdd33tX9X2/Wqs4P6
wFuqM1ByF9UfK/lqyXtLfg1dQr+r0rZykJdRO79LbqF2DlYb3YKefFfhMXgT
1bm27rF3LbX9sLZS199YZdfUPT6vrbJHtDVT+b06b2745nfVfjXtt1M7nSWv
Lnl7yTtLXiWyTn6f6v8Uvu37JS8I3+Ru2q8R9OpBKv9B/y/Du9F+1cg6/47h
PHQw3jG6Oe99Hd3X5dp2Y/zRb7+0sB7+u+TTSs+pjOsL6x7by8h9gv7AmP1H
3eN2rPNuLtx+XftbCut+eWR9kPHhVLW3auk5+l3dzx2R5a1DX+K6y+i8OwvP
gX/rHtrnniO+TqyH/St5uMo+0La65Ht17mUYPar/KHNo4fHsHt3btLq/8QN0
zUbpOrNr1tcYW1bW8Qu0tZN8jM7bVe/lKx27V+d+FcbeGbrm9HBdrhXp+NKS
l1b9kaX14C3DPNVScsvIcy3zbFu1cbW2g2oec9GvmUNb6zojtCW6Tqp2bi2s
J7SIrHczpxeM92p/U/2/rdp/PLLMWNsI4+1WKk9UvlKos5n2ezGn69zVS+vn
26n8icjyD3o+lxW20eZL7l/Y7vtO8sWF2zk9t701Qu0crOv0Tj2OHSr5vNTj
G/rcNYxjqtOH7y/zONgr8RjJWNdR9U/SsbMZDyVfknpsPV/7EZnHyu9VPj7z
WHiazv0j8rh3veTH0Bm1Hak6F6ceB3smHo9vQm+QPEPymczZ6Eeqsz/zFt+4
yvdlPlP5birfEx1RclfJh0veSM/+OP3Ok3T/G6AXqPwwlZ+Efabn0Ffl7Xnv
aucMvh3VOVF1zpL8nuTzdc/tdGxN1W2l7QLV31j1e+j4idp6S75H+7u0fYNO
p/qHoIdJPlvt9Ff59kE3w95poz4yoG4d7yvdw8bB/t1MdR6Igt6rc/+tW+/a
IXzfG6i8Sde/qbD8B/Nn6fp/SR5RWm9uH3QDbK4OYbxZH/1LdW4sLPOtXVt4
DmfeviLM3dho1xXWPXfXPZys+7+Q71/yKZIvkvyZ5KH6jXup3VNVf33GRO5f
+zZ8z5JnN9kWQZc4WM//V2236JxT1cZd2s9lnFDZQ9r+4dpq8ywdu7zJ8yR9
BJv6et3/l/p/geSpes5TEs8Lj+i6G2jbUPJKOr9P3TZ+Xc9gf23Xovtio1Ue
hw+UvFzh73ElXWtXXWt39BDJJ+h+DmJsV9sHan+AtoNUv2Xh77qb5OULf6d7
Jr73ixkX0ItT4wAboZtLPppztT9VbU5WvYMlnyl5CuO2zp0T+XnuqPLdMuMp
6O0vhTG/Dbqqjh0qeUXV/zhyX20peWLk/vxk7r5Lv41U/o7K9+L9qp23JO/B
ueiJmbEcdMWXw7xQoLOnnr/QP18Jc1Bz9OvU2M4O2u+cGbtZGR0M24R5SnV6
6lhf9ByVX6n9Fdo+1fFjtT8XnVP31UPbFfRb9CeVnyd5a517pM49mXlT536h
Y6dIPg4dLfO31151jk/9DYJFoVPSJzupfm+VnaNtM8lf0e8kd1fdy3Tu14yV
Kv+SMUnlXXXegyq/WvIukm+QfL7kbyN/0/35flV+qM4/Rv+fhm6vOt/r+O5q
57vI/fx0ld+j8nmRv+cBKrtN545lrsytN86P3Gdvkfyqyk7RdqvkDvSr1OMV
38m52g9Q+d4qP5P7plzyGZL7MadIvkDXOklyTffwduRxbAPJJ/CctMVNtvtb
hXHjnMJ21Qnq730K2/vgaZ0r1+uu8mXYJI/Uu74usvy56hxbGlMAW+td2FYb
pHuYXrdNNET15zYZH+Dc5bRfo2bb65Jgf20RbDRwm+PU3nmFcQawkeMK6663
q87XTdajZqv8wsLzJjbOCYXtj6GSh+iez1S70/R7P02s394ce37Gdh6hOg+q
znmqc5fuc0rdNtrDKj+9sN3GmHBGYTvvAcndC+vMzVX3E23NsK107k+SN5O8
ebCLwfceVPmPQTdYpfDYwbixiso7p/6mVtfxi7RtU/N4sZu2UyQfj26ic3pI
7g4mJPlEyWvo3C6p5ybmn9UKz0GP8X0Uxjr21PFD9N7fZTxU/b31/z70De2P
UPl7kTGQK1W/mcqHqM7suvGTx3X/PzYZkzmG91kaI3o69viH/IDqf1f3ONla
+0vrtqOxuwcWxlNmhb5FvzpFbVyi8pz5V/JFkjPmAj37foVxlYfU/rwm13lE
8g9NLn9Q8vdNrn+Szu1buP/srt9yYOY+Xer6C1O/16Ghj62j605krqU/Su4X
W2+fKHkPtZPp2g2V7aL9G9quw+ZW202S+6rNv9Rf3tA2TucsVPm/OueCyO0s
HVv//1HHXwn25O46/qzkuo79qf3rnM98qnMTtXmhzp3LuKqyr9H/9axuavje
vq0ZX0cF3VPtFJWv8Yfqj01sf/1Kv9Ox81Up1fGD9f849G0df1nbBOYYlV2H
DazyH1Q2L5Rfr+vc2PB1W+r4zQ1f6zf6Nd+5/nlV9T7SNrnGhOffNZlvTPvX
Ett93zGGaP+Vqmyve3hFW2/mc+a4oLOdKrlb0MEOAufR9hR9QL/niGDPfqFz
DtJ2N3q1jj8C7iN5n8h6I/P+sWpn/2AXnyN5VmRdqJfaOTLYyPtzXt165pfM
ldrukbyz7ut1bddwb6r/czj3nKBT3cEzB5dqeLzdTnVf1naO/u+r+r0j42ln
qv7MyDjk8ZF1T7DxGWBjDdvUxwX7Ghx+Cz3Py0pjl+i26LjoLYfoHp+sG5fr
p+O7lG7zxGC/o5PM07mDdL3Tmd9Ud7S2CSq/SP8/12Tbdo/YukRPyWuqjQ+0
jcZe1r2sr+1U9CX93zXMj+ioT2lbu+Fz34ish+wpeVxk25N5/2nVuUPXe0b3
cAb2iI49pfJnVH4ntit6Sm4scb3IekQvyeOxw3TscMlv6hobajtN8nOqO0rn
3gPuqONnqd7WOm9V/b4NtT9S549S+dkq3wbbQ+UbBH3gOZWfo/Jt9f/zYKJq
ZzvJrZlzVO8FytX+6ML6AX6qM3VsK5W/q+u3a1hnWEd1N448F6M/vKh63SWv
y7wbxlh0y49Tz+kXNHl/tcovjv1NPKP/L4n93T8ruUvk98o7/Q6bS9foxbwe
+7vEtzIHXVrlp6CTqfy8yDhwB/2OVxkH0D9Up7Pu+QWVX8zvaTJGMVfld+jc
U7FrJN8tGWfcr9gvDWMLXVX+c2EsYie1N0bb5dgoau9B1V+k+n103Rd1/A3V
vyD2OPeS/j9Cxwdqf5XK9y9c/xXGVe27BpvoUu1HNxkbYTz5qfDYsFB1xiTG
W/ZU2SV6ps+pTkdd/zVtVzR8XcY/fteJevcvaZvCnKXz2qrdo9B/dPyYcK1T
JR8VvvFfJR+Q2wd2j37LStruj6xP7ptbpwT/3jk3Bv6ojnfM7cN6RPJOuX1S
gyVvltvXg89hi9x+B/ThLrl14iHYtbl9QPdLbid5mOR7Ja+sbbDkh7XfUeVP
8f74ZnP7uu6W3LI05n99ZXx4a/B9lW2f235G5z8497f6vMr3wFcn+VrJZWl/
zQ3aV6X9NTdr30zbrYxT2q9Y2m+Cjr1Pbj0bv2WL0v6V25iTtd0meXbmMfxR
XfMW3cs6ejc7o6vyTeT2y2Lz3VDYdluV9uqeo1bjudY9162BvqHtb8mrgG1q
+01ya+1baVsk+bDC+Cq+sEMDvsrc9VSwYfmurtB1jyyMRz9d2BZmvOiv8kWF
cZYPS48LjAndsFf0f6L2Tyzs6wRfuaO03YXOcap+zwwdG05flfyZ5PvRISuP
D++n/j7mF+67D+k3TSysDw9iLpPcE11C8vuFbY2r1PZRkr+gzcJ+VXxe16j8
6ML24U2Sjy2sa15fGt9Bx7hO19xfWxvde//KuvET4PSqs2FuvXZLxqXc+MYe
fLOl8Qi+nW+1PS55bsO/jbnjDP3OYU3GDI8ED9c2hrmJZ6ltsI5treu8pO0E
nXM0uH3d2OPZ6ic9df59zHGST478fGY1/LweUZ1zY49JtLOX2ptZGPM8K/aY
AU6ytco+LYxLc/+faLuXuU/v5gDVuRGdUNd8TtvbanM38K7S556t4yOajJfO
0zVPb3iuPDM2Xj2SPoMuoO0FyiO/z7Ghzt+RMe2rda2fgtye96NtiOTescda
5E68k8L+7sGVMbcRqfXoywvrrmBy5xbGC36VPFz3+TY4t+ruo21FvbtrtV+U
2/9zleQu2pZT+RXaf63yeXXjvdfm1h0vV/lnuX1NnVXeU3IflfdT+W7Mtdh8
leeIAxvWZcDC0GfQHfAN8Ezwqd+r88ej8+u+DgZjYa6IPfYPZWynr2l7QPIO
9MfC5aepztHhXYD308fA/O/WdQ+hf6jszsp6xbG6hwVq++Lc88Esyb1yzwG3
q84mavMAsG3JW0k+DvwbP6d+X0t0DN3jRpHxh7aq86S2NRvG9GY2rLOdl1iv
o4+B780K/Y3fe3Bk/QrMakbQl9CVDoosT1fZfZn/51kdHlmXOz+xjvdozff3
bdDT8Gvsq3sbIvl1/Y4phX0f+FMOCDokXIiDgs4JZjg3fF/gfsw7j9eMMR4r
+Ql0TvwXmfXX17TvWnedxyXP0bmPMYcmnqeQH1L57IbvDbyxO7oi+oDKns2s
Dx4UdODBKh9H23Vfqxvfa+ZrHxh05vtrfu77Bz2WvnNY5HEDO3Fc0OvAbdpE
1q+2Vd2zMr8bsJ2t6q4D9oR+hm72msr3xIcamVvSGr2yZvsSHQj9Z6mgI50t
uVOTeTTYm930nueDcWXmqIxt2PakTx0a+ZmDdWyn655Tsx62SWS961BsMjAI
yXmY98+sGafqxHuuGf9B36NOV9V/i/GiZjxq/cgyuOubQZ+sQj88S/I7jH2Z
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
XP7kccRHCd+HmLRTgkwMEhwhOEHEC8ELIm4MzjR4MpxZuLNwZuG9wjXne/yy
cj2+RbB6uPJ8s/AX0CnR34iz4VxsVWLI4M3Dh/+q8v9869QnBhWdFl86nHj4
ANwPMXL0z68rxwkyHlCHmC587nBv4eAS2/Nt6RgbOOzflI5H4pmDwYDF8MzB
fsCAeObfleZigqOCzYDRwDEZXdonTr7GnyrrjUdhJ5T2p5PTcW5pTiHjHrga
HFPGxh9Lc0bBAGZI3rH0eyTOgDgl3i9cG2LZDlCdmdp3Kh1T9FvmfGUvJP6t
xADg+wBvA3cDe52juufk5mu8VNrXjzPp08qcPebtzytz3tBZiBUgZoAYcfj+
8P6JCwfLBNMkHmWy5EWlY85+q6xfgWfgfxtQ2Ac3E10stw39F+8dP2lmPBVs
k9iUGZL3quxDO4I43cq5xo+pnN8bPQX/IX5E8qAfK3n5yuuBHMncWzlHOM+H
XK7wkY5WWcvK+bbJz3Nzbh7OLyo7qHJcwhztG/i28U1JnpE798A7XDN3Lvz3
mJtyx/2/LXli7tj95yR/XToucFplDiTzNjYHtgcxauMkX1k6xzxjFfmpx+py
96p8WGL+L1wJ+BbHqvxHONiVeQoTtH+tdOw+/lL8puSMHwqPtDT/65PKfM6H
w7zKeiTwqxn7eddwd8ljSp5w/Jv4UYlVxu+AHx4ON/4XcjfBbSA3PzmX4CSw
tgD5nfD7k7+f3KLkxCa/aAVWWTl/MWuMkP+YfMcvpF6bgXUZyPFJrmzyPz8b
/ETElsEXgJ8AZ4B8RGBT5IYnLxOYAHkOZlfmD7TNnPMH3IDc4eSMwpYn/wH2
NLY2NvU1wfYnlzzr3pCrG18P6zaQtxmfEWvmkKsbX9Kzkv+qe/2KF1Ov64A/
av3UObTBcFhHgly+5MsdnXoNCXy5rHlCLid4INwf67jAO/tF9zKwcn7tNTOv
k8G6Fr+p/JrK+bXHpM4Pi7+9Y+b1e+A0vZo6Nyv+9g6Z19qB09SqctzE17Fz
VcFhIL8F63eQW5j7H6W666XGsaZX5noxD5A3CW4DeeXvCxgUHMMfKvu40X/h
+MP1x/f0fPDXE8M6r/KxPbCdK+d8Q+9m7MJ3QC4WysBJwUUZD7HlyRmDLx1u
B/44ZHLZ0/fw8xOXgh8cGc5H+9An4ffA7fm+cs5zns3cyjnVeR70VfKk43/n
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
nud6BQ==
             "]], Polygon3DBox[CompressedData["
1:eJwtnQf4V+Mbxs93nO+ZCSVRJCOkZG/KlhVJspK0rMiKJHtURkaojCgrs4jI
XyVRSENEipSRkSKEjP/9+d3nunqv3/u885zzPed9n+d+7uetefcLOvYtB0Fw
cS0Iqvp7QhYEC/MguCgMgi0rQfBdHAQPRUEwvRQEz6jBD5IflvyW5Ockn6/8
cJUdrfzVKpupvk00xiMatJnqTlX+E5VdqvFaaLyfJf8h+XP1eUR9vlGbQGml
/tyo+luVX6q6MaoLJW+Wah6lrTReb7WZpb47JUEwVnJzte2mNFDtd+ZaNP8S
5f/QvXygtqNVdo7m+0x9rtT8O2q8L1X/i+onlTzHRI09V202V/50lZ2idh+p
zXDJ52mON9X2TMkbSO6o+ljtD9P8r6huR8mz1fd9pVM136sq21L5D5Q2UvsT
Vb+5+m6mMfdU/XTN/76u5Tj1f0NtD1bd7xp/nv7erfaXqyxR21W6p6Fqu1j9
71P+KrWZo/71Vfaw8j+r7Fblv1f96ZrrU415mfptq7IGur5OGv9NjdVW9S9J
nqM2TTT+aZJHqu8NGuNjjbeB2p8n+U7N3171g1Rf01jrlAarzQSV/ay6v5Sf
pbqJkv/TWH+q/vvYv//6mqu+0icar4HG21D5DZQ+ldxQ8t3KL1D7FWr/nsre
U/4glb3I81PZaM1/s8Z/QWNtrPadJPdW+SbF9Z4o+VzJTYvfZ7b6H6/+U9T/
cJWvVv16SqsDP7PVqttL6RnVb6b2ZbX/S+ksPZ/ZatNO179MqZPGe1jyIOWX
qv4x1fdS/3eV31P9n1b/7TXuPSp/S3/flXyR2j+pOS+XfIfGPktj3K366ZJn
qb6f6r/RvTwRu66ryk7XWCdK7qw0U/ISzfe50hzlr1D7Dqr/XnMeqPr/qexm
jfdq5OdzAt+j5Kmqu0rjnaGyA9X+G7VvpbIJkldpvjeVH1S8r7eo/Wvq/5Ly
ndR/hH7/DZWOVb6eym5X/ZTIz+8slfVSvq3GaKf+y1R2E9eusgt0f3uprK3a
3xg7v7fq79dYGygdo7655DtUd4j691f7Q9Xmc+XvUtlRyh+v+pZquyb3e8b7
NVzjHaP8+6q7RGPsK/n22H15JmPVflOl01S3ieTbVDdfY16ivgerTT3VHaFn
sLHqdlbZ0xr7UZW1U76B2v2k9Lr6XKm256rNq8p3V9kI1V+qsls1396a/zXV
ddUct0l+I/L32F3yJcq/rD4Xq+0qlbVX/aTYfb+W/AJj881ovD4qe07yFZKH
Se4l+Ri1fz523Qlq/4zyA4r6nio7WvVPx853VP23urZnY/fl9z1W9/ad7ml/
lb0ueaXelV8ln61216vN2yo/kTkCy9Ml36jxHyn5Hfif5Bskjy75GbTVeP+q
fRuVvcDvq3xr5Z9XvoPGaKtnN0N9blbZo+ozTnONUtneytfTnJ14/1V/jcbq
pj5PqX6k6vdSfab6Huq3n/7uq/ovVT9Y7XfnGSrfWePP5BtV/RTlb1GbIao7
r+Z8Rd/bHWp/oMqmqX1PtblZ7dup7LrAY/6m699HKVX9FprzIj2PFyVfrfo9
Vba5rqWH5J35XtijdH2Pq6y98ptqnn5qP0H1g9R+D34/1T+fuu3Wqr9Q9eNV
f5Xqd1f9eNW/oPourL26jseUb6J0uuo3Vf2zqn9C8pGqb8reoGu/Rte8m661
r8omqH686k9W/n5+p9z71/GSt1T75yS/rjlLfB/qd5LaLNPfxySv0/iruTal
tzXfpZJvVNsv1efryPvjVOV/Uf00jXejxmusfGdd/9Zqe5DKZqn9TKUe6t9c
ZT+qX0lpleTB6v+Q+nwn+Rb2drXfkfUv87fFN7ZK43XkneBbUP/pqnsz87fR
jD2F61E6Xu0fUtnbys/IvJZsofrlvCuaY3LJ99RSc/2qe5xZ8Zr6pK7/Xo3f
RvVVtftMfRcrTVfd2RqjD++yxjhVfb8qe93+imdc8fr9qOoWqd+NJbcZK/kE
3if2Qsm3aey/9Tzaqm2g/oeq/71qc4zqDuX9VP4T1qjAa14rjb2XypZr/GdV
f6v6/6X+B6j+P415l/ofqjYzVHe+yg6SPCb2XItU9pDySzXeI6rrorL7JPeN
rAsx5xe6t5dzr2M8471Zt9V+p5LnZG0bqrIDi+d/ofoepbITJP+o8Q/TfCNV
f5zkwySPUv4CnkfJZXO5d5W1Vf56XcMTmut23cO2qv+bb1F1k2r+Fpdqvgck
H67yOwPP8YXq7lfZscV6tIP6joit13EP85Ufpvz4knWUndC1JLeU/LHGG6v7
+0pz/hxavzlVfz9Vm/vRxzTexpKXK2Vqv1LpN9Z+yb9q/s9L1u/O0vO+LPA3
kqvuA6XfJX9R8u95EToJ+qPkLon3h8OV76z0uvLnqn431iLJdyifp94bIpXd
o/ku199R7B26vpMTf89HqP48zbGhxl2sVJH8dcm/5QSecdW/aQPVLVGqqu6b
ktcn1rsLld9H9zda+VRlz2vs7Xk/JdeTPF7yeqxBej4PKL0geS/VN9X19VLK
Ypftj26oPueo7W4abz/Je0g+W/Ku6INqt0xlqeQflV7TtZ+j/ruoTXfJ90i+
WHJJcuuS9/tLJKeS92QP19z/0z1fxPuG/qCx9mddlLwv+6Pan41OzVqmskvU
9lv16a/7H6frnaG6RPIwtf1ez3Kt2i3UNd2r+itUNgndV33eVv4/9Enlv1ZZ
V74F9T9H8zVT2V+SF0vuLbmJ5F+r1kH5Fh9kHaz6mzxefR9X/ebK36ox99D8
/XJ/Z3xfB/G+Zc7z+7AWjFbdyVWvCUOwF9R/X9X9K7mh5BMT2w7oCEcl1od4
NqzpL2ms9STvKnl3dATVr1DZ5RrvadUnvGsq6xJ4zRqma9lP8m48P817ru6n
ueR1ar9EbZbpeiaqvJ/ke9XmyMT60h7oR0p3qv/GqdfqRqx/ansaOkjgd/RU
dB+1eUtl36msu+SukudKXiv5rtxjMtZx6vs2v7Wu9049q1/0+2yi/Cil5yq2
OfbB7tE83Vjr1WYr9R0i+R3JKzTf1pJvlTxT8neShyl/u9K7fPtKTyrfTPO8
U7y/U7hWvmnlvy72d/bzx1i72D81d5T6XZzIfKxFSpeX/E5vzfurOa8M/M7v
kXgNmV5c748aq5fSQ7THnlL9NM33rere0fWtJ/mmmve/qZJXKt9H6WHJ56j9
b+ii2BOS+5dtD14p+WXJV0lep/zVSq9Kvkbyr8pfqvS85Mskr+HbVnpS8sWS
d9F8o3V9k3R9u+oaflZdX6XHVd9P9b/HtqemSp6i63lH93cB+rzKLuYbVv9H
1P819d9N/f+s2Z57BX1N/b9R/S1q30DjvKo2B7PfqH6A6tup/m2N1ze3js43
PEXyeZL3lnyu5I019gilp9R3d43/DM9a9c1U34Hnq/G2q1kf2VbjnYvtmfja
blT7CvaF0jfKLyxZ3+mv/pvUvEaOlnyp5PUlH8CerbZvKq3g20Uf03W3Vt0Z
yrfW+Ltjh9asP7Uo9PnL1L9xzWt2orlnq81v9NfziiS/J3mN5I8kz1T7KSq7
lG+V/Uj5h9hDdX87qs37qr9Q4x2h8Qaqzc6qf1j1r6h+F9V/mHq9OBZ9WfU/
sK4p3Yd+rvEWYWtjX5W8RzVW35FKz6j/Hur/ldqepHSb6k9T+6ka73yNt6/K
zmOP4FnyjbB+qP477l1puOQekl9EN2DfkXwWOivrPPceWAe6N/L7CDaxnuRh
mrusNFhth0seonygdDO2j+Q/Iu8x7C0jJa/g20VfV/8XUHH07NapzYOqu059
PtTzWMbzVlmEDqC/n6lNUHKbvySP1Bh/s95IPlBzLVfqrPFGq+wt9f1P93xT
oTtuoL7ra76JansbOj36gea4tuw1Yjr2der8bdiikv9MvZ4Mlfw9a4n6D9b4
T7BmYYdLvk3yao3xuOr/0zxjNP7vvF+q21RyzLuosmkaby3vN/qg6mqR18L7
eVbqv4/mGqk2k7HDqtYvMtVvonu5W21+lVxf6RfJd0jeSO22ltxY40+WnPLu
Ra5borIrEttc2FbYWOsX+gpj3VP2vs2ayFrI/j1J83+s9i2qXmNn8t2rzbZV
27cvq36+6puDB7D+Ffb/jpJ7Sd5C428FNqKxHtX4z6v/ppLfkFyV/Af7Kc8U
PE7ttyr05Zbqf5bkJipvDHag9muxSSQ3lTyVd4f3X/2Xq/+2mmdT1njJm6i+
BXsF/ZXfpsgzZ2P130Zls5W/n/Vb8s7ozJJD7CfN/a3GC9i7VNZSdTup//bq
/6Hkl3lXY+fXx/7NjFfsoLIFKntFz2OByraues3YEntUdR8V9/uK+reJrVtu
IPk5yQ1j/1YVybvy+6nPYYHnH6i5T2Et1HhreSeVv0xtti+eT1Xz7SJ5V7Xb
gfVQfys168LYqNju41Tfo2ob/V9d2z+ZsaoBqm8IvqT6F9X+vrJ14bmS76xa
J+6p8bvp/j7hOwTjq3lfZ3/fRu3fUr5JzfbodpIvw77X+APU/xm1n6D+vdW/
pdqcojaz9HermnXhndR+It8Ha7jk+pJnSN6sZvtze8ln6FqaSz5OchvJ7ym/
Tc327S6Sj1T9hjVjgVuWbQ9w/2CXG6H/KR/WrNs0kvwJ96Z7nFCyjgf221TX
/EfVGDDY72aS/6waAz4N21jXP1PX+IPu5yzJZ0heIPlPyS9K7gNepTlOVftp
/J4162JgupNr1tPR1xtLfkn5f0LbL+uVjbU9rms6s2rM7X+qX69mfKKp6l9X
Pq8Zj2giucS7qfS+/lzJeqy6P0JjB5nkd1TXkDUf20RjP8H9a/zHi+8nVr6J
yhN0H9YL9Y1i539Q2QLdew18slij0M8b8ftovqfVpiG2ROy1C3x2CrZRav3g
es21geq+V5sNSl5Tq6qv5LZtB+qajlPboeAbZesoTSPr/4z9MHsC2IHSLcrf
Cb6qfCXzWsiaeL36X6X2myv9VfJvuUBz3lP1b3oB9pbmm6/6PzTnheAnkj+m
veSzJXeX/K7kH7HHJZ8p+W3J30vuL7mn5C8kh+gQqe2ZryXnkj/WXHcV7w8Y
+njd8+9cD8+K9UDyT5IbSS6Bp0heLXljyeVivwQvALuNJW+v+o58c4X9PVlz
fZpaP+ypuvHYrqH3LtYAsMsPlM6oGMPkXrnnn0reS7kX7ulbyQ9gZ6nsMP0d
CnarOR4NjfmB9XWv2Faei5+hYpv59Mj22kDWH7U5PrJ+xbVxjS/FxjDALrAB
NtZv2UhpaeA982H0fdV/WrbN0l352UpdK8aPhmDrcw9lYwIPhMYcwBpOqRif
BY+9Fnu+bHx+tdK8wO8M2MtS9R9QMQbDXly3J9esb7JXs2ejB6P/9oxsD4Id
gP9ex9hgONjfrLd6t+aq/fUqux0dXPdyTmrsCAyJd4V3ZgX6hcb5gO8js67w
EDoZWLfaXMWeHxg7/QR8uWIMld+XNZK1kfWvQ+T171K1nV02drpQqW/F6/Mk
8DLJecXfOHgI+Mgw5X8oG38B77lD8veSf4rtU8KX9KKe58LE3wjfBjbS5Ynx
TzDO59ivNf5t6E6qe0fy0Mj6/lTlqyq7Qe1/z/1NpRXjreDNr2Fvar7+qp+X
G7N/NjA+Cz4/GTyp7G+Nb26V5n8EO0DzfYnOUvGesxh7MfPei857gfL3hsbJ
wce7qv4DjXFSbEwOWxGb8VONd4/Gu7Pm9+0n3esClf1Ts/30N/hQ2d/KR5qv
T8XfzMmR7UN0lYWq/1R918+817HnHZAZDwIjelBtzsfei+3rWMA7rvyFsX0j
H5WNtX+sMc+pGHN/SfN1VapV/E6Cp2GTYItgX+xQ857GXsb+AB6/E+sF2FfF
WCmY6Rvse2Vjr2Cw7AOs/3vp7/s1Y7fYQy3QQTX/kRX738BywXTBVcBTdq15
j2RvBC9qG9kfcrja78f6hW6rPn+WbBPsXPOezF4M3rKLxpmm9kdUjLFernvv
TwqMQX/E2p1a98Imux59ij1EdU1Lxj7BQFkXWQ/RHdAhvlLdKGxT9qrQ2GND
no/yr2u+dtyP5thYbf4n+SDJh2DTxdaR0I3mVaxnoUOiS6FvoffgD2pbsf4D
/gjeeWRgTJ397KrUex974HWhdT50vT35fiP7ow6oGPMDiwCTWKr875F9EYv0
98KK9WWwbzBwcC3wrAMi+1f4Lfct2f+0c2gsmWeO7oAOsYj9omZ/wK6hsWvs
zbN4z1lTA2PcYCVfgOlVjJmA5YPpo3ehb7H38D0NqngPwj+3p9IOvPsq64fe
qvqLlB+HTQiGorKWZfsc7wxtw2K7Yq9iK7LeXF2xzbiP2s6u2ZeAPQi2D8aP
XoM+g79wL6VWynco7IOJuXE38LYrNd8HNfsu8FlPyewfnFLzO99ebV/K7QMB
X7wEf0duPxz+t6vVdg76Ttk+B/Zi9uRfdS1ja9a90MG+lDxC8jlgNzXfPz5U
/G91mFDZ+MBNurfFSpdV7EPCD7REqX/F/qBr+C1CY+kbSX5V+eGRbVd87Hdp
7MZ6h1Zp7I9UP4jfVmkM2EnFPAJsSPYD+AS5rieOjO2BkW4ZWR9oF9inf1hk
fZn9FMz9ULU/BP0vsH9038j63xnoAnw/vM8qm1S2jx675iWlPSq2aYZgX4T2
zfPN7BNZX8T3hw8Q3e1Z9vCKdbi2Gu8ApW6B/W9JZLyjgeTbJc/SvZ6XWhcc
pj5jIuNn/2nuTSrG0xoqfR64DFsam/oHtWsUmAswQfmdCrwLPK5BYuzwX7Uv
K19S0iXUYQDYfS9GfpbYf9g+r+CzqNgGeldtz0+NDd+jspmSz02te8IRwO6b
GPlbxv4LVV9V0r86HbK73q8b8FGB6atNWX8fU9q8Yp/RVpH1swOVf6xs+xl7
7CDJj5dtP2KvHiz5Cd7Jwr7EJgWP2iGy/ndEYJ/8UbF9Lvha/mQ/5VtTek7y
PoU9if14PGuJynaMbA/gq8RnuUbjN81sK2MzY1tgY/A98l3in8B+7BjYP47f
E/vpuMD+T7gXcDAOiu1fx9ePz/+X0Db9I+B9kp9Uvy0qts2w0dhf2GfgHsBB
OCy2f72CfaLUTG1/ljyMdU/prbL3ILB1MPb9+JZ5TpHtn16BORpg+WD6+7N+
q/zgxPYqNvehgbkScCawkQ8J7OvA59FW7T9U+7uVxmLba65l3E9ke+6kwByV
fpKPrhlbX1k2lg+mjw9w68D8CfgmG/Mtl423/hWbC4TOcCXvV816EPrPrNg+
cnzjYDpd2bMk/4nujH0QGR/Dd/BL2XwJ+BBg6WvK9pfj78b2/VXyVWp/as1Y
/h+0D40RgQ2hQzwbug114F3MBd42PvCc8IiuUdlfZfOJnoptzzM2+sql7FFq
P1L5n1WW4R8Cz9TY8/nGQ9u3G0lexDOAX6H+38bmr9woeX5uTtDrge1j/B/v
Btb/8I/B35klOZF8R2T8eabkWPLtkfFldEl0yudC+3zx9bIHXRYZb3yquD5s
KWyqdSVjTddHxrdfVf0/6OeR8fFJ/D5lY//4AOAEbYMNGlpf/q1s/fOZ0Pr2
72Xrt40y26/YvODRcKngVP3Iviz50cj+Adaixrq+mLkif5v4SPaIjVnx/X1Z
MdcLzte37E+sb5H9feCVo8vG38DXGku+mzU6sn9vU8nDy8b7sJdbSH6wbPsb
e3tbyQ+h02n8a/HJq1+bivkU8CfwPXOP+Kt61/yceD4TQu9fJXRz9ozQeEUj
yZ9JPkV9T0ZnDczHgc8BXwMuEM/oBbW/NvKz5Rl3Yp1QugDbB50gMv7SN7DP
CywBTOHL0Phz89iYEfrzLM05PvT+GlT8/lweGmNDv2e9fVH5wZG5EHAkNors
b9xS+RFl+3Lx6WI3Yy/fkZrPgd2MvXxtaAwNfY89b1BsThxcuF31G56Sm6/V
PbS99HHNthh1h5SNNfyt+lWx7cc3lF+Z2j8xsGa8F5sRWxEbk7XtCrVtXfUa
h/5/UmRscwt81OAP+BvL9qGAZX+ce09hP0M3wl6gLTrSf2x0ifFmHtP/1Pab
1P6byzT/APaRmrFS5sQ2Rt/eoWob+ZTIvsvtqrZf0LXQucBiR4XWz8EEwQLp
AzdsSO59if3oK7U9ivvV3H0kd0J3T+0rgnOHf2NvjXMxeyH+R2xZpR6h9Z/3
dH+rJG+hOeqr/sTUNje29lzVd4nsH6Hvx2XjAX9LnleyjYb90jUylgCm8Lfm
+wcbv1wHsQYXxObAwX2Do5hqrl+xxyKvYXD7fgbTiM3xOzs2hw7uHPImifcI
9gZ0tMG6tsdzY874SPEXXJkaeweDZ295ld8j8B4DLw7OEtwA+HH4V6YmXus7
l73ewiGgHgx1b419hdLJob+fx0NzouBC9QaThj+YmevIGopujj25WdU66gK4
LRp/jOpOknw9+klm38b6gX0P3P9vsfGUQyLbBw2q5pBgL8DZhKtJ2etgU6n9
e5eofLrm+7dmW5g9Dvx0ZmH/rq+C11jr1b6L6l+Jbe92Lp4/19gzto2JbQnH
89jI+Ct94bT9pmv9PbPvkT3hsdicOLhwYJjgK2A+YD278w2p7UpsePTiqnXZ
Y5RfV7FO27nmPYK9gT1sXOg9DZk941iwB7U5sOQ+L2u8H3PrWehX2DasX5Wq
bZyj0e1Ulkl+r2zbgPWwVjx/fMrYmNiW/1Tsb38itB6B/gB/sZd+gz4l+zBO
U/ujuOaSr7+D+l6MTq+2dwfW7TrEHgsd74DQ+BL3jg1zODZKZOwNDG5YbD7q
irLxImwfbKCT1H8kNpTyY0PjdvTB34ZPDN3gQo3ZTvnekbkON6hsUGR/HHXo
EG0Lvuf8yPgQ6/sRyh9V8jO6Jzaf+buy8a6FNWNfexT8oRtic774/Sh7R+P9
lBsX6FHsL+3RuUp+pl2wtQs5rNp+gy/2edkctpahdcnVur8Ny8YbTlX7T8rG
wHbDX5QbIwSPa6e/9dVmjdpPlby76r/IjXmCB8KJBdMAy2BM7NUzsPHK5rht
H1r3XVn4V7BH4U8vKZsjh721f2Rb/aeK7VLsL/LYp5/AnQDDUNtTJW+PPwr8
PzIehD0Nf3d+2XvmQnRn9jCejcoOiuyP+KNizh/+iak1c/8oOyI25gHWwT2C
+2CP/VAx/oN9th/6SMllH4NvwiFQ+5NVv1zykUovS+5dNsf6gOJ+uGfwphMk
zyt7D8dW3Udtvq7YZsVehm/8Ydk6wn66twFKp4fenw9Q/kqlM0Jz9Oan/j46
cM1l+//xr9+juiNZAwp/9nDJR5etz3ZW6s73oWt6Xvkuoa/1gZL1D9ZO9qIH
JX+E7anrvVdyk8D6BBx1uL7Y7HNic17huuKT+jK1vo5fGn80e+c76t+x4j2U
9Qh/Crr4A6z/sTnEjIePgLWSNRMeBvyL91X/ntKLatsTfVtzN4qsm6CjgAew
F+K7mKjxXwGrS83teCg0vnlmaK4QmMwk1c9IzT96JDSei26Crw2M5a/M+jc8
I/pkmeMHxkW2TxrgOwutJ40o9D04Z3DN+hf6FL/VBZLHao684Mc/HVn/hE8B
H4q1qX3Z+jEcV7itYNLoHugg8Ergk7CeYJdhn8GZGAp2EpqbDKcH7vP7kbF5
ONDwi9uE5orCMZqnuVopNQ/MIZuYGN95T326VLy38O10rniPYT1n/T85MMf5
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
             "]], 
            Polygon3DBox[CompressedData["
1:eJwl1nlwVuUVx/GbxOQmBBJJCkSKcSmLRTYJhCWFGhWhilACrUJYRAcVa8Ea
pNLRdggqCAi1LAGlC9KKilbrAg5xHPclbuioIFhRFKogIri0FQQ/Z+4fv3mf
831+55zn3ve5z72nXDKzbkZukiRLKZ8aipOkbeskWS0YSgNNvliUJLfgh9Ik
aUNf8PXjGYh9ZP5yrLYgSU7ChvFuxPpjOdiRVkmyBpuh1nfieeZ6iX/O27Uw
SbpQb/V+Il6Al+QlyQq5c3jbYd/Jv1HOMfGLakzkGYuPkVdHL5gbIz4TP0ud
bthpdBa2EqtQb616C+TfJh6Pf2x+N5WbqxMPxmvkVmMDYk16vkQj1d4h72w6
n+8odhO2R73dtF9eI/b/nCSplHfQ+i7iuxbfoN5mrJmqebbShFgrz6XqvcBz
s/u3V53W9Dn/dmwh31H1NvB8yjufZwG9hzVh+3g76tGNt42crTzb6ADPQPxX
PAt58lxbf3ENvkffK7ER5k7Hpsp9BbsAOwn7GbZJ3yl6tGAvU4F4GRXwVbmG
hK+7Wo/IvV2/l3jeNnc+1kb+VVguNWLDxRV4tbTrsQd5e2FdsC3m68Td1WtR
vwxfx3MeXWBunHiKHi3GE/WtpynyJtN98o6n5eZ+GfcAe9N4Os8VdKV4OhW6
jo58D9Cbas3R52vsH3p+qE8fuT35tsmt5+mL9479iL2BjcV6YGPFdZTI3SHv
Hvw0vglqPsc3THwCX3nrbJ/H3j4qfjauBevLVyW9LPYaHRYv5jum3sk839Kp
fCPxzXIHqddKfl+sj747sMnYIOyn2FK+tv7X1Vgjtk6tDtTOuJkq+EfxVfH1
07e9nh3ogPhGvm9jn+p5iIbxXYx9ybdevbtpl3gYzYx9Rpepl2Mdf5N/tZy7
4jnCuorvoF9jT5AlJW/IO0/Nt2Jf0LjYN+IzYu8aT8Fq1DwX+3dR9sxfJ/ef
+Fy5I/B/GT+UZs/Tlzzr5Xa2/nvjbMEm8CzH22u4D99LQ3guxJcZ/4nWqLuN
Z76aR+TcI/c/+vwRq+W7SXyHHmVqjOAvFQ/h+yt/uXVW8Byn5iLjlO8tuU+K
n6JKrI/4QnmvqHeNnINy16mxHR8i3hte8zfLXWuuOs4bbL/ca7BRvL8X30B/
MD8j9ii1E4/kTeQeS7N9U6XeHnwTtkveSv4f8KTYEvVa8T2vb3usEFuKFWMt
2IJYmzV+nZ/dg7gXDdjxvHOwE2IfxJmCtY7nnOdhKlZjp7xZrbL58O2jD7HZ
sV/i2RJ/RrXi92mqnOetcXpBtm+bef9iflKa7eHXzW2hIvd8Xux113ap357W
0llOF5qNvSy3haYZP4lNljOOrytfeZzD6j2tXm8936Hxxh/hddSNZzzvVXJv
07sCW8TzFfbf/Ow8jXN1o/rt8FrjzdhIPX4Y9fHV6rXXY2fcH6wUW4mVY+9g
l6jVAz9V3mjs1ThDsc5YG6wGa8ZOFA/FHzDuiR2WWy/ujnfiGx7/W252jvwY
6xjPRZqdKXEW/Agrxgan2blwLnZK7EtsALYJu8/aclxHd9dxRpxXrqM/32i+
E407FWbn7zc89dhn4vnyn+O/PNZGTdbVrSC7Z1vjPKRZ8V/FezqOfHn59Jrx
/7D9hdneWx/7Q25Rmu3DLjxjsaeMa+OM5q3nm1CcfSuUYPdSJ741cZ7wVcY7
VI0O2ApsBVYWzwK2UtxEi7HCOA/S7H5Wxjlrvlea3dsBPI/ja7FpcX5hq8Tn
8N1qDUtop/7vYn/mLbX+O7ES9+Cw+AjNkTNV/ifmtovfpWuNz1HvGXOjxSXq
zYzrzc/ewyXY3Wr+Vtw2zdY+CZsY30j6lWIbaJl4OX1jvErfjubyxHfK/Y3c
fHyh3Cbx2XosijM93il52Vl/JjYPuz3Nzv3X/W6h4XKe9b9ebS2N8e3CN5tv
qblCvt+Z+xg/kJ+98+Ldd4t4CN/14ia+0rzsffwgvopvTJq9mwfxzMVS87di
DXEP+T6IexPvZGyx+7ODrjP3iNp79YuPyIM8o4wfww5FXnjEu9Tbr8ffsa9y
svqD9ZkV/1Ga9Srle1R+jZxCvCr2Nc8VRdnZUIX1owbxAHyacaPcI/o+JO9k
LBerTrPvz8vUK8Ua9C2j3fFNhf0Cm6RHJe8obKh4iZpv69HMNxfvod7GeMeJ
x6u3Vb1cuffjveT2TbPn7nvtwGHJ
             "]]}]}, {}, {}, {}, {}}, {
         {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0k1IVFEYBuDPzFEzf6A2bhQhI4giwlbVKhAkN4kwkLtAcyxyF7ppa4SL
alFR64LATVCbQKdy+sPKUKcsMysMMhAswayF9RyCufM+3z33u/ecc2/Tif6O
MyURccexsjki+YlclM2VEXVyk5O7uJG38W7ey7/lDvVhrtsScYDbuZ5buYsb
Oct93Ct79AzyIOf4PF/g03yVb/At2aZvhO/xMR7lAmd5kn+a47T6u3yl7i6L
mFG/Ts/gIo8ZO8lveK0iIq9+y7/4Ac/yOj/kd2k9/Ih79bxXj3OO57jAffyB
H/Mpnk/7Yd7f1B95Oy/xAl/MREyZyye+xDO8auyzejnNXX3d9VPqCR7mcb7P
5/gu3+abssWar/EV3sdDPMQ7+SwPcHfaA3057uQsH+cj3MZHeT8f5ENpP2ST
eg/PpffMDfyS/8of5lgrF+RGer/WWyO/uK6Wq3neWA1vTffgaq7iCveYVZte
ZLjIIkrTetk2x4a/yWQ95eoXXM62Kp5zhv3iGZeBiD96nkIp5537mr5Nx2VN
xZL/3+8/kIhfOA==
           "]]}, {}, {}, {
          Line3DBox[{1285, 1475, 1790, 1476, 3164, 1684, 1477, 1802, 1478, 
           3169, 1692, 1502, 1814, 1503, 3173, 1700, 1517, 3206, 1826, 1518, 
           1708, 3239, 1532, 1838, 1533, 1716, 3241, 1547, 1850, 1548, 1724, 
           3244, 1562, 1862, 1563, 1732, 1577, 1874, 1578, 3175, 1740, 1592, 
           1886, 1593, 3180, 1748, 1607, 1898, 1608, 3184, 1756, 1622, 1910, 
           1623, 1764, 3259, 1637, 1922, 1638, 1772, 3260, 1652, 1934, 1653, 
           1780, 3263, 1667, 1946, 1668, 2294}], 
          Line3DBox[{1286, 2299, 1479, 1791, 1480, 3165, 1685, 1481, 1803, 
           1482, 3170, 1693, 1504, 1815, 3271, 1505, 1701, 1519, 3207, 1827, 
           1520, 1709, 1534, 1839, 1535, 1717, 3242, 1549, 1851, 1550, 1725, 
           3245, 1564, 1863, 1565, 1733, 1579, 1875, 1580, 3176, 1741, 1594, 
           1887, 1595, 3181, 1749, 1609, 1899, 1610, 1757, 1624, 1911, 1625, 
           1765, 1639, 1923, 1640, 1773, 3261, 1654, 1935, 1655, 1781, 3264, 
           1669, 1947, 1670, 2318, 2295}], Line3DBox[CompressedData["
1:eJwVzL8rxHEcx/G3AaeuyI+yKuXH5A84rFbn/gAMhxKr8mMyWNShDJLNMd1o
8KsMbnQYjIrccQYlJYPDw/Ds+f6+np++XZPz6bm6iJhAY33EdyKilvj/iKig
jIdkxHZDxLP7BUm84tJe5T2txj/oxKM9/OPXndda3W1Ys3fbOtztKGg93It1
bUDrd/fhSEtx1T7IKW2Yh3CuFeyj7jRGtAyPoahleQoZ+wxP4937K23RvYRx
bYVL9mW+03K8gVntw77l3sS9ts95LGiHfICK/ZhPsOP9qnbmPsWbVuJr5Oy3
fINP+4W3T+4ydrWWpohmfPn+A0t2O8Y=
           "]], Line3DBox[CompressedData["
1:eJwV0L8rxHEcx/H39+rOXTEw0LnJYKLwByiKwapOkYWR3M0mCoNREQYZRWG8
jUKMFMVmO+VnDGTi8R2ePb/f5+v7/fTt2zFdHa0kETGJfDbiL++iEJE0RLzi
ojHihTdzEW/8jiZ84dL2ybu2xHsZFN3nOIs9vZXbsOrZTlvJdTuObV1c17u5
z9bLPajZBvjZNsj9tmEewqmtzGMY0Sd4HFf6DM+irFe5gmt9gRcxpS/zjXOX
+N62zhuYs23zFh71fT7AvH7Eh3jST9JvwIp+zmf40G/527l3vGZ7SM/Hj62e
vosdvcW/bcav+38i8zUf
           "]], Line3DBox[CompressedData["
1:eJwV0L8rhHEcB/APcjgMzs5dNgsDRsrmyg1GcUJdiU5+TJSZ+wNkIZmMYjHa
3OaYDJSBUhLlx11ZvG749no/7/e3nqcns7A6VWyIiHmnszki2RZxw0RLRIX5
johf+SARUeWtLsU7Ltpq8rEt2RrxrOvx/MKCrV13auvll67f9s205zP9EF/d
a5RHbE0c1l1ygm+2LnnclmJWd8U8P2xpOWfLcE5X5gYHOK0f5JJ7m7qKvMtR
FmxjLNr2dPfyISe5bstxzXake5LPOcMd2ywv6t/Na/64tyyXbCss6z75wKpt
S963bfNRV+M7/+rvlk9sJfb5793OP7D0NjA=
           "]], 
          Line3DBox[{1294, 2315, 1491, 1799, 1492, 3167, 1689, 1493, 1811, 
           1494, 3172, 1697, 1510, 1823, 3272, 1511, 1705, 1525, 3210, 1835, 
           1526, 1713, 3240, 1540, 1847, 1541, 1721, 3243, 1555, 1859, 1556, 
           1729, 3247, 1570, 1871, 1571, 1737, 1585, 1883, 1586, 3178, 1745, 
           1600, 1895, 1601, 3183, 1753, 1615, 1907, 1616, 1761, 1630, 1919, 
           1631, 1769, 1645, 1931, 1646, 1777, 3262, 1660, 1943, 1661, 1785, 
           3266, 1675, 1955, 1676, 2340, 2324}], 
          Line3DBox[{1295, 1495, 1496, 3168, 1691, 1497, 3199, 1498, 1699, 
           1512, 3203, 1513, 1707, 1527, 3211, 1528, 1715, 1542, 3215, 1543, 
           1723, 1557, 3217, 1558, 1731, 3248, 1572, 1573, 1739, 1587, 1588, 
           3179, 1747, 1602, 3219, 1603, 1755, 1617, 3222, 1618, 1763, 1632, 
           3224, 1633, 1771, 1647, 3227, 1648, 1779, 1662, 1663, 1787, 3267, 
           1677, 1678, 1680}], Line3DBox[CompressedData["
1:eJwV0DksRGEYhtFPgZGMpRBag1Jt6XWWiFphRqOisZVqhkQnGtyEQimMUOos
lVJhK0VsIWGicP7izXPzn5vcpVCaHZ+piYiitdRG5BsiGm2rLqJaH5HlI341
Z/kcs4w16x5r0lZW0E47YN26z7q0g/Vqn607O+QDrvuthw3pi/NhPWOjOpKc
Teo7K+o5m9KSDbJ5/WQLesmWdNHG2Iqu2o3zNa24r6wTbFt37JZlesp2dZod
6bE9sZP0Pqyic+wiPcee2bVe2bLzO/1x3316H/aoD1Zmr/rH3rTKPtL32Cb7
0u/kztv97zbbcP0PRso6tA==
           "]], Line3DBox[CompressedData["
1:eJwV0CEshHEcx+Ef23E2wQVzkgneplFcM0VyI0iEm2vmRkIw4ZJwdzubdIkL
FIVwbIqiYBOccLMZU0SSETzCZ///+3y3993daKE0v9YVEUsqpiIuNdgXUe2J
+EpHfGqZneulN2KXv7FGf8Src5GfqmNbt92zO+XZsdq8wC9YS7PsUA98gTfZ
kaZZQ8/ee2ubsVV5RTl+oBs+ybfZliZYTdc84UW2onG2pys+xPOs7r1zzoSX
1bKlbTlWs005R/iOzmzfznee8DFlPW/+/1ZbmX+4Z/iAMu4beuIn9o77r/NH
3e6rerQ1Pe/75rD/N6u6+x92sDSW
           "]], 
          Line3DBox[{1382, 1467, 1665, 3195, 1375, 1461, 1650, 1368, 1455, 
           3225, 1635, 1361, 1449, 3223, 1620, 1354, 1443, 3220, 1605, 1347, 
           1437, 1590, 1340, 3249, 1431, 1575, 1333, 1425, 1560, 3190, 1326, 
           1419, 1545, 1319, 1413, 3212, 1530, 1312, 1407, 3205, 1515, 1305, 
           1401, 3200, 1500, 1298, 1395, 3198, 1472, 1283, 3229, 1389, 1470, 
           1471}], Line3DBox[{1383, 2331, 2330, 1945, 1666, 3196, 1376, 1462, 
           1933, 1651, 3193, 1369, 1456, 1921, 1636, 1362, 1450, 1909, 1621, 
           1355, 1444, 1897, 1606, 1348, 3255, 1438, 1885, 1591, 1341, 3250, 
           1432, 1873, 1576, 1334, 1426, 1861, 1561, 3191, 1327, 1420, 1849, 
           1546, 3188, 1320, 1414, 1837, 1531, 3186, 1313, 1408, 1825, 3273, 
           1516, 1306, 1402, 1813, 1501, 1299, 3235, 1396, 1801, 1474, 1284, 
           3230, 1390, 1789, 1473, 2338, 2298}], Line3DBox[CompressedData["
1:eJwV0L0rBHAcx/HvHTpXMhk8LQzKQLLYbiCLTBSy3U0G7iYL0xmYLBRZmG5x
SkpJSWRRHsrFUSQ2Jv4Ced3w6tu9P7/r6rpyhYl8IiKyzDVEnNGZjthNRXw3
Rjw2RXy5Wf2ET32DqlaxPbmz+hFv+iqX2oPtwp3UyzzrSxxoZca1Eh/eVfQ8
2/oWo/oe77Y7PceKXiSj79R+y3atT7GgzzOkb3KljTGj3Xs37Q7o65zrGUa0
W9uw26uvcaoP0q/d2Prcbr3Isd5Dm9ZKh7bMq3eHejv1eh0t+iIvtn29mV9+
SOsFqraSz8ka/3eCP9/9B+0INqc=
           "]], Line3DBox[CompressedData["
1:eJwV0C1Iw0EYwOFX5tgmgsmkC7Ig2KbFtjaDWEQwTBBmsrhZLFoU/EgWTTPM
ZFFwKIIIYpnBoGXFCSJoU0xabD7/8OPlHo7j7kaqtdmVnohY1HI64lb5XEQz
E/GVjfjUX39ElV/rnR/ohXd416zwC73yXd2ztubYmZ7ZulrsXDPsRB1W0xFr
qMyO9ebcJ76kHb6tEr/kDfOBz2uV1zXJDtVm01pI7qRv+4t8X3e8pCn+yMvm
GN/TDZ/QOCuqwLZ0xUb1YX+eDyfxDbX4Jh8yszyjQb6mLj/lA/rVj/p4k9eT
t1unlPbPvUrpH8zZNCo=
           "]], Line3DBox[CompressedData["
1:eJwN0LErxHEYgPFXceeimEz8LmVQsmBRhtsol0FdSaSwMCCTwWQ5fwCb4TYG
hpMYGBjc4BQDg1MUVxYpxWLyGZ7e7/s87/Ttnl+dXGmIiDksN0VkMxEJSumI
YirisznirzViQatz79jBhvaszfCv9hds48ftklbRClqNe8ImpvkyP8E/2h+w
637NHNf2tFHt3n6HRYzwRT7Hn7itcjeYQr+2rg1rFfs18kj4Wf7L/YB2xV0i
hzZtTOvjL+znGMKH29AGtR7tjDtFL+raN5doXeYxV8YW32m+cRmtwzyy1/hD
sx233K/ZYpb4A+99NKLKpf11Cv9WnDWk
           "]], 
          Line3DBox[{1387, 2337, 2336, 1953, 1672, 3197, 1380, 1465, 1941, 
           1657, 3194, 1373, 1459, 1929, 1642, 1366, 1453, 1917, 1627, 1359, 
           1447, 1905, 1612, 1352, 3256, 1441, 1893, 1597, 1345, 3253, 1435, 
           1881, 1582, 1338, 1429, 1869, 1567, 3192, 1331, 1423, 1857, 1552, 
           3189, 1324, 1417, 1845, 1537, 3187, 1317, 1411, 1833, 3274, 1522, 
           1310, 1405, 1821, 1507, 1303, 3236, 1399, 1809, 1486, 1292, 3233, 
           1393, 1797, 1485, 2313, 2312}]}, {Line3DBox[CompressedData["
1:eJwVzbkyw3EYheEvloKgyZgxuhTiSlSWoIolEpG0XASGYRiGoSAhIW4klCnp
XYf1+RXvfOe857/ka3uru5mIKGFmJGI/G3GAr9GIeXd8LOIdJb1nX3Ob+p1c
wBvWuRZ3L3/LOXkTG/KCbzT5H3mSK6dNXuRb/G/6D/eJQ66sL7kPtj/5lT/S
j7GlF90J7gMhn+AUFdtyeo9/9G5GPsM5qra55NG2DXAXuMS2rc13+EH9Ctfp
X1zN9sQP6VN6BTvcMzeLab2KBtfV625Hv/H8LYaxghdbH//Ejy52
           "]], 
          Line3DBox[CompressedData["
1:eJwVzskug3EYhfG3Gx2phWgs7XA5NbSm0mrMWlwAO4lEIpFIurFCTLdBaSss
TTfTn8WT857nfP/kG681i41ERJQxkY5oZSM+5IAsYhpfuYhP7hnrmYi8foRJ
vY0N7lq/cyd9P+KuYpOf0WeRwihXwxY/p5eQxgt3Il+937aV3fPIoG07lW+2
HduCexHffFaeoWPbtS25l/Fjy8lzdG17tl+uoq9gEBfo2Rq2G9u9e4i7REFf
Q9P2wOe5Mb2Ofe6Rm8Kx/i4PuSd5IG+5q/9/0IflKqr40/vL8yzr
           "]], 
          Line3DBox[CompressedData["
1:eJwVzr0ug3EYhvHHQBQDob7axUxPA4OpiRN4aX22BhFBGuojjZ4BFSMLTkNH
nyXo4hQkZj/Dlft/X/fzJu9EspEvd0TEPCZTEZe9EV9yQCY47ouYRpt7wGZP
RL9+gCn9EVvcbmfEoPsMX8A2t6AvYgj33JPbHb6gF5HGHP+NZ9uebYlbxjC6
uiNe+Aq/oq/i0+2IPMOrbd+25l3lZzDqfY6WrWqb5Q6xzo2hgTfbka3in8f1
C2TdFHHC39gzXFN/965xtzL3/x33IevcnTyVV9y1+x89K0so41f/A+rRLgs=

           "]], Line3DBox[CompressedData["
1:eJwVzskuw1EYhvHPQlKtVXcWFm7AVLNrMKSLXoALYCPSiIgIrSFxC4Yi9q6C
i9DS1jzVEOz8/os3z3ue9+Tk9Mwt5OfbIqIgkx0R55mITDqiG9O41xmRlwnb
t+xyXwm5cfyQLa6FO9wYvkuJ+2yPOPXOqPOl7Q03+Fc84UfwGBu2F33d9owV
bhhn+Lo86Wu2RzyyDWFXKuIBV/l73HZvWnL6oTt3uGK7Tf7HT8mgfmBr4rKt
gWV+APf5Ohb5m+T/fD9e4DUu8TXsk02uiovcFfbKLNeUXz3rrR88wz/8Bz76
N+Q=
           "]], Line3DBox[CompressedData["
1:eJwVzEs2AmAYxvE3RFGYMFPagrFLUmjIwAIsgHPYhhSKJZA7x2UR9kEDK0CX
n8H/PO/zf77zFXb3t/cSEbGDajrifSJidjwiL2fkm/zORGzasvoFMqhzG1za
fY4rvYB1LqW30NHn8eyPCp93H6JpG8MTX+Yf5Rc/yp0hiQduzbaQihjRTzGM
e77Ef3h/5x7iTpDArf7Jr9pv3ME10Ndr/BaK7mtbT9ZtvWTEirvNdeUxd+ld
Dsv6nDxAjf/Tl3Ck//4n9yMX0eBe/THF5eSkfJHTcgBBkStN
           "]], 
          Line3DBox[{2391, 1042, 2849, 1041, 3312, 2390, 2584, 2723, 2583, 
           3217, 2389, 2580, 2722, 3243, 3110, 2388, 2579, 2721, 3307, 1015, 
           2387, 3109, 3189, 2720, 1013, 2386, 1011}], 
          Line3DBox[{106, 708, 1332, 107, 550, 1333, 108, 551, 1334, 109, 
           1732, 552, 110, 1733, 553, 111, 1734, 554, 112, 1735, 555, 1335, 
           113, 556, 1336, 114, 557, 1337, 115, 558, 1338, 116, 1736}], 
          Line3DBox[CompressedData["
1:eJwVzkdSQlEYROHfmYorMGCpAwO6GRFLxIg4xZm6ILOADM05gIG5YQtIlSvw
Y3Cqb59+t+4bym9MFzsiYhbrXRHfiYgfjOALn/jriSjYkt0RJ6jqU1jjBvRK
2+uTyHP9ehkt/c39V6zyKX0bJVudq2GFf5G/fAbHtmf9Ccu2Ga6JR/3I9iDv
sWRr8LfOdzi03chMZ8Si7cr5Ggf8paz4No0F27l+gf32f3ITyPGn3Bn2+BI3
jnl+TG5hl+9DlhvVN7Gj92KOK3i74f4wPvCOQds/p3I0yw==
           "]], 
          Line3DBox[CompressedData["
1:eJwV0DlSAlEUheFrYJVT4g7EckBxXIapAQswEMQqQNStuA2hoZtB9+A8BE5b
cAd8L/jr3vOf+4Lu0knruDkTEVWczkd8L0b8YA0t3MxGrC5ErKCL3lLErbsa
Sikj47ryuvs9ew0Z35Z7/Ia5z9XR5y/kjN80q9w/HuwDXcfs68pmcy7i0cz5
S3PZ3Re27E94RqG7Sm/4gXfb9he8Yqg7Sh65rsK94R0jXc4X/I78gU+ccWPd
kN+VD+QGJtyIq+NQPsc9N5bvzEL+df+X/gGuMUnfrpsCsYg0KQ==
           "]], 
          Line3DBox[{120, 718, 1872, 119, 562, 1739, 118, 560, 1737, 117, 
           559}], Line3DBox[{2409, 1094, 2863, 858, 3293, 2599, 2595, 2749, 
           1437, 2410, 2596, 2750, 3255, 2491, 2864, 3122, 3180, 2751, 859, 
           2865, 3123, 3181, 2752, 860, 2866, 3279, 1075, 2753, 861, 2867, 
           3280, 1078, 2754, 862, 3294, 2868, 1081, 2755, 863, 3295, 2869, 
           1084, 2756}], Line3DBox[CompressedData["
1:eJwNz7cyhWEUBdCtkFXeQCcbsZBTdSs0erXYyPkZMKM34x1UKOXropZfwAtY
xZrz7f2f4vwNc0szi2VJppmvTn5qk86apN9cpViZdMmN3FBflxyxYLdJvuWs
PBmw26tf5k63Jq8zSKEiuddteG8yxKy9P5r1D2zpthnmtCpp0T2yI+/ybnfE
/KBV/8Sed8l9o+YnbboiBbvH7OvG+KJd/8y5W8flb/rsrFDSX/qfCd2UW1/k
K3mRE9875Deu5VfzQvdrt9t70jzgkB75H9VmLko=
           "]], 
          Line3DBox[{411, 409, 1634, 410, 395, 3223, 2415, 396, 1909, 753, 
           1910}], Line3DBox[{425, 423, 1770, 613, 407, 3224, 2416, 405, 1919,
            761, 404}], Line3DBox[CompressedData["
1:eJwV0LlOQgEQheGxMSK+hA+hIO4bSgPRytqYmJiocV/hPZRHobCyNbES96UR
UVEMJpZ8Fn/OzH/mws3tXVyfX+uIiDmUEhE/yYhCd0RW5mVT/vVEFHVZ+wum
UeaOuSnzM1Y7I47sk+Yn/OrT+PL8Ib+if+Qn0OAOuE/ZcjPOPWAMH9y+7rwr
YtR+jxG883v8pfu6eZi7wxDO3O7q3vhB+y0yOHW7gB1dTTfA3WDZu2xzr1za
fo2KuxS2+CV9lUth037C95uv0IcN7sJ/zv5/C78xI79lTrYBoSkybQ==
           "]], 
          Line3DBox[{2444, 1204, 2888, 1203, 3324, 2443, 2640, 2798, 1662, 
           2442, 2637, 2797, 3262, 3133, 2441, 2636, 2796, 3319, 1183, 2440, 
           3132, 3194, 2795, 1181, 2439, 1179}], Line3DBox[CompressedData["
1:eJwVzsdVQlEYReEfE7EJGxEMExmiyFJnFgAFICUAJkzNmFqwBqYq+YHpY7DX
uWeft+67m2eNSj0VEVU8ZiPyhYgCyvmInBxlIh74o1zEHG/cHu65qp7gVd/F
HXeoz7DQN7COW35HtjC1rclV9PgVOccpJraUDNzYTmSCP28Z237lD65t7/zC
+Ruj5dtk31uvbDPnBEN+Kl98e4xL21ifYGB75rZxwQ+X9+CLf+JK6PJFeY5P
/gAdbktv4kOvoM0N/DvL7bsjI9Oo2f4BrWk3QA==
           "]], 
          Line3DBox[{2585, 1020, 2848, 1021, 3218, 2378, 2577, 2712, 1545, 
           2379, 2578, 2713, 3188, 3106, 2380, 3107, 3241, 2714, 999, 2381, 
           3108, 3242, 2715, 1000, 2382, 3305, 1001, 2716, 1002, 2383, 3306, 
           1004, 2717, 1005, 3276, 2384, 1007, 2718, 1008, 3277, 2385, 1010, 
           2719}], Line3DBox[{2608, 865, 2873, 1115, 3257, 2760, 2495, 2761, 
           2597, 3219, 2411, 2494, 2759, 3183, 3124, 2872, 2493, 2758, 3182, 
           1088, 2871, 2492, 3256, 2757, 1086, 2870, 864}], 
          Line3DBox[{2641, 1188, 2887, 1189, 3228, 2431, 2634, 2787, 1650, 
           2432, 2635, 2788, 3193, 3129, 2433, 3130, 3260, 2789, 1167, 2434, 
           3131, 3261, 2790, 1168, 2435}], 
          Line3DBox[{397, 754, 1911, 398, 755, 1912, 399, 756, 1913, 400, 
           1914}], Line3DBox[{757, 401, 1915, 758, 402, 1916, 759, 403, 1917, 
           760, 1918}], Line3DBox[{1170, 2791, 1169}], 
          Line3DBox[{1173, 2792, 1172, 3318, 2436, 1170}], 
          Line3DBox[{1176, 2793, 1175, 2437, 3282, 1173}], 
          Line3DBox[{3283, 2438, 1178, 2794}], Line3DBox[{1176, 3283}]}}},
       VertexNormals->CompressedData["
1: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
qY6GWskbSqAmn8i37OpgOSNfalZmTHxEUwm1VLfuLuQbEmg4YovNB2qxzufV
n3pKqXcn7kyBfP0EomYJyHZSbfvu/q4xLqe4eJWcId8U+v0dRr7U8t4B65D5
FdR3b8+5kK8Ze99EB3vfxHP2volLXH5Cb5w7Kcs5RpIvQ8opV43XBpDvuh8C
sns/faAiI0tF+dXKqMTJGgshX55Z9+cuu/CesgtaYOSn8Y5a9Xwuka+N5qgF
nPmtlPb2tgfxJsXU4o3xRL4TIx+OjRjRQIkUP1v1qiefKsyNIvId4bhPKlUu
k7L3r52ScC2BEhE9QOR7T1NgVEd1IzWnXyFF43cj5W1//h3kG7BafkRvSQu1
7qnpOka+VNmr4BrId2P/6BBGvpRhrKoSI1/K2KxKAfKtivYwSoptoMYKK5ZG
ODZQi3eYE/n2Djx2E62upHTpQcN1myupmortRL5Jt1KuvOcrpQY2LAhm5EsJ
fNTphnwF1x3m/3ryLfUra98kRr5Uc1f3fMg3vyc+/LxnATX6ruJCRr6UdPgP
It8nNW/eQ5+FxyrIQ5932nasZuZLbY2OqoReNUyQnQW9clhZHMZ8l8o/rfAD
dlH4qqwbdnHi3PGRDG7UmW3n26CfGwrtN0I/FTalNzL8/1O3fIKtW05g65Zt
TQ89xv3jB5inNvNczN5v/uf2+mrcV95/e319J/PsZO8rt02N48b941bM04N5
nt/c5I/7VRf7uQbgPvEZfq5eqsxT664cuW9amD2vvoY9r34Le1699KvrzvBj
G5c/lhJn4u041o/FNBzSx33TR5sOmY5lnn/v+zYP4E9CfFmwrukJ1h2O50+R
+DsqVy0D9uLtsNgG9rJFdVk2gyd1oeVrDexLSy3LGPaltK5ImsGfymDPpTdg
z6V3Zc+lvzhJc2F8aTn94dTsL8qZnbTvplFmx7MLqBMj8hTFLCroByeuPy+0
7aK/R9Z+ON2aRklU8s0Y41BB72vu35rs2UXX7JYfW+90k3Y7m2Wlzamgv2WO
vCAy2Ek7Fy5J3qOQT7/NPR2ky11O5wnx5sgWfaTTQ2I9I+lSOp89l76NPZd+
G3sufWZLOBfu49ZuCe/Cs4G9j1uvRqn/QVkhs+x2s9rS2kQrv70fVBD/nj7t
0CtH4mzlsVVMnKWfs3E2SvHzctdamk7Mslmc8vgtXRLSvOzclm7KW1ZoIfKf
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
y3MNb+jn8HXfRXbd151e57WV0RvDkfdWn2D0yHywkOgtM/6/1oN/133nz6om
eDL6Nyu23fooo4/9O2JdoM8cTua/1n1Z7LrPdHLTkT2MHn8ds9V5G6PXkgqd
N6Dnw9d9/Oy6L6V3G3lfKSXtON6P8XX9Cv3ncCb9a913jV33rXgbFwd+4r+W
HAI/nvxf42AXw9d91uy679TaWE/M94agpg7m+630E7EXZh30r3VfJ7vu290S
8AJ4Zlu2jwSed0buOQc74gxbD/49n7C9rLkS8lopc+k25FUXbkvs6+968OGw
deIWTqwIfh9wb19xGfbX8zmS2F3tn7NjoCdNk+++gZ6cTx9N7O7vOnGQXQ+e
ZdeDsSs8DBNVCinL8MVX8H5YQzLRKzXfTh3Gzqk2g0OW4OdB82fix+L8/XY8
X1hKffhw6j78hNCbPOLHLivvWGpcX0ZFJwj2wK/w1rzQhT64jGo/7N1VTvWL
2PAD57TCPifIvWPZC829NhWU2yLb6ZDXQvuJ1yHf/CCK0MfXFIuAvkxlwRfI
UbWi8yDGuWM9YSLG2fznSSLkxbeiXRnfjTLT7cZ37VzE1kEuC8WCt4PPSGfe
VPDJWbqW4G+TH6iBeUnvv7ob87Kf0EtwVlbh1QIOXI38YcBhU/BKgtvS9xbK
jB1SagNRT2CXi/gnEH81SWf9T8auqUVGvCmwb02Ls4HwV3niPQsZ+6cCgr7V
wB/MzXVbDn9l8SRBnfEX1HO5+S3wH0++vv4Bf3WqoE2U8S9Uesn3x/A3YiLq
8fBXqT/mdjJ+iZp1udwX/unD3rE98Fd8ipc+gu6apUvofR83asNfGW+PFcE4
HKvshxgn3iK8Dv7qP75LP+gXnA8+z+2fUQk+3RoqtOGvoovS+jGvbfrhNzAv
k7MFxF9dfGskAxz4rrnfAg6vf30mfik6Sp9m8KKEj0wVusbonbrmytnQn/d9
ViEMvlTOmtyT+oxeP44cSfyP46SwZkYelNbiY6dyGPt4G8dL9CdowXcJxq6o
6dtNdI0YO6N869dCf9RH92sx8qa2pZy38WLstSy1mfiNg3ye6xn9oJZ7iWmZ
M3a/wDbgMvTHf8szA9DNXLw0QR/UVvsO/fE5ErgK40TPjTqMcdbMa7kJ/TFU
liPfrXKPXI3vDng6bYD+7NL/VA8+hWb7uIFP5+evSBxUH5vjj3m9czVzxrya
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
Z63AyfV4OMHn/wFagyuH
        "]],
      Method->{},
      PlotRange->{{-1., 0.9999999999998993}, {-0.9999999999999748, 
       0.9999999999999748}, {-0.9999998571428571, 0.9999998571428571}},
      PlotRangePadding->{
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}], 
     StyleBox[
      InterpretationBox[Cell[BoxData[
        FormBox[
         StyleBox["\<\"\[ScriptX]\"\>",
          StripOnInput->False,
          LineColor->RGBColor[1, 0, 0],
          FrontFaceColor->RGBColor[1, 0, 0],
          BackFaceColor->RGBColor[1, 0, 0],
          GraphicsColor->RGBColor[1, 0, 0],
          FontSize->24,
          FontColor->RGBColor[1, 0, 0]], TextForm]], "InlineText"],
       Text[
        Style["\[ScriptX]", 
         RGBColor[1, 0, 0], 24]]],
      StripOnInput->False,
      Magnification->4 Inherited], 
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]]},
    {
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]], 
     GraphicsBox[
      {Arrowheads[0.1], ArrowBox[{{0, 0.3}, {0, -0.3}}]}], 
     GraphicsBox[
      {Arrowheads[0.1], ArrowBox[{{0, 0.3}, {0, -0.3}}]}], 
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]]},
    {
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]], 
     Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
zz8hB0IPEPMCYScQ6wKCAxDcKM6QdX3Oe4VfYj7txv2lGjevBfx3razOh8Px
B1XPf3PbeBuFP2RXBxjrxarER/N1m8IVfpVV8xu0xEklDi6yK4hV+GcWfrbp
mDUq8a5Hs/ztSYnJrM7zNs1U41pNm0GlinjBtjmk1FONX19v5vVoWpDGfNf7
HDyhEqcIORB6gJgXCDuBWBcQHIDgRnEGvd933yniCNtS0iXlkko+I3v98r+y
+v/DcvOBqSr+X7YyaZAiTrHz27t1GauSt2SNijiriHds0awetQap5CdQPFJf
ETfZltV/Od5UyUPGdl6QpYi/rIadX7i9Sr7x80d7F0UcZ9qHOx5jKnnF1AV2
hxX5ADt7Ym7pHJX8gZADoQeIeYGwE4h1AcEBCG4UZyFfxeVM4v+h6Omqsnq1
z0cty8oqeaM070k+L9Pkb8HtZJr81/J1MU3+f2yVHJgm/5qcG9Pkf4RzZpr8
NeRA6AFiXiDsBGJdQHAAghvFGXLwXnjze/F//PW5HlG3tsB7d4XfO8F/Ad7T
qvyeCv6L8V6H8nst+PdCP1Cb+wHBvzb6DRvuNwT/7+hn7nA/I/gTciD0ADEv
EHYCsS4gOADBjeIMHzEuFPC4IPgb4T16x++R4L8Y484EHncE/6HqcUrwX4dx
7RWPa4L/XIyDW3kcFPx/YNzcz+Om4D8W42x9HmcFf0IOhB4g5gXCTiDWBQQH
ILhRnCGzhvZ0lbxI8HfCOGLE44jgn3++9m6VvEvwb373UaZKnib4LzMs1FPJ
6wT/Vy9qOKrkgYL/MefWRip5o+C/cH8XbZU8U/An5EDoAWJeIOwEYl1AcACC
G8UZhmNdUMTrAsE/PHTdD5U8SvD/mMfrjlm87hD872KdMpzXKYK/HdY1fryu
EfxnYB10hNdBgr8h1k0RvG4S/HtjnWXF6yzBn5ADoQeIeYGwE4h1AcEBCG4U
Z5iKdfF7XhcL/i5YR5zhdYTgfxPrcT9ejwv+UVjXn+F1veCfiv2BLrw/IPjr
Y58hmvcZBH8r7Fd84P0KwX8X9j2qeiv7HoI/IQdCDxDzAmEnEOsCggMQ3CjO
4Id9jGZblX0MwX8S1tGNeR0t+DfHPkmNgco+ieCfgP2WON5vEfxl2Ldx4n0b
wd8U+z/2vP8j+P85w/tIq3gfSfCfhf0oK96PEvwJORB6gJgXCDuBWBcQHIDg
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
+A==
       "], {{
         {RGBColor[0, 0, 1], EdgeForm[None], 
          GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJxFm3ccV9Mfxu859x5khYbQj8resreSlMpKKDuRQiIqGVEiilA20RINm4yE
sstMSlRSkZ3smd/z7jm9/HFf9/me77n73PN5nufzuQ1P7972vFgUxa6pKEqt
F2nh9/pa9q6K4jM1XiN8XiiKU7VcLLyv2hep/TrhvYQ/FR4gvKfwAuGrhHcS
niN8ifB22q6F1sdpuU9tZ+q/jYTvFe4kXE94kA66jfo1F75I6+u1vlvLHvp/
vvr1Fx6mPu31Xw/hxmr/RO2XC/dQ2yCt79TSXO3fqP0W4QvVPljru7T0Fe6u
ZaDw+cHnfoeWA9T/i9LH21/489Lb7CL8sfBlwsO17qjfGwoP1Tkcr+0vEN5P
bUtKH/tmtR+n9vOFD1X7t2q/lWvQ+iXd2zqch/BJ+q+28APqv0Lrf7T8pGXN
wvekr9qXa11Dy19a1tXyPy2Xq32Z1mto+U3L2lo20VJX+3tQ+20s3F99VtM5
bCm8odrHqX1X4W3VdqjWx2r5RctaWjbWslSLuhW1tHxe+PlvoOUrLTrlledZ
Rx0e0B+7CI/Sepr+qC88Qrhz5f2MFO5S+Xxqa32/fu8sPFrrcyqf/xjhbsKb
Cl+m8/xO69W13KP2U9VeV/h24eMrj707hU+ofG53CHeofG6HaP21fg8TPlB4
qfANwrdqn2fpOq8UniT8d/Q97ao+2+uc/xR+Tm1ztWwvvKP6ttf6sHyPudfr
aNlB7cdr3VLLW9r3BG1/qvB04QeETxZ+U3iM8EnCM4THCZ8ivH3wGGesvx+8
T679bP2/g87hb+FndPw50ffwg+Dnzz2ZI1xpaZSf6S68j/o9M/fhHBcG72MH
Le8GjwPu+Vnqv536/y68IHi9nZY3dG6j9N8JwvPV/itjIY+d3/I4mKrtftKy
Quf0jvo/ov4d1f6e8BPCnTiW8GPCpwu/xLsl3JZthW8TPkZ4mvAdwu2EPxSe
Itwl3xPuJfd0ttpfVHtX4Z21nqvflwrfomN3Vr8rhF9W212Vx+ptau+i9n7C
B6vtS/13s3Az4a+Eh3IvhJ8TbiX8itZ3V34GL9BX+CjhmcJPC5/JcxF+SvgM
7r/ws8KdhV8XHiHcQfg14TeSx8erwsMrn/9k5gnhw4WnCN8ofKTwi8Kvqf/R
eVxxLuznebUPUZ8jGKtq31lLa+GdtN5My/7cH/3/bOlxuK3w06XHz+Nav6x9
HiT8qHBf/Xeg8GPMecIHCD+i//sLNxOeqPY+wnsLPyXcT/hg4SeErxBuIvyn
8M+8n8JLCs/16+V3n3eOef9J9blSfZoKP8T8LbwPx2IuFN5P+GGem/C+wlsE
3wP2/wyxovLz5plcV/lebBV8bzifLYOfCftnzmduYsxcK7x18Lh6TNc1oHIs
+Ev7+ZU5iPda+JXkuawu733pmME9u7ryfftD+EfhMYxx4WXCo4R/F35H244W
/lH4C7UPF/5OeEHlWDCEMajlNuHlan9L/e8R/kF4ceV4tEz4s8ox5XvhhZXj
zmid/yRtO1348uC5n3NI+n8t7ecx4VJ4deFHhCvhGsKPFn7+AyuPgT7BY3yE
lkuCx/hILSvU5x/1GS/8t/AfzPvCvwp/V7lP1Dppnw8L/6P2v4gBwkHrUu0P
FcXKCT8ITxS8NHge5f7cqfO/WL9vEv5J236pfvcK/yL8beXz+Vn4a+H7CseX
xslzVmMtDbS0YWyorbf+25N5TW01tewIrjyGGD8DdKw11L4146fyeGVsXKX2
1dW+lfDmlcci46Rh5feBd+EO9emtPjcK3y7cS3iIcIPK7wnvSKPK454xuYnw
BOG9hP9XeUwznutXfmd4Xzh3tuO93qbyOGOMbVd5TDOeNw/eH2P9ujxWD+FY
wed1RB7DjHXex6uF6wrvXnh+Jl4SK69R+4Zq3yO/O1wf78NAtdcLvm/ELGIq
czvzM5wJbvCX+gxifDPOC/+/ai5n38znxFW4xmrMS8mxk7jZvnJ85T0POs5i
rTcrHFuIUcSXierfs/I5f1M4/sMD4AO1PHRWxjRiF7FyvPZ3kRp3y/eB+8d9
vCxzFWL6H8LXleY0xEE4BNtfofYfCnOVfsI/Fx4PY/X/eeq3U2H+cmFlDnNu
ZT7BucJ3elTmPCdW5gqcH9wJLgWfPLky3+Ia4CPnV+Ykp1TmZNyjJ3XOb2g9
pzDP2VkXG9V2pv6PWhqq/bnKcYIY8ULl2EZc+whep999hJ/XepZ+nyX8TOV4
Q6wZW5krwBNGVo4xxIVXk2MDY2Zo5VjFGLipclxhjB3NeNNyNu26rsMy751Y
mZfAScZX5h9wj/XgX9rvO8LrC9cXfld4A/iX8HvCNYXfE36b/lqvznsifJzW
DZLHBPMAcxDv+MNqf1v7P024qdp20XKi8FbEPt6L4HeQ95G5dIhwi8yBa2nb
TbXP94VvqBw7GR+D1WevYI7RL5iL3174PWauhcvB55mP4eg9g+dd+Dmc+pPK
cysagTkYrg4H/KDytvOIxcJ9eb46/puV+QMcf2bl/Tyl9lmV5w04xfTkOfdp
rWdXngPhF3Mqz7/3VuYBcID7KvMDuMGmxHfmEM69Mv+Ae7yezGPgMDfoevcJ
5lHooWmVNREaZW5lnTKsMocgRsJtP6oyv4XjlJ6X0TqvVtY7z2n/G2t5i/Gm
db3kuLOW/n9X+DXOU8e9U9tNYW7StrdouSP4hf5XeILgD5VjJPP/mskxiXj0
feW4QkwhHhLHuOfEC9q4J8Q4YinnfzO8W8tY4beTY8YI4eE6h9vVPll4ReUY
RvxaXjkes/3XnLt+76LfS4UnC28rvIR4JbwFsYj7Kbx96bF5YPTz4lh/aWmR
79EB0c9uJHFMy1PMRcHXx/38qTI/4Hr+rhwjiY+/V+YZcIxPK3MCxt+M5BhP
fF9UOfYz5sbqOK8E86fJWs8v/N69mtuYY6cIf1r4vXtReGHhd+Fx4Vn0ZR7T
fqbq96Naamj/tZPbn9fvBYXf37XVXkftrwuvI1w3ec5aV3hDxjf75P/K/Jk5
bXbh/k8Fz230v0vHGhgc9w/VdQzTci3jlvk5mDN8Xpn38B4uqcx7ePfWTuYx
cJh1hVcjHhfmPE9r27mFuc9Hhc/nfrU/y5hlXKnvBtrmFeZe7e82Lc8E+wQz
KnsF+AdvVfYQFgq/LXy18Glab5UcJ2YExxQ0+GTt/+PouIMeph0tWY9YlKyB
mee35PmpfXpwXCQevR0cI4inbwXHJeLFx8HHgXvMDd6O2DQ++nkvEe6qc1un
dOz+Xn3+F8yBv9Z6oxy7z9b/NTPf+FZtmwRzDHjFIcn94BWHJv/3nZb6wZwE
LfCL2udH65qWycd4Sr9/j77WzdR+bWXtsCOcMVlLLMuaAn6F7uUa8RA66Vz+
jL5vnwRzB+LsvOCYu02+Xu7ZFsJnaJ/bJP/3TrBfALdA1+8EGQiOF90ra4dZ
wW1wiQ+D42cDxlwwbyD+wjHwOtC5xPEdmYOEPwteww/RPs2Z14Jj+ubCXzOe
de6zo+M1MX0LtX8r/KzaPoo+Z549zxfO87jafoz2Ml4P9jhq5XP7onBMfy1Y
88CLVvEbuA0anGNurmW28JeF9TjcqWHy9nCqH7k/HF99UnD/HzIHRpetp3XD
YA6zpbZtmswF4bQHCdcO5qgHCtfiXILb4DOLgrdn26XB2zHO4ck/q/+86Hu2
bvB94x7CsXfIY2O/5N9faKkTzJ14PuvnZwRP3j/5GIu1bBDMi/Dz3qscc/G0
3kz2tfDD3q8cZxcLv8v4K+wLvlPZG8Qne6WyV4bGheOg+7qofc3S3hHjrUbw
2IPPH5B8bMYPvIMxwzPjuaBD4e17Jm+zsfAeyZphI/hpsk44B26bdcG/wRwU
TsUO4OvwqOW5HV76c7D+bCr8SzBXR3ecCx8szed/Deb2cPgQzdHhZmXm9ujT
F4UXRMfrKmsBPJAVeQzAc34K3rYJc4rO+eBk3o/u2Et4TeGzdMzVS7+DnbVO
pecfPJy1gr0adNO+6r9OsP/DGv/qeR33k+j5h7mL+8F8tbX6N0vWEl8GHxM+
/6nWawf7QuigvZOPQTyCL3yo5YnguEH8GJPn9hnCPXReW5b2f+CfJ2nb5sH8
8GT0uPCTwqcl89SXte0iLd0L8+HT1d6a8a+2VlpfxDkIHyJ8nvCF2vfWpT2Z
RpnrXsg4ieaY8N7Noo8Dt2yQeSYe7KPa/ynJv7n3jfM7yNw4qLLfsma0L8O4
XDuax8LJB+v/Vsm/14oeu3hl/wRjxnBdte8XzP/h2ycmn3cd7n0wz4fv/cY8
XFovdBJuo//+Dj4uur6++jcT7pbfkQPzseDhw9F4+n2a+owI5i3dotteZnwK
DxeeJnxINGeGn9yo9b3ce+GWOu69ydv/IlwrmY91Uv8xantGuKPwKOFJheP4
Pcn73TPvk/e6BXw52SuH07ZLvv5p6vNZtMaBDx+r9v2D+fBxwgcEa5zj8ax4
T6PXeH2j1d4+Wc9coHvUqLSPunF02znC9aL30SU/l/sr+wmbqP1gtZ9bWE91
SP79Z7C3iOezenSOAe69RnQ7XL0JXDvZF95d7d2CeQU5gj/UvlRtO2XfGO6E
b39lcr+DhPsk+5Lbqs/pwbx9G+HTgnXfPupzYXJehJzIRcn/HaWlY7B2w6/u
q/Zzgvt/XDkHsZv2c24w5yHP0kN9Tg7WkmcIH878FN3Wi/c6+ji9hfvAL0rn
RPBCL1f/s4M90suEuzLvRx8TfkWeomfyNVwMfyntkzdV+6XJHusu0dv1U3tv
/b9raW+WnEgv9enEWM4+LdrqVrUflazlameNw/u7QdZ3zBV3qk/b5P+6o91L
z5O1ojUTmggt/CtxHz2t9k+jtdX6Wu8ZrBP/Cvbl8WHWUfuuweMHXdk6+Xcr
4RHCo4XXhRsG62I09eFq3z0419Nb+Az2pz5nBusp8gi/E98ZO9H/E8uOZB/B
Oa89ot8J4t0rwoujnwv6/Qhtu4f+qxl9HLQ5mu7I5GvYInr+66n2qcILozX1
YepzX/I7eZWuv62Wp9X+jv7/Dm3A/c/6Gq3aKmN8uX2jtTF69rBo/YwGbxGt
jeHt++V2dHHbaI2GxjlGuH+wf4jeuSr5N3NAvzwPvKk+X0ZrgX3yPuEAe0Xr
c3gCY/2C/C4cHa0V7xc+OFofog3na//9k4/N3DKvsr/aLPdHVx6YPQe0W+to
LYf/0DwfC/2FZhyi/dyg34dG5/bQYpfqnh1Q2g+8ROt9S/OWU6L74m+8JfxN
tGY5SevBwVqmnfBVwRoQrfcnc0tprXe18AD9N0N9vo7Wy+ijgWq/hvkleo2e
+oZYk6yjlsKPkrUWGuoa4auF22f9hQfbIVp7obn66njNSz/To/J9Q58eG318
9PKJwoOCtTka9sbkuZ/7NyTfc7T8DWq/nvEX/f+Tec4fGjyu0Lk3J//mufxW
2XtZLdqHx684Ifo68KjxAa5Pvl/Eppty7CC+3JT8mzzOWcJthaerz1fRuv7w
aP96pPAZwvcLP5vj0S0Zt9a2I5Pj05lqH6v1c5yP2u5I9i+IZ48Fx8SXgrXy
rBwfHwmOiSSwaUdjHqt9Tkj+r3s0v0FTd4ne3wvC/fHYSl9jV7XfpfYXC5/D
bcF+xdnCdwu/VFj/3k281O+o9W3Jvgbi4dbkbfA3buG38Nva9tvoa8FXuSt5
X5w35wPXOivaj8Gf6Ry9v+eF++GTlR4nM9X+Q7SuvkZtJ5Tmaj2itT26/mgd
9wHtf3zwOU/I19JW7Q8m/24j/DdaONr3GJb8DE7X72HB3OBK7btV6TnhMjh1
aY/lHPWZmO9Dk2gPCP/niIxHEUeifRY8ljb5XR7BPKNj/aNjLVPbUcJjhccF
85qHg7kNXBPPAp/igmgMB22n/uPV/6Fg/sOa+XAAvlrpe3UkPEF9Hgx+vuPy
/bwar670s+bePpCf6RHqPyb59+HCo5PH3EXqu11pjkHev4vajwnmqO2CORu6
BN2It8NYm5rHG97Oy8H+zk/whNK6ciLno2VasJf+ZrAWnhDt+zCW8UfwSeYx
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
d7J41cQlvoclNlHryreH5En+DzNJmxw=
             "]], 
            Polygon3DBox[CompressedData["
1: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
1D39Ss6OOkh/98MmvrU+qrp/lRLfUxugf/tBk9hUzlR/+/0msezQOmMrlsjO
0Tapj7VF2ijnrlDi63rN9+AvSvaCOnP8En17EfhBP1WJfpWbuF976m9bcjYO
qxMfeI1z/Ybymz+z5oV19rDxt/dwbTn5UqKfz0e+r4ptHA98bh0b6dmcoI2/
7hn9Erm0sZ1yKcbDPpPP4hrGs55pz7JrGE97D9d2Dfm5e5twm55xdeHNJXtB
nSjf9njnC/Wv438vTN/gOn3Pg+8GrwPerwrf8BJ9w6rMkS94tdufcvKvIC9S
ws24Hz/mee5pMyZvL3/3Av/3r7Kmay1Ustdd8/E2nJicl/6c/MsY5HUZX7mO
7l28RDerg13rXvB6ddZUdy8G3qSODlcXL1HiW6uT5T9e6c7fRvR9ifwOfUfX
sfnG8180ydUdWSde/7xJru/wOnyI1zjXnJTf9rQSrtxv7Nw3S671Gr/NoiX3
8hv9gPx6yVqn1tGF6tBBnU40vnytia7xHYxv3wXvibxdHb7luybchWdKvuCr
Jv6I76D8XgnXZ99j4MtKflu/r/H+W01+y639vcDL0rb1+WgP6duBl6/DN8tv
PdyEm7VPPvax7vfvB34E+SL6VkTeib5HwaNKfiv5Wfll+5SdY7zvPVx7Oc8A
8uklvtp29D2AfEnJ2hvU8eXOLPEN9enkF/7dhBtflr53PNslvp9cu77guSVj
+oTyzy/St02dPeK7XFjCffpO6u7bwYPq6HD5jzfp27dKjuZT1r+3jWze5m3a
MiXfzv0mH/N2t5/9hur65Up+K3W+/PZz3Xre4w3kpUq4Vu/3GWt/XOJLmxv4
mvZ+iW+sT2l8t2SJL6EOd607S7hN15T/eaOzP1vWefalS2TH9V/XKuEW5Fzl
vtQ3cmFyYPKV+kz6Ssa4cgvaQ2NjOQa5JvfHMVU4J7kW30/uQc5F7lJ9Lxco
h2l+1Xx8/yr5Ably+UJtyYe9cE1+P22JnJNcifparkLO5OBO359ShaOVn1Bf
y6XIAR/Sxn6oG1bqhbuV79AWfNALl649kksdx5l39sXcipyKXKf2TO5OzlPu
UvskVymHKdcv3+nZ7t+Eq/O8nl2FszM29XzJzRmjyu+bf5SbkY/S99KnLJ0P
Jtcv/6ruX6MJV6h+kPuTM5Tb8/f2Wjk+uULt0agqnKFco/bmrCqco7ky7b9c
oDkzuQE5C7kKOQJjPf2hi6vEfHJH8j1ySXJIw9vsP221HLu5fv2lS6rk/OXP
JivxDS6rw1dNWuI7maM1llmnZMyYRr5sAvB1dWym/F2fEl/iWvCf1P3g69WV
ddYaRBtdZ01jsXVLYiNjsr7qypJrtanyY5OU+I9eM7m2oiQ21eYZq65Xwj0Y
s8qlub7cmpya3K3xg1yuHK65UPloY43fe8mvft8b59aP45vNj1Z8y0mr8PPW
VsiHWItijYW5WXO0chH/64XbUP+b+5LjMBdu/szYfIYmtS3yG9aijKtxMT4D
31DH57dWRb5iiio1K+YO5Jt8FnMI5g6Mz+XOzSHInRvfmFuQQzdXJF9g7Yc5
I/nVvp0/4jeXS9a+yd3LKcsVqx+OrsIZyw2rX/TF5IjN9amPPbvm/MzXG2cb
b5tP03+0fmDtJvrJ/JP5enMH7iH9SesfNmjif5sfNo411jIHZz2L/L3c7MtV
8g+fNuGe9TGtH7LeqE9+hnH5GnOw5l49w3IR6kx1pZzEUSWcgM8o57dfSQzt
PY1B5SL0ofSd5CSMffXx9e2NgeUetCHaDjkI60fM4Zq7XbVKrsuc1xRNOMw9
+T9jk9/XnLJ1D32b1IaYMx3eJP9r7YmcuHUP0zWpLZHj3qtJPlh7Zc56b+RZ
m9hCc7zm4owrjCXMyVmvJf8tF/5mlfylvIVnxZzaiCYxsbGw+U1zY8YRxhPm
yMzlme82npmti8flvydowpfK509Z4k+agzD/Z1yrb2WOfNru+eXyrXeQPzJ/
0DTht+T6tKfmvuT8zDVrr80Vm3M2N6Y/IbdvjszcgPbZXIE5AmtD5P99/z81
yUXrT5hbMye9VZt4Rt/KmoTdOn/uiCo5OnNz+hvmrs3RmSvWf9iySs7Y3L7x
kbGtOX5zy/pD8snjcsxt4jt9D2sGrC0wftu+So2B9W7Wh5j7mahKLlt/U3/G
nPYObeyxvoQ5VXPT+sv6QuaozfVZc2W9hTm/Pt1+MTdv/Ze5b/0P/SFz4Ob+
9c93qFIDYC5P/1hfwpyeuTv9SWMbc3jDOn/X3Iw5CXOB+u/GsuYEd+385cOr
5HB2buOfG/uYEzXfKe9j7OUc8zVTlMQPV9fh37S52lptsvGq8YL8/ezdWfJM
DQHP1aS26/nOvzQXq//0Vne+3+8lfn6m89/macJd6+Po25iLNlejfpdrNmdj
/KA/bDz4Xi+5AWMUYxNzwdZPbVCSW7Km4NLOHpjrMWdtPZL1eeZO3VPWnsgv
jK5Sg6Jt0T+S29PGmLuTzzf3ag7PWj/5h8uq1PxZyycfom9vTZ+1KmM7f91c
tPbhvjb6a0inW9Qx1l7M3CQ3pf00F2SOauk2fJv5AWvKnu++4XxN9pDxoPGd
/v563dn1DMt3jd/5Gvoc8tOv9FK7tkDJ+1rDdltnz6z1maRKrGHMYXyzVuc7
6EOYT3i1F39ttRJ9PqY7n4+2Of97dLpfG6B/8Fln7x5us5/Vhepada6513XA
N3X21dolhsbpKnWWud+fe7EV43X+grUA+ktj2/D51kj4bf3GczY5o/pnT7TJ
31iTYW3Q2iX2xNywukkdNVuVHKe1f3OW+KPWAGo7tCHW86zWJDen/2Gtgjk6
azflN82/WMM5oE0+abUqNYXWeplvUhda82VtmfkobYU1Zt7PmkO5+td6qRXa
sPx/LtP8spymXKYcprWT8verVKmhtDbN/MCAKjVq+isPtNE/42rV2uRf1dVf
9lILZn7HfIQ1Yeoa+V5rDdQ5nmXPh7Upnml1/eCSs63O92x5xhbs9rC1PPKB
1v5Y02OuVv/t2So5W8+yZ3rR7oybzx/R2R45V2sXzH/pO1nD4O9jvlPf8Yte
7Kn5QGtBrSGxVsl8orVL1iwt0oZvNh9iTZu1hvK1+h7WHC7Zhl+2FtEaQmsT
5Ze1ZdYoWltsPmaFKjXG1oaa79BWWSNqLtr3N3dtTtraZPMl5sqsUbb2Ur7W
XIo1mNZeyq9a62gNprUX5jsHVanBsDbDfJu1GNZoWItlPnPtKjVZ1r6aX7R2
0BpYz6f1hOb2Xu/il5VK4gdrUKzdMf/Ur0oNj7lw/WFz5ebErV02n2mt8Lga
5jb5Jm2JNcT/Byg20CM=
             "]], Polygon3DBox[CompressedData["
1:eJwV01toz2Ecx/HfbNMybEhyimmaU8yGmeLCLKdJOzSGhU2ZhTXCtJJDklup
kQul1EpSK8Rms7Fhm8ONciyKDcukrGkX5vVcvPt+P+/n+zz7Pb/ffyllVQUH
R0RRlIF4VMdFUbrmS0wUVcRGUSyecge4RQZr5IXoln+rN+z5wa/RX+YSsFl/
Gtv5OjkOm+RTKOEuyEPO3CCfRBHXyX0L+5yXpS7HSy7R3F2uQC7EWDkP/fYU
yfetHZWXmv3umfdxI1HDZXF9XKWcgFdyEt9szxZ5K/rRxa9Wc1Bv7YX8V9+g
7/N31usfc3fULC5JTcZ4ZxXil5kSuTW8P3PN+Mp1IBOT5es4oj9nrji8U7lD
3WvPZz5F/whP+BnqTOyx1iG36HfpP5mbps/mmvBebsJPdzwf7u9Zcq2fwEY+
g2vEO30jesylyWXmhuTy8B25Rrmcn8S1YS4/zF3kiuUu5IXn4yq4efIxeT5u
cju4ZK4VqdwZLocbdPb+8M3wmqvlVpqplZdhAM+5teo63HLHJrWdm6JORSk3
Rr6CUnu7kc/3YpUze+Ql4c7hW6m5XC+XrT/L7bSvgZstH8IEa5Xcg/Ab17dj
AXaH72suzcxhTOSehRl9bfj/UDNxL9zb3Efr4/QrrOWbq+Omy1WIt3ZbTeU+
6EeHveYehnsEr3/DD+KS3ML/0Q+E34G1bXK9vbOsVYf3x18Nvy/+n34Yc8y1
ydfC8+jfcjHhG4X7quncKDURnc6q4hebOR7W8B+uJH8Q
             
             "]]}]}, {}, {}, {}, {}}, {
         {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0TkvRFEYBuAz1rETvYkfQKJHoiYSShIJHQXR0RAVUUg0dBIJCvuuE4xC
awzGTvgPEoV4ThRv3ue798y5596pHxjpHk6EECZlOy+E6HX9patlpMA1F1Nc
o9fyQ2jket7jFm7iDr1qbRv38jl38RD365y14zzKnzzDU7yov62dj3tzbWEI
y3zEe7rUvcu4H+861w1v6DNzlm/l2nyn7yXDOf0gj3JjftLPkuUX/Rp/x2/6
XdLxXcwfvKkvzBlOOcspp+O30UlnOeQl/vEOqzzHC3F/9yZ4Oj6X40cd4z59
Z+0gd/IV93Art+tZaxu5mWe4jhu4Uq9YW8e/suNcVXpLZ9yr5Ao5MZfrMjnm
Ul0iR5zUxVIkB2avEzwi7LOtgwqXif///Q/ZqUTR
           "]]}, {}, {}, {
          Line3DBox[{690, 754, 755, 866, 1522, 756, 757, 869, 770, 1502, 771, 
           872, 778, 779, 1489, 875, 786, 787, 878, 1526, 794, 795, 881, 802, 
           1507, 803, 884, 810, 1512, 811, 887, 818, 819, 1491, 890, 826, 827,
            893, 1530, 834, 835, 896, 842, 1517, 843, 899, 850, 851, 1493, 
           902, 858, 859, 721}], 
          Line3DBox[{691, 758, 726, 692, 1495, 759, 728, 697, 772, 1503, 730, 
           699, 780, 732, 1524, 701, 788, 734, 703, 1497, 796, 736, 705, 804, 
           1508, 738, 707, 812, 1513, 740, 709, 820, 742, 1528, 711, 828, 744,
            713, 1499, 836, 746, 715, 844, 1518, 748, 717, 852, 750, 1532, 
           719, 860, 752, 722}], 
          Line3DBox[{693, 760, 905, 761, 867, 762, 1501, 906, 763, 870, 773, 
           907, 1534, 774, 873, 781, 908, 1535, 782, 876, 789, 909, 790, 879, 
           797, 1506, 910, 798, 882, 805, 1509, 911, 806, 885, 813, 912, 1536,
            814, 888, 821, 913, 1537, 822, 891, 829, 914, 830, 894, 837, 1516,
            915, 838, 897, 845, 1519, 916, 846, 900, 853, 917, 1538, 854, 903,
            861, 918, 862, 723}], 
          Line3DBox[{694, 764, 765, 868, 1523, 766, 767, 871, 775, 1504, 776, 
           874, 783, 784, 1490, 877, 791, 792, 880, 1527, 799, 800, 883, 807, 
           1510, 808, 886, 815, 1514, 816, 889, 823, 824, 1492, 892, 831, 832,
            895, 1531, 839, 840, 898, 847, 1520, 848, 901, 855, 856, 1494, 
           904, 863, 864, 724}], 
          Line3DBox[{695, 768, 727, 696, 1496, 769, 729, 698, 777, 1505, 731, 
           700, 785, 733, 1525, 702, 793, 735, 704, 1498, 801, 737, 706, 809, 
           1511, 739, 708, 817, 1515, 741, 710, 825, 743, 1529, 712, 833, 745,
            714, 1500, 841, 747, 716, 849, 1521, 749, 718, 857, 751, 1533, 
           720, 865, 753, 725}]}, {
          Line3DBox[{932, 1133, 1325, 1132, 931, 1131, 1324, 1130, 930, 1474, 
           1496, 1323, 1129, 929, 1128, 1322, 1127, 928, 1126, 1321, 1523, 
           1473, 927, 1125, 1320, 1124, 926, 1123, 1319, 1122, 1501, 925, 
           1121, 1318, 1120, 924, 1119, 1317, 1118, 923, 1472, 1495, 1316, 
           1117, 922, 1116, 1315, 1115, 921, 1114, 1314, 1522, 1471, 920, 
           1113, 1313, 1112, 919, 1111, 1312, 1110, 1135}], 
          Line3DBox[{934, 1134, 1326, 1044, 933, 1136, 1327, 1045, 935, 1502, 
           1137, 1328, 1046, 936, 1138, 1329, 1047, 937, 1139, 1330, 1467, 
           1503, 938, 1140, 1331, 1048, 1452, 1141, 1332, 1049, 1453, 1534, 
           1142, 1333, 1050, 1454, 1143, 1334, 1051, 939, 1504, 1144, 1335, 
           1052, 940, 1145, 1336, 1053, 941, 1146, 1337, 1468, 1505, 942, 
           1147, 1338, 1054, 943, 1148, 1339, 1055, 1160}], 
          Line3DBox[{945, 1149, 1340, 1056, 944, 1150, 1341, 1057, 946, 1475, 
           1489, 1342, 1058, 947, 1151, 1343, 1059, 948, 1152, 1344, 1524, 
           1060, 949, 1153, 1345, 1061, 1455, 1154, 1346, 1062, 1456, 1535, 
           1155, 1347, 1063, 1457, 1156, 1348, 1064, 950, 1476, 1490, 1349, 
           1065, 951, 1157, 1350, 1066, 952, 1158, 1351, 1525, 1067, 953, 
           1159, 1352, 1068, 954, 1161, 1353, 1069, 1162}], 
          Line3DBox[{968, 1186, 1367, 1185, 967, 1184, 1366, 1183, 966, 1480, 
           1498, 1365, 1182, 965, 1181, 1364, 1180, 964, 1179, 1363, 1527, 
           1479, 963, 1178, 1362, 1177, 962, 1176, 1361, 1175, 1506, 961, 
           1174, 1360, 1173, 960, 1172, 1359, 1171, 959, 1478, 1497, 1358, 
           1170, 958, 1169, 1357, 1168, 957, 1167, 1356, 1526, 1477, 956, 
           1166, 1355, 1165, 955, 1164, 1354, 1163, 1189}], 
          Line3DBox[{982, 1215, 1381, 1214, 981, 1213, 1380, 1212, 980, 1511, 
           1211, 1379, 1210, 979, 1209, 1378, 1208, 978, 1207, 1377, 1206, 
           1510, 977, 1205, 1376, 1204, 976, 1203, 1375, 1202, 1509, 975, 
           1201, 1374, 1200, 974, 1199, 1373, 1198, 973, 1508, 1197, 1372, 
           1196, 972, 1195, 1371, 1194, 971, 1193, 1370, 1192, 1507, 970, 
           1191, 1369, 1190, 969, 1188, 1368, 1187, 1217}], 
          Line3DBox[{984, 1216, 1382, 1070, 983, 1218, 1383, 1071, 985, 1512, 
           1219, 1384, 1072, 986, 1220, 1385, 1073, 987, 1221, 1386, 1469, 
           1513, 988, 1222, 1387, 1074, 1458, 1223, 1388, 1075, 1459, 1536, 
           1224, 1389, 1076, 1460, 1225, 1390, 1077, 989, 1514, 1226, 1391, 
           1078, 990, 1227, 1392, 1079, 991, 1228, 1393, 1470, 1515, 992, 
           1229, 1394, 1080, 993, 1230, 1395, 1081, 1242}], 
          Line3DBox[{995, 1231, 1396, 1082, 994, 1232, 1397, 1083, 996, 1481, 
           1491, 1398, 1084, 997, 1233, 1399, 1085, 998, 1234, 1400, 1528, 
           1086, 999, 1235, 1401, 1087, 1461, 1236, 1402, 1088, 1462, 1537, 
           1237, 1403, 1089, 1463, 1238, 1404, 1090, 1000, 1482, 1492, 1405, 
           1091, 1001, 1239, 1406, 1092, 1002, 1240, 1407, 1529, 1093, 1003, 
           1241, 1408, 1094, 1004, 1243, 1409, 1095, 1244}], 
          Line3DBox[{1018, 1268, 1423, 1267, 1017, 1266, 1422, 1265, 1016, 
           1486, 1500, 1421, 1264, 1015, 1263, 1420, 1262, 1014, 1261, 1419, 
           1531, 1485, 1013, 1260, 1418, 1259, 1012, 1258, 1417, 1257, 1516, 
           1011, 1256, 1416, 1255, 1010, 1254, 1415, 1253, 1009, 1484, 1499, 
           1414, 1252, 1008, 1251, 1413, 1250, 1007, 1249, 1412, 1530, 1483, 
           1006, 1248, 1411, 1247, 1005, 1246, 1410, 1245, 1271}], 
          Line3DBox[{1032, 1297, 1437, 1296, 1031, 1295, 1436, 1294, 1030, 
           1521, 1293, 1435, 1292, 1029, 1291, 1434, 1290, 1028, 1289, 1433, 
           1288, 1520, 1027, 1287, 1432, 1286, 1026, 1285, 1431, 1284, 1519, 
           1025, 1283, 1430, 1282, 1024, 1281, 1429, 1280, 1023, 1518, 1279, 
           1428, 1278, 1022, 1277, 1427, 1276, 1021, 1275, 1426, 1274, 1517, 
           1020, 1273, 1425, 1272, 1019, 1270, 1424, 1269, 1299}], 
          Line3DBox[{1034, 1298, 1438, 1096, 1033, 1300, 1439, 1097, 1035, 
           1487, 1493, 1440, 1098, 1036, 1301, 1441, 1099, 1037, 1302, 1442, 
           1532, 1100, 1038, 1303, 1443, 1101, 1464, 1304, 1444, 1102, 1465, 
           1538, 1305, 1445, 1103, 1466, 1306, 1446, 1104, 1039, 1488, 1494, 
           1447, 1105, 1040, 1307, 1448, 1106, 1041, 1308, 1449, 1533, 1107, 
           1042, 1309, 1450, 1108, 1043, 1310, 1451, 1109, 1311}]}}},
       VertexNormals->CompressedData["
1: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

        "]],
      Method->{},
      PlotRange->{{-0.5, 0.49999999999994965`}, {-0.4999999999999874, 
       0.4999999999999874}, {-0.9999998571428571, 0.9999998571428571}},
      PlotRangePadding->{
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}], 
     Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1:eJx0nXk4Vl33xyulKCUNSqFBaVREg2RHE00ypNJEJNWjEFGikAiZSWWOkMxz
cW/zPM/zEKESzaPqd257n+3kvX7vP13vvs6zWuez117ru1bnnHvxmcsqZyeM
GzfuDee4cRzUnzkPMqZ1L9WV/bLw9YBv/extQUcjU+zXXGGZ30l6rCIYCqz7
w9pudKjKXhCTfbBMMR7OvuT9UVkwCQiM/7TxRoe27LP+pr8iitnw7TwVj5+R
EHzm4fu7pUJfVuT57A0p+iXwZRfnQ2XBPHDunk+3eccV2fI80QQRxWp4IEXn
TahOMaidFV6g0WAm6yCWV6rfUg/TnLKlf0ZWALmHKZFbKixkd98/05us3wL5
xF13hV2rBkdcu/c4aVvJjh/H/l8nLFoA9ZUF64Cz6ts08w4b2dOJ5U4iii/h
Tc5Br1+ZDSB37qfVF4/fkc3Q85uv6N4DJT8sZIXqNIOfTT/9NBrsZRcI/vdE
v6UXvmnZ16s0pQ2I+03g3avqKHutSnqDu8hrGJh/ffrPyA6gp8ltvaXinmyD
LVdmsv5bGNmotqBatAtUzOS67rnMVVZKunF/S/I7OPHgf+vCrr0E5z9N2+Ck
7SbrNvik6e/fIRjQ+zTJ+6O2bIhL5eXzG1Vlac77w17XcHI+BhEc3WvcVNwB
zdn/g5okJ2cCWJm6zsNVJRjQnO/PSPoz5W46uDX4zqXRPBLQnAu9HXomceaA
i3zqu11V4gHNOTf0uaJdQQHwXpu0U7IvGdCcsxLfRE+5WwqyFGbvaDR/AWjO
HVo83LtCK8HXuLRFslMyAc355PnQ9EmcNcAJvBZ2VckGNOdWg22X83XrwJKy
ecIvfXMBzfmYWd1iu4IGkKKhICTZlw9ozo039Wv3rGgG+/tNBe+IFwGas7rd
JLspd1vBS5OwhY3mJYDmXOvst6XodTsw5WhYsCq/DNCcV5QIfN0Z2glsFWx4
ZKdUApqzRvaje+mPjsuufCGtc1hJi3A2VhOcp6r2EKSHDprxWAcSzpwGYKuK
2lPw8OeVwWnWsYTzG4HNJttgAlAPNlg0KyeVcK6yqCxVVnsOuEI3RkyzziSc
TxhI8iUYZ4K+75LZLsG5hHNF0DjZbTAH5O/f0MKXU0g4y9eUni/gKgAhgeKf
vbpLCefkiQ+8lNWKgdzP+3emWVcSzqs2ns1q8S8D4iL8sw66VxPO5Qk+X+ON
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
//ThkwxDfxL+XP/WX8J/ooLbEYb+JPw1cf81jPovwl+XZ90gQ38S/q9x/5WE
+i/CXxn3X8mo/yL81XH/pYD6L8LfFvdfm1D/Rfgn4P5LBPVfhP9L3H/NQv0X
4c+F+69xZ0b6L8JfGPdf31D/Rfhvwv3XIOq/CP+DuP96hfovwv8s7r9aUP9F
+N/A/VcN6r8I/7tDCyUZ+pPw98D9Vw/qvwh/Pjy30UdzG8K/HPdfq1H/Rfjz
4vmMHZrPEP7T8BxGGs1hCH8XPG9Zj+Yto/UXz1VE0VyF8N+P5ycuaH5C+E/H
cxIHNCch/KvwPOQOmocQ/kV47nELzT0I/1V4vnEDzTcIf0c8x0hHcwzCfwDP
K7ageQXhfwDPJVLQXILwP4j7ry7UfxH+0Xj+IInmD4R/NZ6nFaN5GuHPgecP
kzeMzB8I/0N4bjaA5maEvy+ej11H8zHCfw+eg1miORjhL4/nXXJo3kX4y+C5
1oRbI3Mtwn8Bnl/lofkV4T8Pz6ly0ZyK8J+D51EiaB5F+PPhuZMtmjsR/jPw
fKkXzZcI/2l4jrQHzZEI/9t4XhSO5kWEfyueP3xA8wfCnwPPi6asHpkXEf57
UtDcoeOo/WrLjh0smr8Nnlsmorkl4Z+F50staL5E7B/1QH11h8AQ1We7ssba
V06ZybYvS9sP45s1i91vP3moqOlO5T96fWeeoj+7r/6zJWhlE5Xn6P19NM72
AbuvPlzj7CZJ5Tky53T5KM7uq+tuL98jS+U5en93+y+5z+6rxwfa7npJ5Tl6
f+WjVIb3UH31mhc9O+5QeY7eX5BurcXuq4/U75BfReU5en/9zx7TZvfVWWbK
i85ReY7e34X6H+aw+2p1TivhNCrPkfpufLdwpK/2iBWaSuU5en/n31hszu6r
rRd3Cp6k8hy9v942aWvZfTV/zAzBGCrP0fs7x1G5U4/qq6NkwMLxQaWkv6A5
+05wZHOWpTkrFhkXsftqueJLC1SpPEevHxRsqlKj+upxw933KJ1LOC/iCeve
RvXPZgfePqX0LOFs+vqiIrt/NjtoNNmVymc055P7JwYVUP2z5NdLW7ypfEZz
3hXj+72F6p9/lCdJHaTyGc15zl2BFez+uWFJ4kFKzxLOd5/3qrL756Sr8eco
PUs4/34bf5PdP3sWx96i9CzhfFnwZqQ31T9vcWnYT+lZwrn74L6GRVT/vCJN
vYmdz2jOqzMdrdj9M3933VlKzxLOrxoN77P7Z06ewx/Z+YzmHPDhSFQH1T9/
2VhrSenZUc7csjkiVJ/co6k61YTKWzRPgZww0/VUn6x2NQ+w8xbNs2hTh0w+
1Q8HrBt6xs5PNM8Je74I/aT6Ye7q3wup/ozw5L2W4VJI9cNLOLMN2fmJ5hl4
cByvJ9UPb1866TA7P9E8xUR2uJ6m+uGT2xU2U/0Z4cn6Ycu7muqHWdF599j5
ieYZdk5HwZzqhw9sO/eXnZ9onpeqbad0Uf1wS8kUQ3Z+onlu3BZWuJvqhy9o
PH3Jzk80z99hhfbPqH74R/8+NXZ+onnm8r1R4KP6YTvTd3ns/ETzdLKYymVG
9cNTbQoWUP0Z4anav6aojep7Vfb61LLzEM2zsSy0W4LK+2UdOguZPIO/trQX
UfndVKXdlMlzjc3HZb+p/H5bIO+9LIPnbdut0cVUfu+1LVNh8jQqsijypvK7
o+XmtUyep3kye85Q+X2d6ePJTJ4HlSeMW0fl9zebJhsyefrvDb5nQeX3bYky
7Uyenv/teNTNzu/rjfYxeTo694QrUvm961lYKpOnTaxtcgyV3zesbFvG5Hmt
ennuHCq/24byeTB5GnwuqDKn8vsAr8g4Jk/duec7uqg8PruClczkWbrQqJjd
x/4azlnFPO/G6fP92Xpl8PjWuczz3mJW0sPuV2NPODi6MM67+SyH62y9ojf1
m6MX47wLRivwsvXKzDbx/AOM8346hKOG3a/qS+rlVzLOe+yHl4JsvVLs6J+v
yjjv40C2HluviHbX5tczzvshp6AEdr8q52fbvYZx3oOabv1h96vvCwO1mef9
2qxYEbZe8f/8ojuGcd4XPxfey9Yr+xc1aDPPe5Gmy2W2Xvm572O3BOO8G07+
68nWJeGmPDrGjPO+XXj6UbYub2ksl3Nj1KlFStmT2Pq7Wea1eQOjTh0qYA2x
+8+QOyarNzDqlP2Gg5fY+lt/k/n+bYw6pceR0cPuP+9GbuXoYtQphZrVx9n6
O0R4OO02o06tfPywit1/ZnqkG6xg1CnbtIkhbP09aMOapcuoU8aLZU6z9fev
DKGhFEad0rl7RYCtv7m+WxZzMerU4Q9P69j9J79ER+hxRp3aeeylK1t/i/wH
rKIYdUoqa/5+tv6WeBJw4m/gaJ1y9wznYOts0Pl3kzKjHvnhPvOd36JvF/fu
kaF51kiifjKw4r5RhamWDM3zv92on8wzPdfHIagvQ/Pc9AP1k19cFogt1DKW
oXluqUD95BQdG73kDddlaJ7Soaif5PE1UV7BcUuG5umP+0n+OxGXTAasZWie
AbifXGTQ5phdZytD8wzA/eRKjZkRM6C9DM0z0BL1kxt27so/Ee4oQ/MMOo/6
SRmxa90Rbs4yNM8gNdRPLnFSv2We4SpD86zC/aSo1fvpSyTcZWieyl6ob1xz
1cGv8ImHDM1TDsdnI4rP0f4dx2c9is/RPhHHZxCKTzg2Pi+i+CQ6+TyOzzso
PolOVsTxGYTik+jkVTg+01F8wrHxOYDik+hkExyf31F8Ep18FscnJ4pPopPV
cXzORvFJdPIuHJ+LUHwSnbwRx6cYik+ikz1wfG5F8Un0cDnOnz9R/iQ8TXD+
HED5k/BsxfkzGuVPwtMC509dlD8JT2GcP3lR/iQ8NXH+vIjyJ+EZh/NnIcqf
hOcEnD+XofxJeCrj/Lkd5U/CMxjnz0GUPwnP6zh/+qL8SXguwflzL8qfhGcx
zp/fUf4kPI1w/nyC8ifh2Y/reymq74Tnc1zfr6L6Tnhux/XdBtV3wtP93/pO
eN7G9d0B1XfC0wTXdzFU3wlPvX/rO+EZheu7DKrvhGcoru/3UH0nPP1xfe9E
9Z3wvI/ruwSq74SnK67vt1F9Jzzv4vr+FtV3wtPq3/pOeI7D+vMw0p+EZxDW
n0FIfxKeXbuR/pyG9Cfh+cMM6c+lSH8SntZYf8oh/Ul4cmP9eRrpT8LTA+tP
iPQn4emM9edBpD8JTxWsP1uR/iQ852L9eRHpT8KzBevPn0h/Ep7+WH/aI/1J
eGpj/TkN6U/CUxTrT1WkPwnP7bg/4kT9EeE5B/dHVqg/Ijwv4f7oFuqPCM9D
uD+SRf0R4SmJ+6O/qD8iPKfi/qgD9UeEpwXujyDqjwjPIdwfBaD+iPDUxP0R
QP0R4VmN+6N1qD8iPJfg/kgY9UeEZzPuj6aj/ojw9MD90R/UHxGe+3F/NIj6
I8IzGPf16aivJzxlcF8vLD3S1xOenrivN0B9PeG5C/f1/aivJzy3475+Purr
Cc+tuK9XRH094bkJ9/XXUV9PeD7AfX096usJz7m4r9dHfT3h6Yn7ek7Pkb6e
8OTDfb0/6usJTxfc129EfT3hyYP7+grU1xOeu3D/rov6d8LzUaLoPPZ7U99e
8HqXGMaS9018REVt2O9NHU4zLBYviSfvm3g/XD54e0UDiE+u/nNfJIm8b+LB
s/wY+72pGYkbNvyxSCHvm7jeWpbLfm/qvzjPczoNaeR9E+dPIuvY700VRX95
VLw+nbxvsmsD3wH2e1PLn6lXrndgkfdNrmf+HvLsLgXfzebEFnIVED8DpvV/
mGpdCT6qWnKrqhUTP8dvqbrIfu/orVifTpt/GfFT++zzV87BteDjxPCOBONK
4mee2+PT7PeOLhm1Tvsxv5r4KcpyapqZ0wjedvBKy8Ia4qf9GxNV9ntH5w7s
OmejU0f85MpMDZdhv7dT763Dft6T9nPJIXEjZ5Vs8P2doAgnZw3xU6YzYiv7
vZ3BSaHd7Oc9aT/VDJZMYr+30yO45jH7eU/aT/1xj8ptxItAi1TCGYUVzcRP
O9dZPnXmJaD6gPQSrrutxM+ARU5aovlloOBsVhf7eU/aT3G13D1O2oasRxLo
eUnaz/lBBWns5y/vCqLnJQnPweLVF49fZZlOQc9L0n72S5f7sZ/LPPsJPS9J
nke1q5qxV9WcpdqOnpek/UytrbViP68pV4Sel6T9rOQduOa57BaLH70HQ/zs
mqbzmP3eyGrJrSuYPHPfR7qy3xv59HZJxyQGzye1nyy6fHNh+mNubyZPu9St
Fzf05UOb4x/3M3le8LU5aiteBPfNauZg8tx/q2RXg3kJnFWS9XwKg+danVkb
VuaXwRbrCEMmz8ZnJn7s56eNkl3qCxjxqTh+ymH289MDJq9mqjDiU3TN4Rb2
exe6UlsPtDLik+NIsBb7+enL1xV2MuOzy2qoj/3exRqNT1rfGfHJeiZzif38
9Ost/je3MeLzYcPdz+z3LkLnK/pZM+LTaePCTezn6c8mu5sWMc77jHS7J+zn
6WuHr5xaxzjv7nKf5rCfp9+54/AuL8Z5n11wypb9PH3C3Y1rfjHO+/39xZ/Z
7y0sreSfpcU47wLVUjrs5+k95v74kc847+WRlefZz9NPONncuYZx3mk/TyM/
4Vg/y5GfcKyfsshPONbPZ8hPONbPBchPONZPB+QnHOvn9xMjfpLnpZvxvhui
fSd+7sP7/hbtO/FzBd53HbTvxM9JeN8voX0nfr7E+74a7TvxMxPvez/ad+Kn
H973ELTvxM+ef88R8TP/33NE/IzA5+gFOkfET0d8jqzROSJ+6uNztBedI+Ln
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
VL7qiNe8Q11H/BwnMDm15m8W2DFHvWXPYD1ZV56TsDezuBysfnSm/enTZuLn
2X06xeuNLcCbaTfj3F1TiT9vxpUckzG2gBGBwY+Z67k4zh1RnBM/Jf8fXeF3
03n1emM/0FzFudbdtZH4U/r18/Otxn6w5+wqYeb60qqHs/31goGulWxUcuKo
fihXP29U9zcIZvBsncXkVqr/dptUcDhMPhTty+Tsg89vJzq/xM/of+sg8fN1
0dGZdX+zoLG9+30mt4PzZ6exdQK34OOVTM5iu30OFN/MhxeFV15pimglfpoZ
5bdR8Q+vpSYtZca/eqJZKnVeoK1E2a9qxnmh89IJlJeInydxXjIck1dPHjp7
I396Naxt1yg6yIhPzrvJey9p1MIb65fqVjPieeImrVlm7vVQeeIq4+APtaP7
rvtnFrdDCnw1Pdt9GeNc6y29YUDlATjZOn3WYkYeoPOtOcq3xE/6u23tY/L5
vXc8XtS5g/rPl3wVYZw7myeL3lHnFB5VPGqyiHFOX53KGHL8rw0W8yrN+rY8
m/hJ+/PLasQfSPuji/3vQP6TdbqOaKE6AsfWkSt2FY6TW2LSaT9pf/YifyDt
jzP2Xxf5T9aTba8KJhu1w47IDHnj4/FEVxzB+2uD9pf4cw3HgxmKB7J+BdfH
u6g+wrH1cWBM/ZqM99cM7S/x5xSOh2oUD2TdN0y2lspLMMjjwTWbo1XEz3J8
XpLQeSH+1OLzlY7OF1lfgOv+blT3iZ+HcHxeH1M39+HzMhWdF+LPR3y+jND5
IuuZa/e0ZhWXQ+5AkwtUXiJ+bhz/T/4h/vTtRfnqLcpXZH3jz3/0DPHTb8x3
2Gg/5337J/8QfxbhfNWC8hVZ39MkfTBULxia/nzziMpLxM97OJ//Rvmc+FOI
8781yv9kfS3WaWuRTiN+yvybP4mfH+ajfL4b5XPiDxfO/z0o/5P10lUf/Qpv
5gM1l7YCKi8RPx/gujwT1WXiTy+u4wdQHSfrylh/TkX6E/4/9Yj4KYrrphOq
m8SfQlxnK1GdJevf5aJNTN3rwW8nYaHHH2qJn2FYb7QivUH8UcL6JAXpE7Le
hnW1PdLVxM8WrBPGjdFFn7AecEJ6gPgzDuuHyf0j+oGsW5rpRlJ5CRxZer78
+/Js4ueuJ8JU35cM3hvnyqhqhpI8OVHI4HCceD1QGbYoUtHMI/ntc5zSoqSU
aLC2zUhNRz6BXP94d8T1xJRyUNvqPaAtXzOqT/62+0995wXUCmWq5k0crb96
kUErpr5LAr/4nyvNmzhaN1uzxI2mv/OCQQVfw5jXbzz1+RfPuyQoOs94OfP6
Wr0j8skp0bDXs6xTm+HPuW+xvkkp5XDY+4MZ059jDQ8E48WT4c4kh0Flxv3q
HngTSt0vjN2x01yZcb9z/o70WVDvzlDNsjUXZejri56N9E2wec85uWVrHGXo
6zWwfTlkn+zvOWw/Ctkn+1KP/e9B/pPr9bD/v5D/5Pqhf/mQ6xUxn+WID7k+
AfNXR/xHr8f8hxF/cn033l9JtL/kene8vy1of8n1AMcPt8lI/JDr/wii+LmI
4odc/3DM81d0PMvOrZrJ3teKJL+zMyi/6Ou7TK9PZc9fwmJWSalSfTkdt9fw
v/N+w89H0XaufhQC7P2WKUtcm0z5S9uJngg42fOXTN6ndVVUX07bmYKfXxqH
n18ifc1Z0dpDVBwAbdFy9n3QdpZP9f6rk1oMLN6nbBKi+nLaznr8fNFD/HwR
befbicVh7D5cAMULscM6a8kJft1gPVyG+mzaTid+bmEVfv6HtvNwkdYSNkeV
jVEWTH9UJU8F6aYWw2ubhWsEGf7U//ucBrFzWTo3nr1/XcJRU5MYfIz8y7zZ
c4rwnWcXMfk44udSdPDzM7SdF/P4t7LjRm/SPvdpjP16+3MmYM9NLqpxRCkx
9ou2cwo/3zLWjhayA8faOYPskHzVhO/LAD9/QtsxwPfVie6L2DHG9xWG7ovY
6f6XM7HjhzkrI87EzhHM2QxxJnZM8fMbeN+JnXHhSeGMfSd27HNMpzD2ndgZ
+3wFbccOx+EOFIfEzkwch9YoDokdfXwuOPHzD7SdS/hcHELngtgJxeeiFJ0L
YscHn1M+/HwCbUcGn9PP6JwSO+34nNahc0rsWOO6sx3VHRIP816VK7D7jQ/K
F5eVUHWeXueQR/X0I6qnZH277Dphtu4Pj5E+Q/UBZL0L64RDSCeQdV7ObKmv
1N8XWtE/04n6++n1yVj/mCH9Q9b3ZezguUrp4Aln102jdDFZT8e6birSdWR9
WrNWE1uPnuP44M7um+n1R1ivPkZ6lawfFfovZEQXLrGYRdkj60lYh/chHU7W
i1ieIWx9Flh3IS6I6iPp9V7cX+Sj/oJwXnnUxo+tk5ZuyTMpovo5en0S7puU
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
uXKgYw==
        "], {{
          {RGBColor[1, 0, 0], EdgeForm[None], 
           GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJxNnHUYEEXXxbdm7MIWAwQVxS5sCQGxUOxABFuxAAOVV0WxuxWUEjux8FUQ
sDBRQcXEbl+76zs/z+Xx+2OevTs7uzu7O3PvPefe2db9jup1ZFUUxY65KGpt
31dhfxGVZVQxQTuHl0XxoLaHaXu66h+RfILkiyVPknyi5EslT5Q8WPIlku9q
iuLyVBSjJL+g66ys/f469qzktpIPlrys5P/qnCMkP6DtodoOVfthOr6Vzt1V
8v8k36hyoeT71eYQtTlN8p2qu1RtRkq+W/IVkkdLXk7XfFTtTlK7m1R/puqv
Vv2F2j9F5UrJN6v+bNVfI/lLyTeonC/5K23HqVwgeQVdZ4quM0TnvCJ5VdWf
LPkWbc/RudeqTSvVP6k256n+Lcmrcx3Jt9NftblObW6TfI/e7QjJt0o+T/XD
JR+tducU7tvLOncVHTtedceVflbO/Y/ko1TOknyl2syvNl/TT5W5VJZQOUB1
WddcTPJBkudJrj+Q96b7Li55iPr4rbbzqHyiokPFoiofFf7mLVT2V2WTXN9J
lafqnJ/pg7bfazuvyvmS51F/2kn+TEXN/7nvczp3gMo6kr/QdizPKfl5bQeq
rCt5tK7ZQvJcOv8MbTvr5F1UP1TyFpJ7SR5U+jvwfgaWvgbveYDkcwt/r+t0
nUV0zm+SD9N2YZ27jORDJS8keWnJ56mfc+ucVSQ/q/pjVNaW/Iy2R6msJflI
bZdU++UlHyJ5AclLMVYlH6uyvuSLtd1d9X0lXyp5b8n7S75Mcm/JB0j+Rvdp
pbK55IW1ba2ypuS/on57yT/RF5UuvG/1beXSzzub76nrrKD9l3lPkjdjzGt7
sr7dH6rfRc97sspOqv+x9LmdJf+iuttVtpT8repWVNlC8telr7ep5F11fIjK
zpL/jjY7xH3X1z22ZfyrP/OqrKFjWdtVS8+7X0rLXSX/qmvcrdKNvqluOZVN
GINqv5rk3RgLktuV/qa/adtepbvkz/kWlff/VFlLZRvV/1y6/VaS56tcv5fk
DdSvb1TW1v7vKqurbF34XdDHHpL7qf918rj9QXUrqXQqrLjaSO4p8Vy12Sb5
mouq7+N0bHMd+1z1YxqPp7tVt5fqBkl+Sm3aqH4f7T8keTnJm0leRPJYtdtU
8pmq65r8vJdL7iP5QHSL5J0l95F8geSdJO/LfJHcU3JvxqTk7STvI3lJXfMe
XXNvXfN7lbYqHVW/tOrvVX1v7R+p0kflBOYOukHnni35A8nXqQwp/Bx3Zj9L
Wfk6O/KtdZ0nVAaiz9VmBLpL8nvaDlc5SfK72l6jciJzWdtRjfXRXbrOnqXP
vVPyHpIHSH5c12vNfND+h9qOVDkF/YUuV98ORS+h01U2lnyKzv2Rb6vSRecO
1f7v6Cj19zi1PxMdJflYycMk7yf5aMmnSr5e1zxS8n8K3+eo5Hvx3EckP/tt
ut726EvJfXXuMcl24VHdawW+vY4doPpBqj9D9beo/bbxrfdX/cBkW3ar6rdT
/bGSb5fcU/Lx6B1d4xC1GVz4PR2W/K5669y1k8fkPpLXSh7nJ6lN++S5uQn9
bTwOB2u7avL3PVHyaslj9Vb1cwntL6P77anrrJE8F/hW/ZO/15bJ+hFdsRnv
pvH33Uvt10yemyerbvVk3XJDjPGDC49Zxu9Bhcf+lpIPYczEWGbcTtL2LpXH
mAvaPqHtTJWX1eYW7U+SvLL6OVP7t2l/hra3avuo6sdr+6S2r6jcK/kpbV9V
eV1tHtL+85If0PYZ6lTukzxN29fQIbrmeur3g6p7Se1v1nai6mdJniD5OfSG
2qyrNrdrf3c970rJOqed6l9VuztUv7PqW6t+Q9VvzvdvrCd3Yj6pHCZ5gtov
q/pNtD9K521cWoePlLyR5H6Sb5LcI8b5jZK3lnyM5B2S5y1zlvlxQvIc2U3b
i7S/n+ReyXOe+b5Lsi5AD+yRbD+wHdiTFZJtyq7qcxvJG3EdyW2T58sekldO
1tttQh8wftDZ6Hj09n90nY2S5SGSN0y2L1uEXkWftwo7QP2rjccc4+2VxmOR
687Q9rjG7ebV+7lYz7yAzlteZSH0LOOA521879caj2/GNuN64+S+za1zL9S5
84UO4z6MT77D7dnf4gLsC7aE8an2i+nY/NgiydN07ALJIyQvqPpf1WYNyX9p
+ydzMOwRdueasC+M+bvUZqnGNnVhydeH/RoveZnGNmNBySPC7gwPO8U8XTns
MHOK+bRpcp/7Si6T/d5ZjecV7dYMe4pd7lTaLu2NLop77hHf6J/vgF7K/k58
ow7J34lj9IV+7V64v3yvPSWvE37CdoXf9y3Z7/x4ni/Zr+BbtUu+/r46vk6y
Hewjeb1kezo8nhXbdKnkpUrPi3v0HpZu/PxXxzvEH7i8su5hHF4meWnJHei/
2i/ZWI8vIPmqyvb+ZsmL4zNJnk/yFapvKfk+1V2rPozTufdjayTfVHg8MEYY
byuFXeoU759xwVji+/EdeM8PYFN07s3xrVcNX+IT3WttHbsp3hPvi3fyt8qC
MVbPTfbL8RXPT/az8SHvzvb18RsnBSYYLfmsZGyA7w1WwK8fI/mJ8OXvZvzr
vu0aY5upqj9b2ztU/6bq2+M/aP+CZP8e3/4xtTlHdXdKvigZA+DDTw4MMbYw
ngCD3CD5Em1PVblR8iJq/6LKL5I3qD0P5udeav+I2rwj+S1tfyjse79Q2rbi
9y6m815W+UPyu2r/Umk7+57kd0pfc1bo5Dclf6Prr6++/Vf7b6j+YW3fVv2i
usZLyX71hrWvsUBhrAemA2c9HLjv+sJYhecDqzyv9is1xoefSV6nsZ04Su9/
crI+P0byFMkvSB6tYxer3C95gOqnqn665CMlPyr5WckDJT/Ge5E8SPLj9E/y
07r2pGS7gv3AtiC/FrbjjcK2CTuGPVsTHFfavj0V+ma86nuo/urauOaN0rhk
pcJYg3GBngcLnpSMB8GIJybjk4PVnyHYAMmHMN+TsfBhkk9JxsJg1pOT3w8Y
EVx4j+TD1eZU1V9WGO8wZsE5/VV/muovl3xs6fHLvcCDjC/6cITanK42V6Bj
S2PIqyTfpPpXVa7V87yje00vjd3e1vanwrp3ax07lrkteTttjweTS56X74PP
zTtU+8+1bVMYK4IZ52Ycqv67wngqqe3Tye3Af+DAhvGp+05Uu9ncV/Kjkt+V
vLru83hpXuGJ2KJjOflJlQ8kPlf6XuCvmaXrWjEHdPz55HvPzbhQ+Z/kl/Ws
4yTP1rWfk3y45KmSn0rGBR8XvnYZ198pxg++zjOSd5X8SP2vbegez0o/eD/P
lMbY4OhuajeoNo6ei3Gn8qXkbVV3HFxGYSxOe126eL10HxlL+D+zGLMq69V+
Fx/St9LYu0W0z6Wvg83D9oFJwaGvJx/7ARuH/10Ya7/Kc6p+B9WdgC9VGGu/
pvqm9Hdku6Lq1689FvDDP9CzvltaV7xc+n4LqswImfvOkpxKjwGw8yu6ZlWa
J6DPcEOvlK7jG71XWhejh58qzS8sGm34DvR5WulxAlfwquRPC/dtnF7YKyqX
6uJV8vfjnK3wSWrfk/n5fYxHxkaBPS6M5Wcm7zOWllZZmOdBxyTryudLnwsn
sITqZiT3Faz9XrKvg1+K34r/Ok31E5O/1yqBBcBfB6luvuz9fpLnycYMK6hN
N+ah2uyn+rmzMUbr8CHxJ78BlwX2OEBt5s3GLfNX9iXwLfHNdyiNofAZvlVZ
lzkHVxA4B05lcLKu2Fsv5rTaPupeqkvZ99uH8ZLty36k9otm47d91fb02tiq
pa7XS3WHS/5YbRbLxnsrBu6jz60q4zyeq3VgQO61ra5/aLL/06YyxgJPrRj+
M5jxT91nUm1uZBnV71jaDwdvzp+9/4nKEqXHLb7la6o/Ued8rLrFS/NF+K4f
6V6LlbZ98E7onx/VbkxtO/ii2ryVfGx2ab9yNdW/pPq3k/3OL8Ft2ZzE/drO
Tm53guR3k/1exjBjYXWd+35pHgcOh7nC8faFfeb3k48x5haJcYiNxf9Fx4KL
F9F1d9P+sdq+k3wMX/oDyS0k91LfT6qN9T4r7adtIPnT0r4VGOGj0s8Nn4Yv
+kny+/qytM+Fz/am6r9I9uHw7T+UvCj6Hq6jNt/1huo/T/btXpf8WfL9Pi9d
h3/4s9reUtv3+6B0H+HHGNs8x1GSe4Pfa+Px5VW/q+qPlDxd13wzmWtbOjAm
Yxh7QR32ZbrqR0qeKrmnrjG49vP20Hl/Jp+DLwyGgav5Gt81cCz462+VzqV5
oe2T/WTGVccYw4zJv5L3t8YPSj73ebUZoe3kwris0vfoqv0XVH+dtlP41urL
mviN2r9RbR6SfBv6Wm2uVt0jkm9W/X/BM+gIbR9JxrFPSn44WW/coO0EfB7J
1yf7wfjAYyQ/iE8v+TF8rmSf5AnJ92bj5+d0r+GlMfUzkq8pjYXBRhdJvlfy
42o/Qec+Lvn+0hiaPiynNlvFt/gDLr0219RJbX9Oxrdd8CuTce+igXnBv3AL
P6l0YKwFLmbOLlBZ93AdcG6drePAs43k7qV5pAWy9chf+Fcq/QtzTQuqfufS
fdtF2yMKc1YLZe/foe3rKg/Wxs5l9jMsXhmjH6j2i0jesDR2/kryEsFZdMM/
TZa7a/t7MseBTmOM0IdlJXeJ++7OmK2N0+FPflDZoDRX8GPyPfZCL9Ye5/A2
36usXxrHzVK5F2yqa65XGuMvVPn4Pxhfx06pzSFMS+bPsW2/N/ZT8UsfYUwl
44JPJQ9N5vNXxpdT6cz7rhxjgY8q1ea52nGQbyW3yfarv5G8YnaMhJjICpIP
QodWjqucUTh+8Ybqz8DHrxxXGYZtrtyW+dtWx4eqdFTdSnwHlU6S16wck4Fn
66vzh9X2b9eqHHPBdjAer1e5T/Jw5ksyfumrNmNU/4DkB1TXJXvO/6z+dM0+
tp/ajCrt8x8ROgHe6Se12Sr72NeSW2ffb+3Kz3paYXzXnufS/q6Vt8w1sN7q
qh+G7lb9gaW5QWw33Ck8HjZ739J2nPe/dPaxHyWfkRwP6hK4DL/6V8k7BFbs
HNgNn7xT4ET89p2i/TjJw3SNdtlYbhfVn156vveqXIcewE/HX4e/3Vn1Q0vj
3I5xH/ACWPUt/HiwF3Yz7l0yt0JnbVX5WuATnO5ptblcfAQ4Y7jQDSrHjOBX
V6rMZ8NtnqprL5Xd7gFtl8w+1k5t9ivNc2Kb+5a218TFllObA7BtatOvNP8J
f94ye59Yz7KS9y/NIS+Tfa32lc+Dw+Q9r5Ldp4PU37Nr69i70dnZum8u/DHV
36X6W9Hf2fr3GuZr9rhDP28q+UpsjNqei74L3buJ6q9AF+m++wbGu0T1a2Xj
9oPV9pza+P0y1a+djdX3DFzP3ATLr6H6M7W/e+UtOh8sv6bqz0I3Vb7/w/hd
gffpc5/Q1cyLw3Sf82rbDngh4i7bxxy5VPKDku/Q8d9qc0To+0Mq63z8RGIC
g8KOdMg+hzF2XTLWYx5dHHNtf8mXS34obM3G2fv9VH+ZthNUn/GFao835uyG
2edj1zaTfFVpPmTV7HE5Xtu3Vd6oPcYvjHE+j67zaW1O+E/J22VzxIdV5oax
X2eobofs/V/VprvkG/gucGDZnAB9viH69ovqu6l+LN+0sh3mOn9Xvi5j4z7s
f/b4Hy+5U7Zdnxufp/b7PLwyT4ytvxr9nT0GeK/0kXd7cGWeme/yB/MiuJ6D
w9bTZu/KvA78z1W6znrZuP1K/PHs9rdL3iL/+93Y8k4OqsxRMTaOUL8uqM1j
HKD6cfGNflOf3+GatcfSjaXHMPaiR/b+H5K3ze7r1dE/+rx9ZS5qtOTtgpMZ
VVhv3hN6Fc4D7gNO/qjKMv7GscGN0J9j0Ou1eRIK9fBCk0tzJDNDP4OV8dmO
qYyR8HP+boylOTYv/mdtH4YEAs7FPwH3P1Ya+69VW6aOc5/Qu3tZ9ScFPwCf
c0JlDgpeaD61+bp27GALfNjax8DT4GQwMtgbjAo+pd/wWm9pO7gyVwaPdGJl
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
              "]], 
             Polygon3DBox[CompressedData["
1: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
ib2co7+fqM3e0Ke49lct8dfugSH0Hynxk/rHU/i7kRxP++WabeID9X2Dq+D/
2RiflXYgY6+24R7z6+O6+Gx99bZ9Pn17m/hjFPh57nVhl/7bXGeDJn5fXz91
Hf54B/PvZP6pvfDt28C3g08Bb8jch5qs3WmYv4lcp8m95gRvTP+JJr5xdvA6
nPsoeCPwjOCT6e9Oe62Kzb6T8cu5x+n076ryrBd3ubfPLPcaRfukCgfz2S7t
wl19xqnpv0b7uBcO9gDjt7nH5FZyZPCv3kN7UIV76d9/rMLBppQP0j6kPw/H
vmNspD6sis2airFXaR/1sgflZfKFH6rYTPfrXW2u7W+Ynff7IO3VJj73bn0N
c87sZQ2vB36JsQN7iY/kodfRZuyFj8otL6R1vXDMfzH/Jjkd/aeZPwR8NeNT
gr/s86UVaavXuaa+Wx9+HnN+qcJl5V+j9cJp1/T9ySnov0NbvQlfm4T+J9o7
+rvRXqnik/1tV3bh/v7G+8G3yBF7iXlHyOWaxMq+s83pv9Akdlmc8XUZeAa8
k9+nTtz8fJNY1PjZvesevlXO6J4Dv97lWVzPQ/39jM0O/pW2Gfhc1z9jCzSJ
z27h2Pm92JAnuvjr05rwc/3vinLkKt9sSBP++Q/m/qjN5dwfaRf2EuM+TP8n
12Ava37Vvr/6tAk/nZvrf9nlWVbQnjP2m+/Id8/vWZCxb2h/gFdl/E85UxN7
Mj3jczH2Be0X8PKM/9HET+lrppQDc727Sva4+/13/t5BW1RuyPicnPsZ7Wfw
IMbnY+7/GWM38UFzMPYp7adeOLbx9uP99Skn0zddWtLXRz1K+18bbcL9NBPz
36V9DV4MPCP9/9C+6oU/qGX83CaWdH/+xn1voc0HHpfn+wdz3/MdgJdgfHa/
ZZd3vRx4Hq9F+w28os/vvWi/69u0sVx7Ju0P1/qpTrz7WBvb4B6Wq31MW70N
P5iB8Xe67IVFqvi/Bxm7rhcbMCn43z6T9onx3Tn3jzbf8sU6eoZrwG/vNx/W
hM8bW77DsckZf4n2PmNzgXfj/N/lk734wGkZe9NvAl6Q8Wnov+E36CUGOor5
R9Ku9t2rF9A/lnatfAD8AXPvBF/eJP78vMv3/2eT+PcX/l7bJHbVR6ujPNdE
O1JPmZ6599CebhLjTUn/btrjTTSlwX1958Mm32x6rv+2a5D+wlVir/fcR73E
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
9Bb52BpVOKdcXX7zl1ZhvNnFX64DHt17dImH9OVj1sltmTNUM1Qf7pXoyfKb
8RivS/Ry+Zuc+scufGVIFU77axd/va78s877luOqb9zONX/uwmfWko/qA0vy
84eB5wKXEn10S/AA8ICS/LrcbW7wBCX1E+qfc4A3N5Yq0a7VbLcGn1qSi1Mz
b0r0brnVBBxrS/Rb+YkxQlei78r9JwL/1IVfyfU7v0dJ/vyIKjn6P7rktzcE
jw3+s0t+Qr44Tt8f3uAarBLLG5sao6qlWUeilnNmSfxqHGt+b6k270oN7C/t
oyTftlqb/X1HybicS3v+S5vaAHNrrrebSvhS1/92fkPz5Yc3yZec0Oerd4F/
75KPXx88Vp1aBXMCfmtjLW2RNsn8ywN9vmfMLLfTxpxYwsnkYhOAB3XhYHIv
v7H5pFtLuJCxhtq3/k6tZL8mvlifrJa7b5N4UX4zUP/ZxHfpw5Zoo8Gp3e8u
T6qi4avfj2oTv90nNyupPzBfOxvPMG5JPYH1Lcak45Tk17Wts9TRbp5to+Wo
4ezP+JtttD41uwPBb7fRqtSw1Gvky2p5avJqb8Z3g6pocGp18uvBVTS7p8Bj
dsktWiNgLnDsLrldc4Jq2c+0iVfVtOXe6vvLVeHg5hbH7ZI7NMeo/zOeV1/Z
v4k2YvxrbK9GYv5Wf3UMv+3nKlzXeFBbI+edrKRe6BjwAnW0O/UIubAanlqg
+sLiVTTBpbtwLLmVMYj6lXrK0lVqLNTCzAea21UTe6tL/lKtyZoO65HUf7W3
ckBzraN34RbmXM09dl1yheYgR3TxofpOczhjluS71GMmlX+V5Ne3A09Wx9+r
KRhr3cx91u8Sv0/dRj9wLbum72my58coyW9tQ38SOXpJvZC1VDODt+wS36h5
yEdGL8n/bM34xHW0XuO/VapovgPpH9VGOzAmU3t8ok08rgZpbn9AFy5jjl/t
0/hs5SoaqPr1aF1yr9aMyD+MYc1/nNLEf5uvlbueDT6tSw7V3Kk+Rf1/oi7c
xBz+y/SfaqM/WONibn3iLlzBHLva5pNttAE1TnP9E3TJBZvzNzfydBstxRyJ
9VXmPM11TsP9ryzJN6gjyNGsnzKnZy5vuib1OXI8uZ3f3PzUNCW5ATmfe9f7
173sYfXWXcHTVDm2R5vnNzc3HccO7sL55fpyBOsnjCmMJeQE8itjCGMHY4qD
unAKuYScxmv7PYy9vYdcR86jbqFeIZ/y/ajN6WOvL9FXm36MYX5iL/lplZyK
/NTvqS+2JsH8sD5A26/NN3bTnsjljeG0b+eX5HeMOQ5l7owluSBjqmFt3ncr
P62Sn/Id+Ns9dgh4hpLYy5hL/jhTSexkjGb9mTGcsZsxk3xSjiY3k4NYTzZj
m9offab1fnJyubgxiPVT2kRtoXvA+j73hHthvyr1iHISuYicw/ozOYjc41jw
dSX6c93nLHtpq8Dz19Ek9+5ic7Q1R1d9vlSylqwBOKMkh6x2qw+0Hmn8klyi
Nny3LpxALnCo66cLB9D3yxH079oIbcPEnH9jST7OGkjtjXzAPezeHdCkHsSY
1VhVjqk/uqDk25qTtV7GGNTYU59t/ab6u31/n/n8CUtyn3IO63/kIHIPfaz1
QvJrc13GPNajGA+r3Rsjm8/X5+prN6iytrT/pZc1Zr2DHELuoI/eqo19MLfl
+tiyjb38rMoasX5lm/76/Mr30ca+2p+hSj3Glv31pE1xrv7I2NVzjC/krHJV
OYP1IN7Te3kPYzn9lbGrMZ3f2hjW2NVvrr6qbzD+ljNpO9WI1Iu1oeq52mJz
5Wpe1k/O2o+PjBm0Z/JjcwtyaHMh+lh9qzkx9WZtvrZ++yr5futxtHXmBPX9
cgDzAuYDNuzC4eRucka1GzUcdTf1to27cEq5pJxhU+1vSa5NG+/eV+NQ29AG
uJaMSYxFXFPWI1mPYy7VfKt8Rz6rViuHVmvQnup71Rysd1XDUrvSnlifIYeW
O8uZR9AfWcK15WDWH8hR5aZyUuNP7bv30qebnx7W/z7aFOtXDNbNxcnJzY/L
p/z2rim1B/mDWoYaxGTOp72vSeylvmLzvv31mPU8W/T51UdV9CM5sNxXji7f
O6kkVpDTe67xr3O9xq1dNCi1pxmb+Ec5vtzeGOvGLpqOWs70TfRfYxZjFWMU
9UJjGmMZYwjrY9WQ1Y6NOa8pyR+roRvzmD+Yrk2trTmhYfo7xuetw9Gtj5QT
ygXlgGqhchi5i5qosbl61M91YnRjc/Uvc5HG6Opf2t8dmf9jnXy59Wvy7Ver
6FnaY2N5r2G9nPqAWqQ5YnMzg9rUe2oP93R/lWjNahLeS81t+f49dyzR27zX
HXXqHa0neqmKJmR+cY+S2rW6SS2f+cW2SU2f+cY9S2oFPXZzl5jDWMP8jrGy
MfM7TWJwbbX6+A91bPZVXfRZa3CsAbDWzXym97Lm7Rj6w0q0ATUC45OjS/rq
Bmrraux+D7+L9dPLtOFaarZbN6lfsNbzkr6/2LokF6VGb32W+oxa7Vl9/2dN
q7WsfgNzhepF5qLMGZqr8/rWZssRfXY1Zmsv/A3Wg5kjMDdgDtJ6MHOQ5h6t
0dAf+85919Ys7NHlN/js5qPkH9aQWjtqDa32wpoga4HM8WtPRvVtjzU88g85
htzCmlP93zYluQdr9PVn2iRtkTXo+jNr0q1Ft2Zc+2VNkLVA1hhpH6yZtlZ6
oiYxn/GhtZ/G6MZyxnTWFBijyX1H9u2tdtf9YM23td5/5TjA55TUlpgzsXZC
Dir3tObRfInPq692TVhfc17JXlbje6RvP8avUpMlnzMmu6AJpzR+st5BLfLj
OlrlW21yR2qW1pMY/5orU2+z1sB86Ud1ag7Ubo23Pq2j4VoP4/NqK9SsrT+x
Xkd9jj9/1dsa3+v7jQmsXzP+19dvU0XP0L767szxuv8mKalNObJKfGd9glqq
91QP0b4Zy5pDMD5X81HrWb+NHuT/F5DrWvOmVqRmZA7d+hHr8/R/5kZcj+aX
3O/e63v5YBd9+HrOva+XfLH6vbUXvgNz9dZbflAnZ2++1v2h7dCGWL/q/re2
QE1AW2f+ymtr86xPtebBWgdrEKzfNB9hrYTXtJ5Y+2Atgs+gvfb7WjtljY/a
sfGv304N2VpQ8xfm46wJtX7Y/W9u2JoG60+tibEWxhqJ/we5ZH4r
              "]], 
             Polygon3DBox[CompressedData["
1:eJwV01toj3Ecx/FnM5PUmtXsgguT3aBlc6OZUI67GM3GZk2M0XJMElYrh7FC
ydKk2GZ2sLFhJxaS0JxulI3VGhmR3E45lNfv4t2+n/f3+/09z57n+aeW7svb
GxtFUSYmojIuitrjo6hrQhR1o4TrlMvRazBN/w1/Qz6snq/fJDejQh7CUXUL
Fug1myvjZqsPcRdxkzvGbQnXk3tQJd/i+9Qz1A2uVStfQpFcxjeaPy2fQi6X
iXfmZrnxEfyIiaJfYQ4dZq7pV9gZkF9guplBjJkbl+vC/yFnmy10zk75I3Zx
Cdyc8GCc8YRr4rK4DdwOeRTlei3cZXWiukrvgLlkLkMdwz3XK/W3ibugrkGq
Y/vkNOx2Lyv1V2Gm3IgqM1uR7YzzzkvnctTbuQ9ICe8Cy+2swAK9P+bucfny
/bDr3KXcOOL0C7heTDKzmXuk/odkvU47d/lhea76KbfNzGQuJexyj/W6uGVc
CbeJ+8wNc3XcEfVafHPdbnk/3prLMPc9eHP1XIU6D+PmpnCv8Uq9mqsNz9FM
A46Hbw/znJEU3iVOyJuRzi2U68N7l+NdI5+7w7WH79fzrebfB8xcDd+qOhdf
XatVPoNqO1PNX+GXyB1mP4VnxBXrjco9fJa8CD/tdsnP1H2uMWb2S/juuRFu
DbdeXqyOuHX2++W/SHDeAP8bZ8N9oD/8dsK5OCm/RCVXYC/WfqKdjdwDtMnF
qOGmmW/jisK75ZK4QvkhWvVuc4PqoZCdlyNfxzl5Dw6a/w/FEISh
              
              "]]}]}, {}, {}, {}, {}}, {
          {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0kkr7WEcwPHHPFzj0oa8ALrmWSmSDMWS3HJ3LIwLbBQRWSgbpKizYKnU
sbCR4XgD5uFy7y2vQz7/1Pn1/Tzn/JzzOJ3S3xMD40khhBXTmBJC5Cr90AJT
lOY5T5ZwoU6mhlDOpTzLLVzBPdprt42HeJT7eYxHdNfuPE9xjNd4kbd1z+4m
H/Ipx/iEjzVhN8EX3Oxet1yn5853fG8mnB/00Uzykz5Hn8Uv+mr+mGnnN/2p
79G9dcb85Ur9p1fet4X/c71eOt/wtXud8RUf6aV7xXmf43zAG7yly3YXeJWX
OPqC5/iX7tgd5T5e50Fu5W6ttlse/Z/RfbiYyzhPx+0W86dpcq98bdAbr+Vx
LefqsL0azoneT39ol2Zrlsk0nc4Zmm462EcFfxba2SMkm0TS9+/hCwnOPEk=

            "]]}, {}, {}, {
           Line3DBox[{836, 912, 913, 1010, 1749, 914, 915, 1012, 926, 1732, 
            927, 1014, 933, 934, 1721, 1016, 940, 941, 1018, 1752, 947, 948, 
            1020, 954, 1737, 955, 1022, 961, 1740, 962, 1024, 968, 969, 1723, 
            1026, 975, 976, 1028, 1756, 982, 983, 1030, 989, 1745, 990, 1032, 
            996, 997, 1725, 1034, 1003, 1004, 879}], 
           Line3DBox[{837, 916, 884, 838, 1727, 917, 886, 843, 928, 1733, 888,
             846, 935, 890, 1751, 849, 942, 892, 852, 1729, 949, 894, 855, 
            956, 1738, 896, 858, 963, 1741, 898, 861, 970, 900, 1754, 864, 
            977, 902, 867, 1730, 984, 904, 870, 991, 1746, 906, 873, 998, 908,
             1758, 876, 1005, 910, 880}], 
           Line3DBox[{839, 918, 1036, 885, 840, 919, 1759, 1039, 887, 844, 
            929, 1042, 1734, 889, 847, 936, 1045, 1736, 891, 850, 943, 1048, 
            893, 853, 950, 1761, 1051, 895, 856, 957, 1762, 1054, 897, 859, 
            964, 1057, 1742, 899, 862, 971, 1060, 1744, 901, 865, 978, 1063, 
            903, 868, 985, 1764, 1066, 905, 871, 992, 1765, 1069, 907, 874, 
            999, 1072, 1748, 909, 877, 1006, 1075, 911, 881}], 
           Line3DBox[{841, 920, 1037, 921, 1011, 1750, 922, 1040, 923, 1013, 
            930, 1043, 1760, 931, 1015, 937, 1046, 938, 1722, 1017, 944, 1049,
             945, 1019, 1753, 951, 1052, 952, 1021, 958, 1739, 1055, 959, 
            1023, 965, 1058, 1763, 966, 1025, 972, 1061, 973, 1724, 1027, 979,
             1064, 980, 1029, 1757, 986, 1067, 987, 1031, 993, 1747, 1070, 
            994, 1033, 1000, 1073, 1001, 1726, 1035, 1007, 1076, 1008, 882}], 
           Line3DBox[CompressedData["
1:eJwV0DtLgmEYgOE3isYgCIIgKIIgEISgc3Y0O1qmpVmm8UEQCDb0d2pra2tr
ExrabGqqLbB06x90fcPN9TzP94LgeHSbb/SEEGq662VfCFXN6M9eYYNH/OkP
4ZDT6rpdsM4sD5SM7958u52bb7jPPSX0ZX/1vWy+Nu9yR1P6sJ8x4qc32+aM
JtVyK7HGLab17s0E39yKrHCTGxpTx/em26m5zHWuaVQv9hP+elM0r5pXNKJn
e4EFptj2ZpnDenLLM8clLsa/7/sQH92OmeUC5zWoB3vTm1z8P5jnOKsB3duv
eKl/9M8qRw==
            "]]}, {
           Line3DBox[{1134, 1303, 1491, 1302, 1133, 1676, 1301, 1490, 1300, 
            1132, 1675, 1704, 1728, 1489, 1299, 1131, 1674, 1298, 1488, 1297, 
            1130, 1296, 1487, 1750, 1703, 1129, 1295, 1486, 1294, 1128, 1293, 
            1485, 1292, 1127, 1759, 1291, 1484, 1290, 1126, 1289, 1483, 1288, 
            1125, 1702, 1727, 1482, 1287, 1124, 1286, 1481, 1285, 1123, 1284, 
            1480, 1749, 1701, 1122, 1283, 1479, 1282, 1121, 1281, 1478, 1280, 
            1305}], Line3DBox[{1136, 1304, 1492, 1226, 1135, 1306, 1493, 1227,
             1137, 1732, 1307, 1494, 1228, 1138, 1308, 1495, 1229, 1139, 1309,
             1496, 1694, 1733, 1140, 1310, 1497, 1230, 1141, 1311, 1498, 1695,
             1734, 1618, 1312, 1499, 1231, 1619, 1313, 1500, 1232, 1620, 1760,
             1314, 1501, 1233, 1621, 1315, 1502, 1653, 1654, 1622, 1316, 1503,
             1717, 1735, 1655, 1623, 1317, 1504, 1656, 1657, 1624, 1318, 1505,
             1234, 1330}], 
           Line3DBox[{1143, 1319, 1506, 1235, 1142, 1320, 1507, 1236, 1144, 
            1705, 1721, 1508, 1237, 1145, 1321, 1509, 1238, 1146, 1322, 1510, 
            1751, 1239, 1147, 1323, 1511, 1240, 1148, 1324, 1512, 1696, 1736, 
            1625, 1325, 1513, 1241, 1626, 1326, 1514, 1242, 1627, 1706, 1722, 
            1515, 1243, 1628, 1327, 1516, 1658, 1244, 1629, 1328, 1517, 1766, 
            1659, 1245, 1630, 1329, 1518, 1660, 1246, 1631, 1331, 1519, 1247, 
            1332}], Line3DBox[{1162, 1354, 1533, 1353, 1161, 1680, 1681, 1532,
             1352, 1160, 1679, 1768, 1720, 1531, 1351, 1159, 1677, 1678, 1530,
             1350, 1158, 1349, 1529, 1753, 1709, 1157, 1348, 1528, 1347, 1156,
             1346, 1527, 1345, 1155, 1761, 1344, 1526, 1343, 1154, 1342, 1525,
             1341, 1153, 1708, 1729, 1524, 1340, 1152, 1339, 1523, 1338, 1151,
             1337, 1522, 1752, 1707, 1150, 1336, 1521, 1335, 1149, 1334, 1520,
             1333, 1357}], 
           Line3DBox[{1176, 1383, 1547, 1382, 1175, 1684, 1381, 1546, 1380, 
            1174, 1683, 1769, 1379, 1545, 1378, 1173, 1682, 1377, 1544, 1376, 
            1172, 1375, 1543, 1374, 1739, 1171, 1373, 1542, 1372, 1170, 1371, 
            1541, 1370, 1169, 1762, 1369, 1540, 1368, 1168, 1367, 1539, 1366, 
            1167, 1738, 1365, 1538, 1364, 1166, 1363, 1537, 1362, 1165, 1361, 
            1536, 1360, 1737, 1164, 1359, 1535, 1358, 1163, 1356, 1534, 1355, 
            1385}], Line3DBox[{1178, 1384, 1548, 1248, 1177, 1386, 1549, 1249,
             1179, 1740, 1387, 1550, 1250, 1180, 1388, 1551, 1251, 1181, 1389,
             1552, 1697, 1741, 1182, 1390, 1553, 1252, 1183, 1391, 1554, 1698,
             1742, 1632, 1392, 1555, 1253, 1633, 1393, 1556, 1254, 1634, 1763,
             1394, 1557, 1255, 1635, 1395, 1558, 1661, 1662, 1636, 1396, 1559,
             1718, 1743, 1663, 1637, 1397, 1560, 1664, 1665, 1638, 1398, 1561,
             1256, 1410}], 
           Line3DBox[{1185, 1399, 1562, 1257, 1184, 1400, 1563, 1258, 1186, 
            1710, 1723, 1564, 1259, 1187, 1401, 1565, 1260, 1188, 1402, 1566, 
            1754, 1261, 1189, 1403, 1567, 1262, 1190, 1404, 1568, 1699, 1744, 
            1639, 1405, 1569, 1263, 1640, 1406, 1570, 1264, 1641, 1711, 1724, 
            1571, 1265, 1642, 1407, 1572, 1666, 1266, 1643, 1408, 1573, 1719, 
            1755, 1267, 1644, 1409, 1574, 1667, 1268, 1645, 1411, 1575, 1269, 
            1412}], Line3DBox[{1204, 1434, 1589, 1433, 1203, 1689, 1690, 1588,
             1432, 1202, 1687, 1688, 1731, 1587, 1431, 1201, 1685, 1686, 1586,
             1430, 1200, 1429, 1585, 1757, 1714, 1199, 1428, 1584, 1427, 1198,
             1426, 1583, 1425, 1197, 1764, 1424, 1582, 1423, 1196, 1422, 1581,
             1421, 1195, 1713, 1730, 1580, 1420, 1194, 1419, 1579, 1418, 1193,
             1417, 1578, 1756, 1712, 1192, 1416, 1577, 1415, 1191, 1414, 1576,
             1413, 1437}], 
           Line3DBox[{1218, 1463, 1603, 1462, 1217, 1693, 1461, 1602, 1460, 
            1216, 1692, 1770, 1459, 1601, 1458, 1215, 1691, 1457, 1600, 1456, 
            1214, 1455, 1599, 1454, 1747, 1213, 1453, 1598, 1452, 1212, 1451, 
            1597, 1450, 1211, 1765, 1449, 1596, 1448, 1210, 1447, 1595, 1446, 
            1209, 1746, 1445, 1594, 1444, 1208, 1443, 1593, 1442, 1207, 1441, 
            1592, 1440, 1745, 1206, 1439, 1591, 1438, 1205, 1436, 1590, 1435, 
            1465}], Line3DBox[{1220, 1464, 1604, 1270, 1219, 1466, 1605, 1271,
             1221, 1715, 1725, 1606, 1272, 1222, 1467, 1607, 1273, 1223, 1468,
             1608, 1758, 1274, 1224, 1469, 1609, 1275, 1225, 1470, 1610, 1700,
             1748, 1646, 1471, 1611, 1276, 1647, 1472, 1612, 1277, 1648, 1716,
             1726, 1613, 1278, 1649, 1473, 1614, 1668, 1669, 1650, 1474, 1615,
             1767, 1670, 1671, 1651, 1475, 1616, 1672, 1673, 1652, 1476, 1617,
             1279, 1477}]}}},
        VertexNormals->CompressedData["
1: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
dcO59cy0AV3os+n+X/hX/zcuuraC1Z4MgwUxs32O5jInOk2Bfrg/c3P1oj/L
0f3zqn7ccqJX9a2JYekZBw1GQF/Iuw79tmCtSCvpt5Uvv+K53nn2aJD6jKm9
/4pVH0bociXoo1YumId+67ca/bahXRzcS1lag/h/3tN4nPgzfsqDv5t7Dj4R
p8JLic9sAyb8h+dZbq7jXOR3Sofn5RD6eyn/63vxUSxC/Z335YYQ/7v7feA/
K8kF9S8J6m0i9W+/5QnudGI/g5R7NmKwmJR75mUhyvWvOjSf1D90+WA8qb9e
Sx94UXjD3mLbDsYCY82pJ1j+oiG3YzeMbGDEfV8ul9vcyliTcMWsa1E9Q6Dz
ILij8bk/z1nvN+vmB1fyvTSWN8Ontz+sgXyn3r9NE8l3Oi6B6uey/KbcpD+Y
1kyFfqfpW+h30N973l/fu+ePx0PEnz/8MPTfNvyGvsX+K/xdmJrwv3WEei+z
Rwr3LLxXw7i1/NTjwt9tjC22pWdIPZueClV7sPrtmk3Xc8k40OlMfUdek8fd
IePDxAvrMT4MePOBTx/n/p7opxolQm9i0I9yVelxxu2vdUW9ee5bovdPeAf9
DbN71HdhHJVO/FvLV1D+iT/AIx+EJ9dEpDAOLXzFr3i5g1FcUnOW1HNR+hx3
8j2u57MzI8/VMnIs9b0YHPEm49Kc52dGknbwncQLPnLLNjei3zXfD3qdjkng
b+jxbc5f49tugxj4F8dOhf57pAH0hs9meBH/9ZH58K84Zwbu+C5OuWB5BVNF
I1ejqPATY/afvXjvs3VvPyPjjOnTbi7SfxaYyULPK+eG8XCn8YntZDxUqVEE
NzrZBf2Ji/3QN2s9QzsspMfV/X+Nq9s746GP5zPgJvpDkzKgv/S9CP4ufm3w
b+zzA3/eap/8YOMH5u3cvu31VU2MM71laM/t896tJuPnupcz1VnjJ0P5vQTq
Yyy5AOOw/NveyWQc9rgpAj4g1AH9vsfL1Yhe3WgJ+CZ6PD/x13ju6npgDdEv
uTMR/mJak1GfRz/Owf/1jF8Y5++q64K7KVxvanRvZz6bOcl9rGEpI1g4APUU
0OwwJ/qj8q77WXrmCYMxKLdk9k6M/yOuNWP8n+8gDe7f0wW9soaDK9EzeKf/
PY8Ess8jyvU2FkQfsWIA+tfq+qiPmGwr/G0+he4g/n/85cD3878NYY0DzMnV
UrzBLL264C2898ue1ndI+6/NtglgtT9zYg81bqysb88g7+vpN15hMu+cedQO
3hC3D/r0OFPoJzg2gT+m56+cv+avQCcG9FtWfYa+VZYaT7bafYC/achvzGsm
3dQ4sMHVN5I1LjFb3zlP6FxUz0ysskQ9LQXzt5D+vPhkwngy75yr40H7qLc5
Yb47sOAx5rslltS4vbnLXJ/o/advhX7kuTngM+h5M+uvebNm4k/ody0eAX3I
DRfop23ygr9Zhif8c/KPUv1npq/O4ns1TMFMbgvWuMS89Hwt6pm2rmwMGR9k
QvNTyXyq50+NYxVr7wSRebbq0q8cwk25qP5Zcj6Wn+jv+zVBv6yxE+0QQs/X
iX/N1w1PmniJfiNPB/TGSZ+hV3twNYT4j3Zogf9qsXnwt+o9V9oYkcIsFMkY
VLjcwfwYcgj1/L2tY/RW1njrYJYYT55roEAU+pehc6aR8ZzfsmUnaYfde2TA
o+OzodevzYK+2nskeOBfv2NWQI+fT3WtxxD9s9fF0PO53Uc9hxSL4f+EMQnr
h0UtQeAlE/wy85ZXMA6eajrGGpeYrbO68R2d2rx4BZnX9sx8E0n6yfOdKtT8
OO041hWHDPqukXXF7E3Ud5T/RQt6i2tZ0LtdWQ7eRq9PhOj1CS+9PimtOgL9
rDTK37/7DVXPty/gr/NQAusWsSW3wXm7tBRY4xLjyzWfL6xxiXk98R3q+WhL
Ij+Zr482v7jPmq+Z520EUO7ejlSsZwbPmGE9k20tBO4rdRp63zkR0I+IVAd/
TK+L7v+1Llpv2AA9f6diOtGbxZ9DfQYX1MGf50MJ/Lc4Z4L/8pS5wRqXGPor
gj/zG5Yy+7XH4r2PvMCN/Xvf+6v4+6DZUp3U+3Kqxd/X1G6aD36v05Q6Bxi1
B/P4Pl/q97dlpiZA35a3ArxtdAH4ZxE+8O2bwrEfD1wiiPlUNKkZ3FdBEH83
4W/wC7xN0wb7jtk1Yvgd45G8Gzn+HiFq43fk9r+q84I/P3gD/P6GOMwv2qVb
ML/cz6PuTW4dDQL/uMMJfLvbD+j5LZ9inA/qSuHIk0fM9QN/fKkQ+3FHIwF6
v0zlpbMqvUaKjGPPUVP7bqGV602sPxv+b9+9yqQY457TpcsY96b2p1H3jA8a
wYtvFmC/7ED7dxpFUDlSiZdUrnXeR+hNTn4HV51C5V1H0/voOB055Bt75Dow
DqyaS+Xr8tQPYr/8TlYU++UndPsIXuzCfvbkWiWOvKJDniq+08mbKzj2udd2
S+K76NbZi++iNJv6vb6EvUPYzzoE3wKX1HEB3/muDP1zzr589M+VdH5McXAN
8le2T9eAK6/8hvcrSOevDtD5Kz36nvEu/y7w+EO/9xCedYj6Hek3B7jBN91r
dCT8kF0O+L/yUZNsJiIHtWCeEXj+M2nqHGacJnJQYQtGIr/0Yl8g+L/yS989
puP3hVxWLEBOKceOyrUuUzTC7yNtFtjM8ftF/8oXnePLObljP8kLob8w9h2n
+klXz+aY+rT/9MN5oX/lf5zfySK3Y9R7BzmcFCEql+6YvQh8b7I3+FMVY/B/
5XPuHnZBfuZd3Tvwj+VUDqR99QD07xuaOH5H5V/5mbdjr4AfzBHA72+oemTi
vFS54jryLYvfu49l/72Rf+Vb1rc9B1e3F0OOZdjnQWU18idvJp7byp5LiaTz
Jx/o/Mnw78nwGlwDfyloSP3egvl8ar2x5B34WaYhR24km86HvKDzIcO5jqZF
1O8GjPnyHDmNXQpUjjdyQSG4Vd5d8Cd0O/8rvxEYH3lXTJbkK+jzOfq9B9nm
XVaZ+F9OY1jvTecrZtD5iud0/uGRcwLyD6ejjJB/sL+mT/2+x2cn5B8OSTVC
L+5qSN3P/iP/wC3hinyCkl8ruO7QKNRH5uBE8MC2No6/R86l8wm8dD6hlc4P
yMYqIz+QVDkGf287bvRH1EfW4if0XM9/cuQKTlQviiPzzpvzxZMFWOvhuAwn
zDvfw40mkf3GrHszmln7D8b1UbvBfU24JMl8ahMxk7uBtc43Ck4Fl7rhKknW
/VPUNHvJvwe9twb/ul0omqwTKkYkhRO/1KhgzL8Wu5Zm8bHKe58TNUTKd8mJ
BRcuuhvYxFr/SOmO/MVa/zB6Sr3gY//6dWQIa74c6cR3iOyPeacfBu9sHXIm
6zpF70V6ZL/5/eJycLeNhelkPRo3V9KM7JvFllP7ZfME4wtkvdrRnfa5g7WP
jhe3Au+vzgsl60LXPXvjFrH2r3HdL8Gv7fgZRtbhZ+Y+Tgti7SOE8pLBe9eP
GMnaNzKb7abk1rH2kcarz4APOn2qIfsLcd+Yy6z9BfPqXGPwN13ONmSd5Dtt
3b581n7u1c8Q8CdWYy+RfdOzDmcXsj7Ru1iBdvgsw5tI/lvlrt1u8u+e8iOg
1+++MYLsB+0NrdcSPzthB/CpFSMXknXDnLZxT0j5q8YEgp8ZMtJ/z6rfjUNr
xpL6ro2h9mVuwcpHjrOe5+vEL7Hk+VJyR1Pv99wzSfL8m2bK3yPt4fLRHdx/
S5cTaa+LNcaFpP1U9qaDP7R9qUza19vXfEkXq70Lb6bDfw9/wyzyPpR0GvvJ
+5l0vAD83PEuGcLjXwtNWsIqp/lIAHxs+k1XE3+ejRLviF/G5s84N7h1PW8u
qaeJ0oKL5L0bFJ+m1m+Xeq3I8x4XkMkh/cd/MdWeaVN+PyTtdvh4jDnphw8d
hqAvz7+1h7SX2J12HVb7MyQTM8HL1riOIO3SIBSxs57V7+oORFPPpabgR55f
MWvWU1Z7MO2jisCV2vtOkX61QnnQjrSD501ncO1TrYtJ/6xu9PIh7Slasx+8
55TyB9LPPxvO+kHey5DVKPCLSbWK5Ht59Pl3I3m/uh764DuYe+TJd6LC3fiI
vGe3ezJUP6fPqVR+5gx82/HfOZXXnKcupF0kbaVyQ1nlH+pcQ50XGW/rI9/P
kVnrWz6wnosrkPp+Syv8vxKepz87qYXVL0oVd4DPcRxQV1vSxlD14/KvYdYy
oqZxed5f3sDI4OpVI7zcKDmQcOWJDHCl/RfAK08OHSNcR0UKXCrUDT6jrF/B
h/uWCThf5RqK9xsFEC74eBs410pKv0ZyBnj1p3ng2tYDrzPWtDFOpR+oPNtR
yxBRkZ+oJsrax4VOryDcK1ujinC1Uj9xwpOqx78hvLJvG/R/8qLFCP+wuA76
8hXFFYR3u8dCf7H3MfyvjZoNn9dLJsN/w+5W6FVFtkNv3ZsL/RFZZ+gfFpe/
IXxZ9QIJ8Am14CU8otD/3G8HHigs/WjO+0pGaO/MxTKCnxj+DQ9un9JtYLz6
/bS5cWQVo1pv66Ir81njq5GR2XZe1n5NY3E60T9bsWEJ0S9bZQK9rI7MQ8J5
vWPhs1fTFvyljCL8z0+aBO497SX49KikDMK9Wx3BbzuVgJ8P6wevP5oGvvCc
Lrh0wHh7JSaTOdiVv11vSwdj/XnvFaOUWfu70QcuTjjOZGYzhiJqbToYh1Zx
P+xl7VOupI+1JvrcrA/Q8xlQ+lXmXlsJrzTvBR+T4A9uE67nRLjCuu3guVJf
wN/qjrclvM3qMviOD/Xge0577yY8/PZHcHMbFfDonZOCS8SbmBsaFVdqdnxg
FDQYGVtJstZXZuVBhL/MXg0++sBR8CnRVuBhJlngJ5XswTVjfMCNH18CF7Dc
Df72jDi4Umwf+NRPLuCypXYo13TrQvApJt+MCM885vMtSraJKWqV1uba9YGx
u7g3xJe/gaHxMfIr4YUDnh8J9837Dq42/x70y2ozwF8IWwUTbiD4FPzB87Hg
0l+UoW8qlAY/ryYG/lq7Djw28Tz8TwofBa/gawIP0q/7Qniw9BXUh0u59gTh
LyUE4JNgtBz80pAAeO3FxYG3HNqZmVoTdp6bXsKQmLphn9a6BsbqcRvA7/FI
7iBczGot+HPe3eAWHXbgyqGC4D/2LAKf/b7FlnCdygjwu55K4BJG0naEB/w4
De5vqgG++4CmPeGp4r9dCb95+7jvp7B25njbU7/155QwQgekOy3GseajfR7g
qU+7wD3mKYGndur7Ed659CKXAYurWDu3E6454AV9bJjAH6Lv15kO/Tb1WPDV
qaZDhGu+ftFBeLL5DPArpwrhn/z7EfSBGi98CD+Ws2iQcPVN/l2Ehx7oA897
Owa8bP1KcL6l7UfIc3EXP81mPRfzuJkCnrd+0novojcU3L2ZVU/mhzI7qv5x
rdDbf2VAz9iwHPp1XaI+hDOjtbII168SBhfelg/9i/aHOYQrGGqDj1HtBvda
9xH6kfvVwA1rNeETcmF8JuEOmV1oZ4EmQ3fSn32NAvRY/ZkZ+MsE/Tx61mAT
6SdcefMHWP2Eqevmj35VvMYO+hv5ftDnj9aBfvddD3DTAjPwq4K7wA/90ASP
jbIEvyt3FdxfNRQ81+XXZsLPSZSA91ufBNcMi4bepGsI35fKUS3mHNY4sDD5
vi1rHGC+c8vAONB/uDWXcMW6s+B3z1eDr+OVyyLcZXo1+HPvU+Di1fcfEs5r
RPlU3PgALntzQybhPT63wHe9+Ahu9icxg/BxztJ2hE+wVANfmL68S5Q1Hs6w
HBXFGg+ZUZnrMB5u2aTTTfiouz9OEc4wNQD3DVb6Svim68nQr9T99YDwV4ue
dBBuvXgM+NU9m6BXteroJfyL/Tf4ZOVS/tZxEZ8JT7P8DH62kS7Xx+IL4b8P
3jlJePm6nZmEK527hvoorsoClz3jCC6hWtZExv9Tx/iUWOM/c1eUB8b/dVxt
jYTP/qAAfn7MBfDG+dzNhDfK/5pDuEzDYXADOQv4XP/0AnywasQdwpM3PQSv
FCwBlyurgV41/jb4jIuz4X9SXw989jzukU2seXBhq6sSax5kco1eYk7mQemg
BF7C+XffAffmajElXM3XYhThlwJvKhN+7HOZCeFbEufC50DJEehf8InAR4tP
BnyamBm4sL4+eHThT/jIHKgCd7Nshj/f7wvQh73smEP4Z5nX0HtP+cFDeKKd
NfhJk1YLwrl9I9eRdYuM6cVtrHULc1atKNYtFWmajWQ9cO7rvNus9QAzdsIV
rB929VpAX17RA/2alGXQf/JyBP8yths8eu9UcOmxZuDzc3PA5TcZUOur3yPA
9y4SsyL89Yyb4B7zj4Gfq6uGflkzL3jO15Z6st7QOqq8mKw38uL3Yb0x8+rG
GsKP/zZbQniN7grwLyfqGgi/HiIK/eXHWuCHd41pItxIKRrrlvlul8Hztl94
T/g2vVrolySFgStsvVZH+Jl53vDf/Ood3tfrbHPUZ/eZB9D75haj/d/Kz2wk
3Pd1CPwdTYbgYxmiinItq5+AK/dQ9WS9hXNkfRLILRRJ1idnVnLhu3hcmH6K
8A0/FoKP4vmZQXiYuHAU4YtUl4Bz7fwKnlg6IoFwvZ5UrHOazurBhz/nmuzm
I0xmkeiNezys9bVq89tD38g9eNsNlPtUdzJ8Dqe1wGeOfQS419fp4IbcleCv
OtddIVzkJVWfE5N9wHVEdU8SPrZCBDxxAwPlbl2u5HI4iMmcPl3suIRDB2NJ
Qe/cSh5Wuz0PcyN8Y8ieY4QzPzbMI3z5R29XwsclHwL/8fIT+K+bPnguqTNf
8VxDFbUo12yePOajte0RW8h8dNDMBvORY6MaePEqYz3C9U5agV+pmgtukvsK
+rVda8CPnhcA/1anZED4oRgjcP4L4uBPMhdjvhtQeQxekvkI/Or2OOi94hUx
/7olhoB/floBrqDuDF48fjf4reAilGv/qRX8GR8/eIxWoS7hPVkymH8fGtg0
k/lrjGRzP5m/dvsdxPx15Ppu8MOx7eCzXG3BX185Cv7AqIDSy3qC+23UofTr
s8B9tArAszt2/1Gf2sSMFxr1tabzA1NYfW/kcRbfaLoH+htGkzFvXnohB71L
uxO4tEsbfCZetgYXiDH8QPgo5XLwNQ2eWAdarNwH/e1aJ/Cikp/QZx6ec0Jm
WhPT1Yf7dH7PB+bz9/0KnmSf6LEDvD9DBzxE2QA8WepNKOGTzD5EER4X/mom
4S1pivBfOCADf8tVD0KJf1jJDoxXPVdeJpPxKpLvHMYrd71p4BHaDhjHdkek
gC/VMQOvvtUFfYD+BXD1FkXwwIYf4IFz6sFN391xtGRxmzUdVQ86a5lLgqIM
VFn8y+eD0G/Z9xD6DPlQ6N8cugSupbYe5W4bJwTOHXAd/GbcCvAhJ17weWuF
wB3W1cJHbZQo9nFcy13Aiz5qQj+41RD6Kfzt2N/xFZthv2YfmwNepeYN3q1U
iv0df+0d8KaNF8ELtfaBC+fdBP9TFw3uKxUI3rQoGZy/Yia4p/4P7EOt28+D
nwimuGMHtZ+d51kNPpX/GvhniQLUx0u4F9zKzQC8dDYv9qcqKqbg39OksM/d
6/XtNeHT86+DPxAUA7faNBo+PEoU/+zcDJ+SdnnwU3cbwVv8hcCPFBegPryt
78FVNz3HflZhkfA7wi3y54F/uFAMvr9bG3zEHeq9VE48Dd7/9MNbwufPCAPv
62yh+Fgz6P8MNmM/rrhjFeqppKqM+vOIFUKfrpiE+mwsD0R9HLzEwMdfe6gZ
vKmNYRe07uGXPlY7n7/x8Qw3a5/opwq9wObnaP/SFBG895I7BvDff2My/FOX
ZcBH/oE8fBxUizKIz2n57E/E5328LXzknqmi3IG9l6HX4u8A3yw1D+1WNKoM
3GR7OebH221/MB/JR9ljPvqacx7lWstuLif60eOo/sM/WRHz7CNPa8yD/FtX
QW8eYV8sQtYnxpoJJSyecnBGtR2LrxbqwTw4Kegi/K1qYqHPNfmIc4Pgzkjw
1ao/MG+6tWdi/m0IKsZ82nb0PPQTjD0x//K0OYJ7/IoA11j5CDxwhTvq0//2
LeZl5V5rzMutKfHQbxvTCf/AB+NfkXqeOJtxldRzXw0T9TwtKlxL9Lwb5sCn
9dtH6G3++MK/9mg1fOwEqPXbE4MAtFtmYih4+bZr4Ovnrsb8Xl1UgOdKLWCg
nmUPSmPJ/JV1nA/z4xg9AcyPRe/mnCG8aM8UcN1pQ5jXDg9axBC+er4UuPtI
fui7Rp6MJzzvWS3mQW9eKfBFyzyg5xn6DJ51cyN4SJDPZcLXPOCnyh2ogX+R
8S3wsKGx4CoNFL9+yAz1bJJths/RHdT6gSfqeCThjnstoN/Y+Ax6iQv2lwj/
blcFffed5dDPffwAPmOXKUMfGfoKelXfwnekfa7Y70A7K03MRPu4uKqh/kK/
qPXM/DXvoDc/Lo55f6roTvg3nC6Fv4PlUZwDGMnx4txghZkP5hfDlB/gKUuS
cT6QkOAILv2wClzM6xXF4+3BW7sjwPmXdoMbLomg9olWauBDUavg//m4L7iv
HMUD1dXBx9qGgK+5awGe1KcAHtF+BDws2xd82wYZ8LuW28Hr908Bn+C9HXyP
kTc1Pz416SP8a/Bp1EftpSy4rJUc+ELdF+DvcqTAzR54wUdi8lNwc5/34FoN
D8EXy1Lt4PI+Hdz6YB3OW7at34lyl/Vkgo9QSwS3SabOeW7cqAX3jnKCz5GK
++DzQlIxvze4DoEvUf4J/+jHPNAneUugnqmJXNDPGFEPfe/4IfjP3K0C3pVX
DX1BSAR4ysck8HzFh+C6Qf7gxy7chT9PEz/OeT46HEG5D3u2gfudssS83xGy
C+ce6nzjcO7hP8sW67RbLlvAS6f9Bk+s2APe3EuddzE28qFck2+HUe6sDFno
l1/W5ybnMJ121DpQ4dFM6rxl6yeczwTbGoBvvFlztpTFN7Z+7oxRKmEsdVn3
aiuLhzQaQb9ylTTOZxbtWQF9j4IbuP9RZdRn0rx11Ho1yhbcuLYB5zBMfWdw
+61U/ZMeyuH8x9xuJ/iF6k6UWz95VQcp991aK5TrsXEE9AV7laAvP9wO/Xau
fpzzvCpTRv0/hOeCRz5sgP7mrO8/iX5wcx3WpVY278FvFLz7TvgfbQXo9ygo
4pyqJkoY9Y8emgH9qvUD0Fv+1sPz+jTMBy/acAx8xrXp0H+JUIbP7rTR8NEW
24vnrb5MrZMvOzvFkufSW3cN7flquWUxeS6vk67widGNwnM1WkyDz30FIfgc
2vAG/pkMVfgsXRLO5RTVzjTjdS7kWlrC6FsvM6uItW6MmTEVPj5zZsBn79YM
+HybKyNoz9JHLspcuoWl95OJlib6y+1c0E8cY4F2+8x7E3qjGIEhR5Y+nN/o
FfEfITJmDtEbfrmFdk42q4R/cKkt1vP3PpaD8+haoH0k5SaAC0osxPrfpTMa
+5SCt9R5mudyaZTLmEj1wykRZuBcJsuhH60SAX2ahjH4i5fpp0i72YYFaJ5R
KmFm7tRFf4hSkIP+u4qbPtGbympDbx47k/K58AT7EQ+zLeCWvUOe2ActXAl/
Lc2nVH+L2wC9g6OKIeGvfxehnfXWv6L2X1sOgSed78K55VpjVfAAEWuUuz9V
Hj5fZOZGkXoWfE9cQeo5vdwa73fJ5xHeaAe+RNQnRrsbPpPsG1Cfz3X+2H/l
mguj3VaaqcM/t9JhI+EjTKhzzgDHduhdTb5vIHwqtxP0IsKC1P6lVBb7Gk2P
Y/jeC4MswXeHfcI+Yn3cfvAJRa7g39blg589FgYePo3al60ruAf+YcZd6pzc
i9rvhFQdBffybQDfLeQJvstECOWq750G/vyMI3hu+DLwWO4fGCeFGtaB9556
DR/lqzegb0y5DP65yAM8MfAR+JgcH/BnU9zBDcuocjUv3gI/EykM/4OqH+G/
PuYl2qe17/cmvHcFLbTPztX80I/LedBH9AOuVhhvP/d04RxVMVwU/tPe8IE/
qhbuIedy9jumUOd+9sKYl10qjXGOd2YRda5Y81UWXD/EHueHR35R3FxjIrjY
E8Y3wrccpM8Dr6mAFyTn4vzwgKE89EsnUuce34Svo1wRCzHw58HU+udqwgGc
Zz7O5AL/9ZFa/zAEZXHeuObmRPCX46h11J+bOvAXUqPOJ6f364J/M/0An0XV
y6EXNGlGuRsWL4P+TO0i8P036sDfx7WBLyj9Dh/frSvgI6xyCD49XjrQp64u
gX5nmBjOM/farAD/84pad3VHe4EnCFLnrku+68NnrJIi/HXGuED/wdAT+oTr
8Th3fZxEnbtKpFLnrkOOLeBauRvBzyykzm1i9EehHQSEqec9FUqdu7p5XAe/
P3op9DuyqXpucbzVSXhz62boM4t8HhHeuf8SuOQMPfCBHIrz/GjGeePErByc
Q4paOGJdd66nDPzcjHzwxg97qfX83Ei8xx9NVP/5nUythz/qmeE8c43iY+h5
BDWp8z1DbfA71gXg+0SpczMxCecvZD3vlFZynrWeZw4JyFL7Duu70NfdTIJe
X5vyWaN1HfWxbbgEHpd0D9xmfix4YMwFcMH+LPAtWwfAC+q/gie9EwXPF3n7
mZSbnTvuAil3Zdfnd6Tc6fPyoV+28yb0nrfOQf+j7h64lk86uNzSUPCCsddR
z/XOh8FNbE+Aa7Ulg0/09QI/FRwO7j7PHj7SNhY4N049E0/tm4T2ged5m4Nn
u10G3+NmBZ+yV6Xw+aU+HT5JW2zA52tQPEeS4pPGX0Z7Jhhw4bn2WObhudzz
E6BfLUidM2sEjYDeb9dm8Mcl7eBOMhQfuSp+3OJRVYwFqtuVXqh8Yo6dE7y9
YQRr3ryShfPn6xmx0F/iE8a5dDq/geMIln7ZytI7b1h622DPcqLPU+PC+fmt
sf54rg7RcuzvRG25xhP/TIt8+GfXFVsR/Ux9W7TDjshp0OdLDqIdZD02g69x
UQCvv/8HPHGxFc5VjJTKcN7ixROPfe7kG4+ht6ilnvfmHH08V87NBdDHCm7C
OUyAHXV+Int7BnjVKm7wC5/rwF21TajznHtf4F/VTJ0vTdo/H/z8vkbw0umU
3uP1bPB9OjzwMQ2tBP+/us07HMv2jeNGRmSU0XiNZEQKKRnRYzUUQlHGW0Sl
UPKSkJIoREZFw0hGEokGEY8USQmleonKzqgoiYjfc32vfv+8x9G/n+N7nPd1
X/c1znVXRh0G37bJG7xcaAl4r5kDuIALD/hRL5qveJWpAV4jvxn8dQF9L4eN
3z6gf0CsB88VC9ZAnqFQf5CO/5YL9CG1kchvfLQMAU9YTd/Lw24L7Oxp9IEd
pzAO2LkTaY0+gR1tQ8iTHFsdgTzPV/9s6N1r3JF/6Hedg7yEblI6eMlnc3C9
c4HgEpU0X2HJlQd+J4kf+Yq4Xi2M86oazZMUcx6H/byFq2l+Y6SZ5sGOqUB/
QqAX/MLeLHANbXPw1QG07yLynhzyG6nXGsC3b1KHXrA5BeP//NyP5n+e5oPf
2SAO/V3Z1ciHVDUdhB2pp4qw/4HDC3khY85DmLdVRm/BW8IroZ86GwN97OQl
2BF7PIp8jllkH/QeCvfBNzF9MJ5lr4+BP29WQ55hXYAU8gwdgwewDmtSfJGH
+VJuhTiaEU7zDGGCHMi3qJ6YAf1dfpqfuV6wCHmJrHdRyEu8TUsB70prQB6m
ZOFlcB6Ofrpf2K8hD2O3tgF2lD2SoJerdqf5EMED4DYH48D5vG+Bey44jfFw
dRVhn4412yAP0yqTSe2M9MF+jZQyxqm/n9ZHOPRpfaRUYjbyMNvC9GBHIP8p
9GNXaR6GebIJdmoLu8GF3edjfjIFboFLGp0Gn+uaBPtbytXAt5m9AL/H1neO
5BOabsgizyCjyY17ZyebBvjA9yXgqxnU30h+vgh5jHnrxMCdnH6BV7uOghcP
dSMvMV9wDezEitsmIT9ToQ19uF4m9BK1N1DHMQ7jAG/TsYC+4roR6jhH+2h+
ZlbOSvD78sbIq5hrnwEfvzWJeuv2ylbkSfYZDuK51hHUz+mRC4SeTb8KfMzC
DlxR/zrqOCb3r8LO07EfsNPYdOgq4VOdGdCff24FPXd/dDrhQZ+HaZ7nogr0
esW0f6ahWBo8q+0J3mtghT/i6J7FPIijxa3D4X/OyRhG/D78wgvcp/EMeHLp
eejZtg0jfjdzpHmS6vpX0HvuNoF+bd4AeFACA/pzRb7gPY+0wCPkZ9E8jOg8
mq9gdNP8w3lz8P0uA7DveYrmMYSu3gR3i0yAnhkaDX94Mq0Jz43/xwqcK4bm
T1Y6nIN+9lLaDyMf3AQuoRwL3nF9GPqSVG3YGZKk/S2FM+eCz+en+Y0cYT3w
rHt6vYTH/k31Wel3aR/L2hHoZ6oLgDfW70LcN9nNiXiW28kVcc0yHiPwsL+m
Iw61qlgNvkXLFnzJun2INx26aRwnLxwC7mIYj/j6sAXVa7BvBVfhmo44VEvW
ENxObhzx6YGhY7CjOHsAvOFNM/QjG2vHCP/HdAbNY/QeR9xdtnQ69NGaBxCv
zdiQDf2zlrBxwmOrFKCv9/UBL5Hzgv51IY0Ho/MPwU5JVjTeVyAkDnYcrKsw
Hs8pb4yz87M84hRLC1nY8W+cjbg4z8EWdjTnm4Hzpg3Avk4cjYuzN9P6YICk
LuJKHlcP8LPca8FX/pJEnNspbg2+874ieODZBYhbTYNpfsZ1RAG8/Y4Y7OgL
uYPXWtE6Ixsftb+8lM6z3dxhxFkb5mQgbh3voPO5PVQZ+hadWMTLDX+PIo5O
bxoD32h1AXXDx7oPMA/fI2zBc9NvYzxfRWjd8Ox1C3BOfw08d2Ilnc8rlrqI
o9dd8obepfEg7Cyzb8R4DOVpHL3Lic5npPAB2JE4/h5x9AYjOg+lFwPALf+2
A/ee2ATO+9YDcaI3+zPEg9/uh9H9uCAeXHpFEvig0Xnw55JUP+b1Brw0g9Yl
m26fA3fLzgD/XhQFrlp7FTyirh/81RNJ8KVaTuBKNmfAz32icW7XvADwb28D
wLnNaf9YcsAwuHu0LeJfcQ4t7K8Qu9PgOrxboU8xGYc+9/Bm8KSxcPpeoZSP
57aBTzbRPEBsiDA4Wy19L061MHBvgzbwOGFD1EMvSojgucGrdPFcjUIhcFsF
GXCLhh3gXfcPIg56MyaCOKjdSQrn8Hu+TYj7EkLkwe8Wj+G8zcnrhP69jAJ4
pfAE+E7PCsRlbR7TwD/Oo/fCu9FdiMenNlmCy5YnQ6+U8Qb2ebfSuFsygepj
ZMXA3XNpHBpsS++18LZsxKfe85mwE9bPBjtLlwtiPGd5RqBvuEz7hbo7hGCn
xYza166m/GHcQ8SbMgk3YeehCzvs7PilgHj5eCCNZx/NNYbeJ5AJ/UCYJvi0
JhqfGqdb9xJ+qt/iHOFR69RxT5kWPKLxVxSNE3W8POFX6Ol7IE6p21MKHiRL
/SWzyCzwgOc3wCee0zjxVEQc7ISl0jixIYjGg3L5LeAjHRyII3a/4ALP5X4C
nsHIon04zjTus5p6BPveB33B51yk8d33X1HUTrwr7MxVD4Z/skXPDHrjxEbo
5RYpQO/BQ+NZT8eX4G8jOcGjmul7iR0aBU8QaYedHWy5iLOkHiaClx4QQZx1
ZN8E9KZrzuO5i6/cgp92c9M5jCexYBe4QTgdTyuPB/z/aedz4ecrcVL/PPyL
PLiGuifiglW7c2g98YUJuNIlOXC/JFp/V30iDv509Qrwz+tbweUm1MDHqnzA
c59foHGB8wrwZY+v47kvx76AB3yWAHc+1QdemvoD/MvjG+Ay2U6wEzDtE/zn
RY9Nwd2Yg9DP9qV1zLuiNJ5yXZxO6/sXady0qHYA3DfYHna+isTDDu/O1bR/
YC8fuNGKG9CvOLu+nfCy0bvgjiUdooTnp2mCmxlkg9+exQU787ys4VfX7FWh
/i27Er5jgWgQ/ORSMS/4q6PjS8D3yz6Ef6tvcBo85kYUvssaPiH48wVli+E/
dxob4vva2ATBTx6bng99XRNdPzs9fWE/yCSVxgUfqP+s2rcW9v3k7ywn3LM0
Ff1gV37sTCX+3sTJB/APd2+n+ajvFv3wex+ptYHvN6J+bJDCE9Ql+f0C4R+K
LOT93UfUhbrhQk1RcE5Jfei1SrkvEO625hPsVIauBxcuq4c/3HdoHLz893NV
K67B770SkwUuaF0D/qtKC/fUL839uE/nxdH7sewo5Yk3D+MePBNM78eJHCnc
j3sFeKCfxuOL+5F/wz7obf6Jxn3Kbt0DO0uNHMH9LtrAT6g9TOsOxU51uE/3
KUvhvrYqLwVfYpEDHqsTjfzqrY2huGcdh+xwX9gaKOD8d3FRpPXHQ1rgyWrT
waUZPuB1o364L6bHvcL9csnWDPeF+mAU9EHWHuDsY++h7+ik/T/XJDaCryyd
hbrYz5Rj4E9X/EXvndn80MdG1yKvqyt3A/neupsFyOuaaApjnd9V18C6XW3e
g3XuZugPnm+Uh/0SJkr7W76JqWKd93qbQx+/WBfrfOJxEPIDuqfdoY+xF0V+
gPmxh/LLvNDfcV2BuNhjjRfsR1lWQd/bS+13d++DvmOPELhpvC3szMow/KjB
9YZhOUtvRc2yXsaxUCbyS4X2i3sJl93epkF4VfM4+FRXH/i7OZPgjQo0H5VW
59ZH+CnOD+AfFp0CX6w7BX1hlM9ywv2KBpwJ3ySvhP40lSdr0M+mOu0s+tle
983e/ILFj/rMGRZn8c4jPeaEN5nUoM8t1akO/Wyt85ejny2pWuknqR/VCKfL
sGvVMbd2/1Ii9aPYppdjhIfe0ABf++UC6lZhr0+BKz+OkSZcKd9YmfDRHg/w
mBn3/iL8qMpn8LMGJuATDlqShM8wnwBfouuOPiuD06ros3L180KflfbDe+CZ
FV3nCHecHwC+R/WbGekzuXhgTszX763M8pU56FeRdv4IfmTfTPDTekxwD2On
sGAWPyo+Q4FvpJVZ6ZardoHFZdalQl/fNgj9uE4Z9Ls6fpkSvnB6bTThOyqW
9xFuurcO/OBgJnikcQR4Pu9t9L00JbGjf0bpZwPsuBZXGRCeluJzm3DelB3o
hzHxZINeI6UFfTJVbz6CvzsilUzeN++FxUnW+zLarcfwvvU++8HX//sJ3Nal
XoFwO1HfJMI1ptrAE9Wo3q1mP7iV94MThLdd8Ed/2oCSCuw42HdAPyigCH18
nCTqkrU5zTWkbjiRl4fvG+QgDJ4so/KM8GbDRPBV4iqoM34L/fCU8ERlSdQZ
gwKHqwJZ62r3kOwp1rpiFmoMYR222Ds8Jlwmxxq8u+U8+CffjmrCffijIwjP
+0L7LdN44pMbWDyQz/EHa90yh669x7o1fSYH+z6vVaA/sP7SUsL1X5eDz7OK
B59h2gU7owZhgiQfG3zrw2KSjzV4c28H2S+rDoghTxuaswZ52g2xdN89apuG
/PCdcT/orYtVsL9uMi7Wk/yzl+5d9Oc8tW1G/jku2w33Wmm5J+6vwi1ncK+1
ua7CvRN+pQz3gnMO7VfJ+VGNeuj7g1qoh968o4V6aF/vYpzn3lnzbNCf6dKF
c56jypDGBfp6OCcP3ZbHOfljcjrOpY58JZxXKtnfcS6F7BbZQfoAT++PmSoc
aGUIpDujDzDzaYsT4cp6w2xFLC4kLQBuL7MZelmbReC6ZmWbCHdwjjtM9sv4
8bUmrP3CMOF3Xkr2S3hJigTp15XeWY1+3VbHB+jXXXCjX4nw/B914G+1TcEP
sHsK6cm0M3vZAzvfDnQyzCLk0c955H63IOHWInO7CK/563sM4WEcBtAXHLEC
L9MyBi+/wEBf6MvoKPSFzlIaADe+LDZF+BbtIHD/In7wl45uARtZ40kQjShk
jYeZtmcS40no0PcnXLkmE/xF8mvwMBOxQ4TPauUuIpy/3Qjc4uI39FXa78hA
X+WRESvMW0TR+v2E/3j2DvzzvGLM29INMiakXnB1V1/RK9b5rHwytIGsH40i
Jjep40fEckVYsc69xrUG0mS/fBo5u0SHtR/H/W9a57DON7v1k85kP6ZyGq8i
nP+e3loWZwQdHAd3TxeVJvOssb8E8+yp8QjjXPYuVpHwzM4L4MXjBeAnmrUx
bwLcIZif/tlTmB8J82Dw8VYL8JtDX8B/mn3C+2bvKMZ7dZnT971+SQfv27uz
Alz66ju875DQv1hXvR8F2Mn6EeThhZ7vZ8vsZWY9jGQ257Jl31oZHbaeESas
fcFr/xPfPe3UX/i+vEVv8dw6S3l8F5vvlfgu/TZXMH5hvi4eR9a+5ov6Ub3H
rZ+pKC+9joOL9V4OiVlaP18zBoM8x8UUexl2w+u4lOd+YHyel3idcId39T8J
Z/qogf/Jv83u3InvtepEM77XtRb6vS7/wc8U0E70l4jsY27eUBLwVLmOoTZx
Yb2g6AdGj+818FQuCX/Cu/bdBXdL8EPfyC7VavSNaG5Zh76CK1pe3kT/j+2l
OpaemViYBL1izHHwI1Om4PVnIsD/709O/sef3MYswbrS6l+FdZXTro91tf23
X2f3H79uoYtrHZmfUK7Ir6z5YUZZ22B+dBrVwAeep4Eb/jIGv18ejLrbCTcN
1N2+uvnh3Pu/P3bntz9m/NsfG6ngwnki9r4C5894/3ash4zje8Gj2kXApwVI
g6eN3FpA1m1KM13P6nOu4rvLlO/COfCv22mcG5dN5uLcUC+wBNdTLwOPqfyK
9fNJex/W8zPPrVjPOg8mwEX7LmF/+fhWY3/Jz3yDfaR7JsqPrLeyXVew3nwT
OvDc+1IdvoSbF9SAnxy9Dt44fhv7YliT81+y/rd9P4bx/+n/WelFg+g7fRc/
hvvCZdtO1H+Lf//PKPqf/xmzf/+XN/M//+WFKOugL8VwhIm+FEsOc6wf3T/8
J7X4D//7nNpVW0r2EXdFbiVrHzHEIxdiH7UteCVL9ukxqwcXWfuUadB4I5zs
U3cteZw/7C1bcP64LZnAvFUpzUc/0iGpXPQj2WvRfqQ+kXbUSfMyW1EnHXJV
R530f8gw0Wo=
         "]], GraphicsComplex3DBox[CompressedData["
1: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
/x1ftKg/rw/O/Watx/RB7Pg4Y/NxXh88MEPzDtMHcYbGz7uFvD4oK+n1nemD
ePqnnBkneH1wn8t5C6YP4jWBdZP38/pgyEnX80wfxK+tcw2SeX3w5vOlopEP
i7CscZmhJK8Plj44Vsv0QZzyKi+0hdcHG4506TrcOcF8/tidNzQ4nKfu7dJ1
eHvFmRajVg8NDmeTTV26DuMgu2e3HW5rcDj7r+zSdVjW1ONwjryPBuCMunQd
1pL66i6x1U+Dw1m81zJW1+GxJ6YvEam5q8HhPK26S9fhJ70KjdqK/DU4nGNT
u3Qdbt4vI75n3T0NDueCV126DpcK+i0W07unweEsu7ZL12EjkZoR2774a3A4
G9R16Tp8dtG+8Ruj72pwON+c06XrsKdl3LxaaT8NDmel4126Dlu4TuidutJb
g8N5yMIuXYcnKZy8purnpsHhfM+vS9fhiMHaU7cNaFXncL5K69mC1DPmcC6g
9byN1DPuWc+6pJ4xh7Mdrec5pJ4xh3MhrWcZUs+YwzmZ1vN4Us+Ywzmd1rMz
qWfcs56NST1jDmdVWs9XST1jDmdTWs/fSD1jDmc5Ws9TSD1jDuf/aD3rkXrG
Pev5OalnzOHsSetZhtQz5nAuo/WcSOoZczinUn6+Q/gZcHan/DyG8DPgvJHy
cwXhZ8DZgfLzM8LPgLMZ5edzhJ8B5wjKz5cIPwPOGyk/3yL8DDi3UH5OI/wM
OH+l/NxO+BlwPk/5+SfhZ8DZkvLzccLPgPMjys/LCT8DzjcpP28i/Aw4R1N+
fkD4GXA+Q/k5mPAz4NzRXW8AznlUb2CiNwDnt1RvnCN6A3D2onpDk+gNwPk0
1RsdRG8AzsN8iN44QfQG4GzVXW8AztpUb6gSvQE4n6Z64x3RG4DzLKo3NIje
AJwnUr0xh+gNwHkB1Rv1RG8AzsVUbywlegNwbqF6YxTRG4Cz6EaiN6SI3gCc
Val+Xk30M+BsTvVzB9HPgHMw1c+PiH4GnEvtiH7eSvQz4CxD9bM40c+Ac+td
op89iX4GnD9R/byI6GfAeQ/Vz6ZEPwPOx6h+vkn0M+A8mupnGaKfAefDVD+H
Ev0MOC+h+vka0c+A8xSqn7OJfgac06l+ziT6GXDeQPXzeKKfAWcl6gcziB8E
nGOoH9QifhBw3kr9oBvxg4BzmwTxg1XEDwLO2tQPahI/CDjbUD84jfhBwLmZ
+kFl4gcB54XUD94hfhBwHkD9oFh1lx8EnBdSP9hA/CDg/KOY+MENxA8Czt+o
H8wlfhBwDqB+sJb4QcD5P+oHrxA/CDhvon7QlPhBwHkCnW9YkfkG4BxP5xui
RV3zDcD5KJ1vuJD5BuA8ls43pMl8A3D+QOcbD8h8A3B+R+cbp8h8A3BeQ+cb
78h8A3BWp/ON8R+75huA80c637Aj8w3AWZHON8LJfANw1qTzjUlkvgE4G9L5
xncy3wCcx9L5RhaZbwDOaXS+cZnMNwDnb3S+8ZvMNwBnbl7XvOceO68T9JzX
TbApY+d1gp7zug33FXIdL3gIes7rrn40EZd0uSXoOa97U/ZAw9nPW9BzXif2
6To7rxP0nNfFNijvH9LqK+g5r+sjE8rO6wQ953Vlf6Vmaa/1E/Sc1+1G5ey8
TtBzXndMPJud1wl6zusKnj10TFPxFvSc123x9GPndYKe87o9xnbsvE7Qc15X
0M+Gnde95XDe+vH8x9ybJehOUEWjduk7dNN/xsPj+5rwT/WYuAMHC1CE3fun
SZJZsG70ecMq1p/vLfGJ+cLwOpeXnZFpEeYfytHAuZbaap8+oOogCd/d83/g
VaPyTMQXFaPwfRKKeTJ5sL43dEqASGMVOvNe5NaMx7FI42mtm37/VuwzbENN
cXwp2iwfYnDMvRDW9weecb89pg7V6bnXj3f9jByff7m2IOc3bhqUcvDVhgq0
2cVgoJV3May/2/vq4drRjai36fI+U00SUOGbh+cVQ/5gYcuhnmHfqpA12iH7
4GYprA82kfT+NacJNf4etWzxgSQ0K/qqpdSZTtyR+GKMiGcNatqxRGmacDms
f00VmWz/rQn5e9nt3Lc0Gb3fEz5XeFKvqJKUu8u3eNSi12M25HbGl8P6oycu
2QXCzehy/3cvvM2TUXWFf+gJJ+GoScfvGC0pqUUGp8+aXelXAetJClVBpjFN
qOjoH00ztWQ07IDrtIbW3lE71j8Zrn+hFhXuaKqY+6Yc1jMOh85+M6oJbZy/
q8N2fhLSqL8QaLyjb1TQ43a1DWY1yD3OQm59QRms2/vunqiQ14DWlUkvWyaV
gPaaHxmfGycS5Z6yQfOyQxXKnHq+b9iOUlh3cZdWP7miFgXl/TkknfYJOf7Y
6b1GWSwq/mexXvLTcvTxUMfTHSOLYX3iJ2Oh1tpy5DjcLG1e/Qf00tJg5CfP
flEKChcDjrvnoIHvR5jnKL1ChW1arkh4QJTetxXy13YVo201RWNC1+TB9ZeW
ZIWMWJmLklakTxx/106Tu37XIrH17FwjTOZX0xqmH3L1vN7za6mpeQpatSfb
fNnYYqhbf62V2uy8I2KM9A9GX0PdvjDe0BG/OBWpzxyquKJ/GdTnyFm5UtNH
ZKApf1YU6/2qgDo82bFD2aEyC42Iu3RrTXk11JtteHuI2cNc9FI6ZrRKdB3U
1fv536Xc/PLRvs19ir0SGqB+DtzuW1sQWYC+LLDavvlkI9TJpcCMxkFihaj+
fFjLiPuNUA8RAydbXrxXgCTkWiLnmzVC3i+mje4/yjwfvcyrrNW+3QD5XTJF
EGW3JRcdbRu2fMOROsjjRTHpYyuUstDamEXL2yZWQ74kpO89CByXjtJLTvW/
cy8F8jJm06wR+SapaNXkU7ZvlcogLxZTFrduWaeF8rTFLAcyfRLw7zdr6Kqa
C4KOA0Vni0aVAv4KsyUzNcSS0fqOt25s/+TwH2RstDixzUYgv93k0rrNFYB/
XNQli9X9rwp01tRd/XSrGvA/P/axf/Ioe4GZtoXTgpw6wN/SdHy8qZSTwO7u
8+kbLjUC/moyc6RveF0X3DQXr9MKaAL8HztVqwWrOAuOBp84XqnTDPiL28nH
GjH9Jvi/eW8tTjYD/tcixFs6JzsLtvl0uBxRb/537vS/VOtcuC5o3HFxjoFd
E+A/6N01j+b3joIvt0bbHd/QCPjvqv/hXaR/TVAyyLwpqm8d4F+ysm7RDMc4
VDdOsiPsbBbg731K8Umt3GVBbN9W17KLFYD/R9kJE9g5SHaC28ArTP8En67q
8NPMPAWP/DljJr/+TxlJM330vMCUzEsA/wzfmeqJi1NxyKS4vOW8+p/QP9V6
xogMrLV55zV+/R+xsIxxrMzCqfZt8/j175o8w+zQw1ystDf78Rxe/XuuL2px
98vHj7eEHeTX/0VL5dyiyAKcmYPl+fU/bb51jaRYIba4suE1v/5HPig3trlX
gJ+/NLbm179SwZDy0eb5uGzfqlP8+g+zUrKy35KL2630Ctbz6l++vrhjpVIW
tuo0r/nNq/+AowEMv5wS5C0lfMPhP+EcWldgkoo71geq8es/YEOtSGhQyVtJ
Mi8B/OXnX7AxPViA18wf+SGR1zeLL0R+ZecmiUa7NvHr/5nCuTSmP2KvjlFS
ubz+mDZzwb6S+FL8vUgi4iivD7aotbcx/Q7f/OC47TSv34kdmjzn2TfGP3yt
3BrI62vGmQffMf0Lr3W33D6V179sBxm0MH0Keywe1Jffpx6eHdZPu6QWX5Zq
d7Xl9aOnygVRTN/BH3vrDOb3ndf7QwqY/oLtKxvWrOP1l8wDsRlMH8HZMqO1
Q3l9RK5kfAbTL/AUkwki/H6xQCb3vZJjHBau8vbj1/+3zqfOTF/AWZP6ij7l
9YVcAw/E6sWSC+s+2/LqX++hUgWjZ/D4rOC7i3l6ppfSh2Z2nvJovcdoPv97
GbfkMroFL8nFHqo83VIl+/Yro0+wccE3+6k8faKaezGO0SHYtrji/DieDlnR
YhzD6A1cEKmnNomnN0Se333N6ApsFu6lhni6wv1h0FJGP2CbKn+dvTz9sDTn
8m9GJ2CZeh3P2zydIHzoWByjB7C2kN+kAzw9INc0zIDp+/iI06pfF3l933Cr
whamv+PicDPbxbz+Pn+U4ADTx7HY2C9jRvP6+Mn/rKY/GJeO/2SU7fbm8f+b
EfGTmD6Om/Sbxs/l9fH2xPWbWF8UskryvASP/zn8pQn+mMM/cOVKU9b/O2fI
PfjE040c/gsI/rgn/tsI/rgn/mcJ/rgn/ukEf9wT/90Ef9wTf2uCP+6J/0iC
P+6JvxbBH/fEfx/BH/fEP4vgj3viL0Twxxz+o2/UpjG6CKdGzpyVydNFHP7V
BH/M4f9oWL+TrP9XuX7FXp+nfyZS/jEg/PN/+NsT/MG3hlP+uU34B/BPp/zT
TPgH8P9F+ceD8A/g35/yz3jCP4C/CeWfNYR/AH87yj9uhH8A/xDKPzaEfwD/
MMo/Hwj/AP5vKP9cI/wD+GdT/ski/AP4y1P+mUz45//wjyf4Yw7/NMo/mYR/
/g9/JYI/+Fb77v0X8O9N+SeE8A/gn929/wL+k2j/RaT/Av7HaP/9Rvov4O9B
++8M0n8Bf2/af0NI/wX8bbv3X8BfqXv/BfzHdu+/gP9s2n9LSf8F/J/T/vub
9F/AX6F7/wX8T3XnH8Bfgfbfv6T/Av5/Kf8EE/4B/LMaTw/j6U/Av6x7/wX8
ewVnL+HpT8B/ivH8Yzz9CfgbjLt5n6c/Af9HblqJPP0J+P+MWyfD05+Af2Pg
CA2e/gT8RfCaOJ7+BPyLG1VbefoT8B+iXFPD05+A/8wp9zx5+hPwN16Y4sPT
n4D/Qtp/e5H+C/g/2x/ylKc/Af+C7v0X8Nel/suA+C/A/6PrSiue/gT8A6n/
QsR/Af4i1H/NIP4L8Dem/mss8V+Avzn1XwLivwD/IOq/DhH/Bfivof4rifgv
wP8E9V9NxH8B/rep/xpM/Bfgf4D6L0z8F+A/nfqvU8R/Af6HqP/aRPwX4H+6
8Pgknv4E/AdQ/2VA/BfgP1Z1sRhPfwL+VXRu85HMbQD/UdR/bSb+C/BfSucz
sWQ+A/h70DmMMZnDAP6VdN6yl8xbAP/W42Su4kjmKoD/dzo/6STzE8A/k85J
PpE5CeA/hs5DdpB5COBvSOceDWTuAfjfofONe2S+Afjb0zlGGZljAP7RdF6R
QuYVgH8S9V/NxH8B/kvpXMKczCUA/xfUf+UT/wX4G9F52hsyTwP8b9L5wwcy
fwD8t9O52UwyNwP8d9P52D0yHwP8TegcbNTqrjkY4B9F512zybwL8Jekcy35
tq65FuCfTOdXAjK/AvyD6ZzKj8ypAP8EOo/6Q+ZRgH8anTtdI3MnwP8qnS/Z
kPkS4H+dzpFSyRwJ8O9D5w/FZP4A+MvTOdJTMkcC/M3o/KGOzB8A/7X7ydxh
wM8PQ1fVuAg4/DfRueV5MrcE/OXpPEqVzKPgud96E799Y3M647/dBdxzd9C5
UwqZO8FzuTnVRp1jCuPv2gm4+3D7mdHXkN2PJrefv+qbBrH+fLpN9ZmDDF9y
6wF+d1+wPjxcwzuL0QXgR1aL1m7v8uE/VqsoMbwIesxURYz14dHBws5ODC9y
9fDdtvQE68Nnb9FZdZjhRa4ephv1U2F9+LFdG8s9GF7k6sE6qKgv68Mrdi1L
LWZ4kasHw/6KXqwPD7JO3TeY4UWuHmZc9N7F+vAJzdpbLzO8yNVDbnCnFuvD
TxYNTB3D8CJXD/HqNUGsD+8/oXKTA8OLXD2Ue/Z7w/rwzPyP0asYXuTqgcN/
jMYaFn9NDv/7L7MM2N85/Xic+3nk0Xfw+5AbtQuGsf7cQjLmB6MXwKdcGRi9
ivXhciqFJYwuBpzllvk65DB+u3SqvrgEw38cznlYsJf12/MWPA1g9C/grLjl
kQjrt6/pSS58zfAfh/ObUY/+BDB+u7Iy7DyjfwHnGUrOrYqM307ZvHyYKMN/
HM7e6w54djB+++/UySu3MvzH4Ryxe/4k1m9ftU7azuhfwNlg7ff7Kozf7hhr
OcKA4T8O5/CWRzWGjN8+F9Nn1kaG/zicA93LS58yfjtv7rkJtgz/cThv2Pni
6XbGb9dmLBqTwvAfh3PEaOmPm4Py0XYV9epAi0zA8160u9UTxm+73CiJY/kP
zl2Dw+lFjK+eeFvkF8tzHJ7B00u15jL+OfXl5UaWz8DHHVATUWT888V0kSqW
zzg8Jz28/kWa8c+zflwuYvmMw9O4SH/dRMY/v9bQSGX5jMNz1KBtcxYw/nlo
7oFPLJ9xePo5ztQwZvzzn6Ht61g+4/B0zhe3u8X4Z9cGoX6Fwv/meP5Lvo/Z
z/hnP+fIDJbPODybVBf/PM/45+wnMdtZPuPw1LnlFriQ8c+DX9lasnzG4Tl6
fpj5SMY/z9o48BLLZzBHHViQNKhPChK6rjcp8mER4Flr+uzTHMY/+6ifU2f5
jMMz/92nT0uYPrHj5cZ0Pp6RV2/Xz2P6gezgvZ/4eN40MBs6nekHBf9ZvOHj
eWwUmifH9AOf99ZP+Hi+u7Fy3BSmH/x67PSSj6f4xhythUw/EHHKCubjyZjV
dSZMP5iltVGVj2fMn0sPvJh+8PujeHUBD0+RSL3Zpkw/2LtC6RUfz4VlG9pt
mH5wTHn3Ij6eVQnaJtpMP0jp/KDFx9Ppb8nHMUw/eJxptpaPZ+aQ9sTHRy8I
bLXIey14bzhbyUqV6QeujSOH8fEM32WmxuoeM/UJk/jn/Vi4qy/rby/KPr4j
zjvvY3pv7c3qm9Xyn6fwz/ufqYefs/52jEJ5+Cveed99dQJm/e3b797lYbzz
vuDP1ljW31oauh4U4Z133ZnPDrP65kLTSd8tvPM+8PMbIVbfqJ7eFLaEd96/
h3lZsfomdcmyA/q88z41S/k162+PSxg6bOCd98r7q+6z/vagz6Brl3nnveWA
sxGrb0bVCbsm88774siaLPZ3SHNzNSte8+pzv52FM+tvh+0/u5l/3mc/6mPA
6viaSiUzM16fuhpS15vV6+m9P3gl8PpUfnD6c1avv5fZGD+d16fmBOP/WL3+
aH5tuwOvT8UuSi5l/erGxcMdDvL6lNkWowesXhfR3S/qzutTyyTuLGT1+ka7
MaWFvD4V2Ncmk9XrnxunHpTk9an1ddPvsHp96Rbbg5d4fUppwu1nrF5Xzhnx
axSvT115EzqM1esfvh2/c43Xp/x2Z49m9XrfP53zV/L6VHXM/DPs7wa+vNzS
m8+fGlGSO1m9/rT2ZUQ+rx85mBJfqnS5VUpjmrsGh+cn6j+ddPqknX7vqcHh
2Xct8Z+N/Qe7RG701uDwXLiU+M8H5Y6BZyx9NTg8O6n/rFEbMVJu3l0NDs/h
R4j/9FIOFqq19Nfg8Gyh/nOttMrgDVPvaXB4zthP/OfFO0smluy4p8HhWUD9
54j/dMTOjr2nweFpupP4z7rT8bPGbPLX4PBEt4n/nDT31B5fkbsaHJ6hksR/
Bq806BD0YvZP8bQ+Gn6E/b1L6enh10bw+vtBEeI/+yv/d86w0VODw3MOrc8q
Up+gt+1ofX4j9Qm6uoDWp4DUJ+hqFVqfQaQ+QVfH0fo0JPUJuvogrU9hUp+4
Z32uJfWJe9ZnHKlP0NUbaH0uJPUJunomrc9ppD7/6Wpan5jUJ+jqu7Q+hUl9
4p54FhA8cc/6fETqE3R1BOXP/YQ/AU9Lyp/nCX8CnmMpf64i/Al4/qX8OYrw
J+C5h/JnJOFPwFOT8ucxwp+A53LKn9aEPwHPQZQ/VQh/Ap4/KH9+JfwJeE6j
/GlB+BPwrKL8aUr4E/BspfwpRfgT8Kyj5/0zOe+Apynlz6GEPwHPuu79HfBM
oP19HOnvgGdI9/4OeNrT/n6H9HfAM6t7fwc8FWh/70v6O+B5g/Z3ZdLfAc9U
2t9/kf4OeA7r3t8Bzy3d+zvg2SuR9Pdk0t8Bz/u0vz8i/R3w1O7ej/79Ppb2
dxfS3wFPQ6o/FYj+BDwdqf5MJ/oT8Iyj+tOG6E/AsxfVn3OI/gQ8Naj+jCT6
E/CsG0j05zCiP//Nsan+7CD6E/A8SfXnDaI/AU97qj/vEv0JeH6k+jOH6E/A
cxzVn8OI/gQ8f84j+nM20Z+AZ2OZRjJPLwGeiVR/+hH9CXiepv5oGvFHgOdg
6o9qiD8CPFOpP0LEHwGe46g/ukH8EeAZSv1RM/FHgOd46o9yiD8CPJ2pPxKd
1uWPAM8H1B+5En8EeGpTfyQm3eWPAM9A6o+uEn8EeHpRf1RO/BHguYr6ox/E
HwGenRJEz/cmeh7wvEH90U3ijwDPX9TXLyK+HvD0pb4+gfh6wFOH+voNxNcD
no3U1xcTXw94VlNfv474esBzAvX1nsTXA55W1NdL7O7y9YDnaurr3xBfD3gq
Ul+vS3w94PmN+npv4usBzw/U108jvh7wzKe+/ifx9YBnEPWbh4jfBDwdqX+/
Rvw74OlP/b7kky6/D9dvjwpewH4Pln5IaUzU+mj4jmbP887p7Pdg2n8Eh8LV
Y+A7mn0ha2XY78Eiruh9eCD76d/3SncDB7Lfg00cnj/Su288fEdjk1Odz34P
tvvWuQOFtonwHc2e/h7D2e/BSjeOTlMZkAzf0cjWdtxlvwd78yIsf/2+ZPiO
ZtNvwSP2e7C++z8m7N2VDN/RbNL2m81+D5bv27i6vikJvqORkg4TsN+DxXjc
iU9flgjf0fhs/i7Ofg/2tn/R7EifL/AdzaEveyzY9+W5l75dmOkYB+8N742R
VWC/44r4bWKWLpUD+LSMuBXEfscVnhFWXjKxAPDRGTJsOvsdV3Z2x5NfnkWA
zy0Jx6fsd1xZuvdMO31LAJ8ziq1ty1OqUefblsOlu8oAn3P5Ly3Y77gULuam
S54qB3xc/V0M2e+4dvSfsvHqn/J/34F6D2q+GleLYr4qx6n+KAd8gn8IqbLf
cWmKr91xfkc54LPhdJUS+x3XwcbJ7WJzywCf3uvN6gMWVyLLkCFn/DaVAD7u
+rcl2ffZOQ6Vhx6MSwd8bDtvNHllf0VLPres0nUtAXwqv4wawH5/NctdSWTV
+XLAR/fmnQns91fjdu0TsL/b5fAJ2iOv+dYgB0nM8DtuuLUW8LkRapBRFp2H
Fno6aR6pqAd8LH3Ek47oFKDI19Nt2N/tcvgcXzlJp19HASre9HLos9uNgM8p
Uamdx5oLkP1uF1P2d7scPrvjTj8pmFCAwpBjJPu7XQ6flbmDdSxt8lAvjRlT
fQPqAR9Dnd3r/6vPRmO8Zgewv9vl8Al8/tYlXekV+qTjV8fOQTl8Zr9YGixh
cUngbEx+b8vhUzvkcI7jBVvB843k97YcPvcPeg6QdLET5Kwgv7fl8Nn6+b26
s5+DQIh8RwX4rDk4VNtownWBi1DXd1SAz/OZj/8b0npdEFJFfm/L4TNnl6KD
/SZnwRLyHRXgk3nEWVl7rbNgC/mOCvCZMGL3pdiS6wK/NeT3thw+j15uxeeE
rwsya8nvbTl85PJiHdJUHARvZpPf23L43MX+KVlKr3BJnqqAj8/M2m0j2d95
73JsF+HXz5l1wts6QtJwS9SN8JW8+vkiuO+/7Vwmtvs+fRe/fkZO1q1iv3eS
UYgdxK+fYU8iHlRE5+HAOdaJ5rz6+Y2nvjyqU4D7+S5fzq+fm3e2agzoKMDi
Zucywnj1k7/2pqFlcwH+ufDQTH79uDw56F40oQCjsfXW/PoxDb8/nP2dt31x
vzc+vPr51udEO/u902TbJC1+/ezdNvMF+762aLFkTSDvfN2Vk7VnvzdoHeNp
lsbjnw9T82XY7w0WFt2KKubxT5mKVyj7vcHStYn9+PwjqrV5Cfu9QY3K6mcd
PP6RLOm4zX5voJHZL7CExz+TAlvGst8brHzuL8znn3PJAb3Y7w2WbpE9d4XH
P8smld1hvzfwfGLZMJfHP2HLzhaw3ynZug1wsObxj/QRnyT2O6W1riWz+Pyj
NlXWmv3eIMlse4wvj3+m9c1IYt8naT4vFVbi8fNP0aG72O9enmWreL/l9a/F
0Vkb2O9eUvN0XUJ5/ev6Wd9V7HcvLYVbbe/z+lf+fJPF7HcvUqXmVp68/nVO
IbCd/b6o2G+1VS6vfy01/zyb/e5lhG1q9Gxe/zLwK3rHfvcS72/6zpDXv6ad
d49nv3tpUF0cuofXv6YYhhmw3704vBs5q5rXv/aNn5XDfvdyf9qTsq+8/uU6
5bsW+92LWKHbvRe8/hWwjLzvHOz0Y3DoXCeNnvg8IvjgnvgkEHxwT3zqCT64
Jz6DCD64Jz6ZBB/cE5/BBB/cE58Ygg/uiU8VwQf3xOciwQf3xMeL4IN74iNE
8IHvKabT+lEj9QPvp/zp+Woh5wvw+UjPlxY5X4BPBT1f2uR8AT796PmqJucL
8BlCz5c6OV+AzxR6vpaT8wX4nKfnS5ucL8BHl56vm+R8AT7h9HxdJucL8BlH
z9cacr4AH3V6vhLJ+cI9+aeA8A/gM7s7PwM+5yk//yT8DPgkUn6+SvgZ8BlL
+Vma8DPgM5LycwDhZ8DnL+VnMcLPgI8X5ecBhJ8Bn5Lu/Az4eHTn53/fl1F+
vkb4GfDJoPw8ifAz4POye/8CfOpWBYfw+jvgM1ysfx6vvwM+C97vk+D1d8DH
2Cp2Aa+/Az7BldOW8vo74HOwb/p+Xn/H//TzRkdefwd8ljnhWbz+DviY37pq
w+vvgI9f6dEoXn8HfBznfXTi9XfA5xLVP1+I/gF8TlB9qEP0IeCTQfXhXKIP
AR8Vqg8nEn0I+Nyg+nAo0YeAjxXVh8uIPgR8tlF9KCD6EPDZSvVhOdGHgM9O
qg+diD4EfFZQfRhB9CHgo0L1oRjRh4APovpQjuhDwMeB6ucSop8BH2/qL2KI
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
jJrwKV5xvUjUfffAwvp5dWh2y9JJEudvaxpsOCjfKCsWZdrmNtYzvARt0jvg
F972FRVfHXoqoqZfVNiTgN8DHheiqsIv/U9Wl0K87dV9BvguKkH741L+JilU
QlyF15D+ONEKFNvmMX5hYS3s01tDSrrcohxdGeq34d6kWthnXe2azY3aOehK
behiu1FF8NzUL069M5NiUW5GzMfqYdXwXHfd8pcFZ78g/78x1enS9fDcW8L6
P4sPJaMbH9c4dAg1w3Offhd6Gy+SjLC3VUOJQxM8d+TYk/b3LaOR9Akd/GxN
GTzXJHrU8JykWDy974+b/OfKz21ZXHL2C47u1fcF/7kGp52Glh1KxuYZOw/y
n2v5KCIhUSQZ77I2SOE/996+pwMfWEZjPeR/i//cC8/kPcQfF+JD8nMcTvBw
TuzIj2Jwxn8V4k35ON9QD5kiK1qBrYbMOabFw/lB3vAmBmec8Mz5sT8P5zPy
aUZN2jm4ZE2fvKs8nE++CJu0d3QlbhvX4tObV8/mf6LPMXWLNRZpftzLq9sB
UyxKmDrEZy+9y9/Nq8MfwyXuMXWIhys0aRTy6nBLn/57mLrCt18En3jGq6tS
+a7zhb8nrAg4ccFbg3vutj9d5wjPdd5y0LWfnwb33LSm0AIby2YsMDy88/22
exrcc19N33DiWK9mHPrcqeFyrr8G99zh7nLjhheU4bS3OfITZW9qcM89ReNt
JfFi7rlHaLzzSLyYe644jfc0iRf3jFeSxIu5526l8XqSeDH33Is0v2Ykv/Dc
JJrfdpJfeK4bze9Jkl94bhDN7xeSX3juWZrfYpJfeO5pWs/TSD3Dc9VoPb8n
9QzP3d69nuG5l2g97yT1DM8N717P8Nwwen7zyfmF5x6i5/ceOb/w3Iv0/LqR
8wvP9aTn9x05v/Dcv2PI+ZUh5xee+4DyVRPhK3huI+UrC8JX8NxUylcphK/g
udcpX7kQvoLn5lO+ciR8Bc/1o30hhvQFeO42yv/VhP/huRMpn78lfA7PXUn5
fA/hc3iuCeXnQ4Sf4blc/+pdc4HtX4Ke/WuY+U5Ppn8Jevapia3oAdOnBNx+
Pjd0nS8U9lXzh91OPwG3n8ipXecLCfSi3h1o9hVw+wly7TpfSMHpSHi22w0B
t5/Ezp3Bh39UoRhPi87dDZ+ATy4fv/S8LrUWCfacCR4yIx34ZF7FkZGjbBtR
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
p7dXqFjLuUUkosLVXiutUhphPwMnZcp/mZeMRi1bZhDwoQn2U3hiSt2zwgQU
dHCJTvmWRtiPrkUjChD+jH6aLf+57Uwt7OdB9YrSsLavKFT0gy07v+T2E6K/
oPyr7AfsIVZyir+fd+9vjPCMSMRWf8KV+PsplO9QS5iXjIUHCmbx9+O1KCnm
RWECHnxi4jT+fub27nUrSPgzRjMMP/D38yPsK5O/S4JTbiSf3H5Mk5OzG2fl
4sJxXo/kePmar2tuVHuhDE/72zSJny8vdXvZplfleIlF+n5LXr7K7u3IY/KF
8wIu5p/g5St5n6SO7rxirJr7eyg/XxcuDpBg57mNnau1+PicP+KXxNQ5fvn3
0SlfXp0bHvyazNQ5nqq8Lu80r85DJiS4MHWOM06JrTLi1XnCNq3hWpr1uE5m
U2sjr87/ztG3Y+ocbz9i9CCCV+fTZY0k2bn2L7FhOY28+tm/omvOjE+dzD/0
uemmBrcfS9+u95i4pPcixS2i/hrcfgIWdb3HxA3iLz6cHn1Pg9vPCJ+u95LY
fN+hoxYX72pw+yny7HoviZcfjJX9Le2rATo892cIO98ve38jIYB3vi5QfCII
PsBv6yg+kwg+mNvPI4rPV4IP8FUixaeK4IO5/XRQfLYQfHDP/RSQ/QAvHaT1
k0/qB/ajRutHkdQP7Meb1s9CUj+wn3JaPzmkfnDP+lEh9QP7UaL5aiX5gv28
7X6+YD853c8X7Ke++/mC/UR0P1+wn5X0fGmS8wX7saH13EDqGfbzcxXhHynC
P7AfWco/RYR/YD+tCoR/xhD+gf28oPzzkPAP7Gci5Z8Wwj+wn8sP5kfwzjvs
5x3l50OEn//li/JzOuFn2E9fys+DCT//02+UnwcTfob9PKH8/J7wM+zHk/Jh
BOFD2E8J7Wt+pK/BfqbTvvaB9DXYz23a176Qvgb7yad9bTHpa7AfD9rXXElf
g/3cof3ClfQL2I8s7WuHSF+D9d6zmkxYvjbQR7NSmXxy+wz2tLvAvi/XeJvv
nZsUCz53ba8J3uz7cgXFs/3Kzn4Bn7vHYKEcy+8/RcYNvs3kn4vr76GT8iy/
f5d1XprI5B901Laqbez79TVzn4wvP5QMPlezUf09+369Xz/J9CSRZJj/728f
LsP2g74T7z57xdQLh4OIeFYw2w/66fZbFszUC4eDv7LtCZb3S941bm9i6oKL
68eifXrs+3ixOcVl4o//zUWXGOpOYN/Hy4jGj/FbVAJx3bH9mX6M6RP7f3RE
Mece4ro4eNlwtk90zky/xpx7iKthzAUZ9v39Jedd7rKiFRDXzV79N7Pv7w2m
DTeqsCiHuDxvvnRi+0rxuhlaiUzdcXE5vd+Z9I3pKxsHD7vD8MQ/Ps9eUuTD
9A+vaucfbH3BfOb8yWph1QxUlG68du/of3On+ZMffzdOzEYK0fPD2PeW8J4i
aOn3U0y/SRwwo98bph65uBKK363bzPSb9G0uT9l65OJyNji1k/19wK2z3r02
+/+bK5b53tMpQAXI9Prxd+x7Ti6ucim/oWx/EugNX8nwMcQ1b6V0cTjTn6yU
xV+z9cvFFeyXd/WNjo3g83Ly/hP4rcL7Zu30qwIF8vsCiEt8xrbAsUMdBBfb
6e90aFySO3ReX9G4LvjrQ36Pw8VlIjN6iu4kZ8FE0scgrsTMF9/tdjoL1pDf
I0BcX55pvDvQfF0wn/weAeIKuFF9ocXDSeBzh/weh4vLx3H4JInz1wRDSN+D
uGbISg1jz7/276cP+fk68fbIuj6qGTjSvbPdmJev6M2J7iaJ2XjmHL1V/Hxp
vNgda8XwhVzS8ZuRvHzJDV69ZAvDF7eqRI/x82X7XGwL+x76+ledj5t4+bIL
WqBchAqw2y3/y/x8bZwwOKeJ4ZeZZgfyES9fsh6eB58z/CKmemMzP1+yEqHF
bF/cl/d0XSPvfAmEheLZ30MMnmWswz9fW3/pRbDv6Q/9bDL25Z2v+eb1J1he
zvYq+VnDO1+m34yj2D7atmRRRCPvfB0QLf/C/n5ie+nPN+N45+vwnlG92ff6
HxxG2JbzztfDZ3rTWR5/1+xyKoF3vm7+cN7I8vgyLN6swztf3/NSHdh+VrNa
/VYKjw81D219wv7uYXGcoX0Wjw+vCpUns797uK118GwRjw8DAiZrsv0vx6r/
WA8eH4oHCy9i+1/lxANK8Tw+FF6dfYb9ncQ+fKhPKY8PHQaZFLK/k+htYPQx
gceHX7/PUWP7peO2P1kRPD4s1UvKZfvlj8hftYE8PuTiKiVx4Z5xaZC4cM+4
XElcuGdcX0lcuGdcJSQu3DOu3SQu3DOuDv2uuHDPuGxIXLhnXLUkLuh3crQO
TUgdQlxR3esQ4tpO6/AgqUOIS53WYSapQ4jrEK3D36QOIS4zWofbSB1CXEdo
Hb4ndQhxhdA6jCJ1CHHdonW4lNQhxKVMeWMJ4Q2Iy4ryxmvCGxBXLOUNJcIb
ENdCyhuyhDcgrondeQPiutqdNyAuR8obNwhvQFxbKG8oEd6AuCZQ3hAlvAFx
XYrRv8bjeYhr0W/DWzyeh7g6p24K4vE8xNXbenckj+chrmx1bUUez0Nc4+rL
f/B4HuL6T3XPex7PQ1xa5wbb8Hge4ro95edkHs9DXNK0L/uSvgxxydG+XE76
MsQ1gfblaaQvQ1xGtC+nkb4McYXTvpxF+jLEZUP7sjfpyxBXAu3Lh0lfhriS
aF/+QPryv3zRvnyB9GWIy4vqqBaioyCuGqqjhhId9e93aFRHTSU6CuJypTrq
BNFRENcJqqMklLt0FMRVQnWUK9FR/3iD6qgdREdBXE5URzUSHQVxXaY6ag/R
URBXL6p7LYjuhbgeUN27m+heiEuf6t61RPdCXLup7p0s2qV7Ia52qnsHynXp
XoirkOpeM6J7IS4Nqnvlie6FuPZR3TuX6F6IqzfVvXOI7oW4ZOm8zpbM66CP
BCVFhLDvC1+0+qzdU5MD638+DxvN/s5pq87ItTcLv0J/qaVzzlFkzgnXO8/1
2cS+hzOaZT86l/l3br3g6Maqmao1aMixAUPGulXAfT7R+fA5Mh+G6ze0ipm5
MfsbueipNbtfbl0ov3Wrv2su+rhR/j/2d2TcfaZ3n6v/+12us/6FYqE4/L+6
rjsey+8N24QGMgpJmjQ0lIaOhqSh0lJSUgmVhgaaSBJaFC2VtERJkgb3k72S
FZnhtV/jRXvwe33PeQ6vz+f3p7v38/Q817nHdZ9znXOEKr4/6tYR0Pl2u+vG
h049hM+zavd36zXY5zwXXI+gv5df9dqjez3G52decbfugLU3vJw9o1tHcuPI
zPvduhL2OXZkHSccr+PQ36cnFk3qXuc4yHSZ8f8fah+3WWR9t97l3J5LT7v1
L+xz2PUvH7z+RX9fkCw+snv9QAdOTF4iH0nt51+Xvu7W5RhtN5hpvSydPodd
N/TA64bUr07JLqzsnpe/UR6x0ppbQu2Bj24ZdOuHxBcwxlcrcnt0RGS9NQWv
t9Lf3ymRGts9381VmmTV/e+03h1ouN6tc3I31TDq1j1RPSdZp/bB69T094/e
RLoF8N9vz033Dd3vy9qnxb1fcd+vFFZuM5/arc9in1Oqidf31fD6Pv392Dcv
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
d3QcTUi9U8H1jo7j/wCrbIin
        "], {{
          {RGBColor[0, 0, 1], EdgeForm[None], 
           GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJxFnXXcFkUXhvfZ3sdOFEUFKbs7QFERMbERxRYRRcVOMD9FsbsVu7FbscUW
A7sQsbvjuy/uw88/9t3zzM7Ozs7OnLznvJ13Hj5gnzRJks2bJMl0Plo/PtaZ
siF5kiyowrtaSTJU9EKi7xY9THRn0feIfqhIktFlktwpepTKTtCNP+re+VT2
lI7/6ffxKj9R559Vfpnoj1V3Jh3/q3Suk2RJlT+odk5W/TtUPr/qjNP5KdoR
fZvoJ0WfpuuDdc/CKuum4wGVv6TyDiq/X8exesYJOm+pOh10/T61Obt+36J6
B6jPj9BfHfPq2o06P6p7H1WdMapzr37/ovue1fGyyvuqfH6V/y56RvXxeJXP
T380TrPq99Ki5xc9m+hlRC+kug/rOE196KN7O4v+TuUj9awzVPaD6HlE36Dn
PCL6btU5XnWu0+9GfZusOnuI/knnw3Q+U3WO0Plsna/S8bPKD9fvs0SPEf2V
zgvrWEvtzKN2vhV9nNo/U9d+Er2ayjup/DPR/UR3E/2H6J5tjbuOF/W7k/o/
u/q/rMq76vdzOs7W/SeqnbN0/kXlp+j8uc6ddfyZeAxm0jFadSaqP3+Jbun8
ic4L6jhV9b/QuYuOTnqv7/X7YF0/UvWPF/29ykfpPFXnOXRsrL710HMz1blc
da7VtblEXy36etEdRF8p+jrRc4veVvWXUf05Ra+g84c6btS1QSpfXvQ8Kr9Z
v+fTeRW1f5PojqJXFn2+6LTldzmPCS56IZ3OzD1PmZ8jdZ6ceC1soDafK/ze
q+s8l9qfIvoE1T9O9b4WfVLu92L811GdeUu/40kq+5W5k3gOzRRj11HX96q8
Hp7SQ5ZSH5bQMVj3vqtjAdFv6/poHf1UfxuVLa175lD5wXrWEzqP11GK/lRt
7C56tOrsoDq7iv408fqdVcfjKp+DeanyrnrW/Tq/GO/Ie8yuYxXVmbP0Oz/Y
8tz/QMcVqjODfi8q+hjRX+o8p46X1K+TdKwq+nKVt1VnEdED1M5iaqfW76tU
PqvOS6l8rOjZW14vY9SHi/W71O9TRF8kuhC9ie7tqXtz0eNUvqDOnXQsrrLX
dFymemeo/BKdK5Vvqfpv6JhZ9F66vqT686OuXaSyRL+PUvmaGp/TdD5Vx/DU
POAxXf5VdYdr/i+nunurzVtV/nhiemYdN+v33rr34NQ84UrRh8e4D9f5EJXf
1/KYPt7yWF2l8idFf8j813raqHE78JO5Rd8kegb1654ieE7LPG0i8wLeVZi/
Xa92jszNY3fQeaiedb3oXUQPS82zflabczWmd1L5Xql5yr6p23xC7fykOnM2
Lr9JdUbm7vPt8S70lTnyVMt8HvrplufMcbpv28Z88sjU78mc+Ff3rVT4HY/R
9Tka962Xyu7OPTeG691bKj9b5S291zW6dq3Kv9P1xUXfK/p70UuIvk/0iNxj
zrNuEH1UbplyBvy2Mb++LDeff1/1DxLdMfP8Z/4+2/pvDj+hY7bEY/BYjMMV
qn9Y7vGeTf15rLC82E9lh6ZeDzeLHpWb3p/6qZ93ee71wPfdU/SBqb/LdaKP
yC0TD0h9fkZ1FlXZ0YwZ/ddz/tCxj+hv9C1urMzHv1T9fVV2kuhzdH0P9ekA
eLzo3UWPEL2M2vkbHix6SdF/IdNEf6Xz/jqfzDpS/Z1UfwjzU/QI5KzoeVT/
W9U7UPRUnffS+TjVX1zlfyKHeV/1ZUeN7wXwRtGDRZ+PXFY7+6qd41TnUtHD
kaeizxc9VPQhoj9XG0N1Plb1t1Wbc8Gv9buj6O907SDRO6tuZ7U7hTWXWybD
O55U2Ug9a5zoA1RnNf3+V9de0Pm62nzkAdHDRF+nOveL3rP2/HlR9PW1+dGf
anN51j/zJ7Xe8bTov1S+gsrfhC8x13XcJXr/1DoFusTVul7q2WOYH2rzKLV5
u8rvEr2r6CtE3yN699oyd1a935Wqe4/oWTK3ezd8VXWOUJ3bRI9Tm6PU5lW6
thXrQPWuEb2F6DlEXy16gOjLdL5Ex3LiPefpWF9t3KF7j9G9Y2lXv3dTm1fC
i3RONP/Pgo+pztyl5eWhauffxDL3ArX9Qcvj1k3tXVOb956l8vdapndQG1fX
5pk7ib5WdMO7q52msNw/V/Xfb7n8efVhO7VV69qklvkxcvztlvk0+sYFuvd8
Hf+IHqg2r6p9bbTKTs4t+5ZUm++2rP/0FP1Cy/IxZ97V1oU+alkfWUzHay3L
WGTkILU5traMOFX3vtMy/ZDaztBpuCfzOCygY7zKK5UvnlhPu1TH31Hn5NRj
hT7JHHg9sX53Wm2edq/u+19p/vyA6JNK653wjMeCRx+rsk0rf8t+jJvO56u8
u84TWp7bm6rPJ9Sehyeq/raVdb0eOp5vWU+4S+0fV3q9lCo/p2Ue+FbLuk9n
0W+0rJOgR52X+3szzs+pvctqX5sg+vLaeswEtblhYR3mX5WfW1svPB79JPdz
f1P5zLV5+2bq54m1+dWGut5WPy5QO2NEn5pbb18ixvwb6qu/M6APaxyP0HMG
6PeG8AHVeVFl/URP5vuKXl/0F6JfEr0B31t0R9Ebid5MR28dQ9GR1MbPOh7R
tSXVl/PU/jbMbbW/scr7qt5GOqcqnwAvU/kG+r22yoeI7i16cdHXh36IvncT
erXoeeGZLbeH7vSOymdU+Roqe1bndXTeW+Vr6by0ju1EP4O+LnoY4yx6XdH7
iH5I9PKsIfQi0cuJ3l70XurDWurDsvr9sMpX0Hkwy1XvcrGO30S/0rLuN5+O
szWuZ+X+/WHL19GpZtY6GwgfUHuvtqwjoh8unnm98R0XZTxb/i5LxzpFtz9D
7Z2eW19tMYa1v1eh84W168Ab0N/RzV7RvY+prysj4/S8fur/6qKHi15X9Eqi
19f5Hx1PqN4bqv+4zquqfCLyVvQqoiu1fVHtdovMch6Zfq3aOVj3nqnfL7fc
r446blT54So/T2WbaO4dX5sPH6ayPvq+ldo4TnW20e9tVOddPWcgchX5go6v
Ou8gV1Snf+nv9LPumaSyrUV/jFzQcbzqv6ey7VR2oOi5NTbD+dY6TtS9P6Ef
i95T548Lz5G31U6vlufGKWqjO3qb7r1b5Xeqre4q311119Bze7JWsYNV3gO+
pPo9VH9j1b8T3qLybvBq1f0aPS/1HJ2mv+u4T78XY4zhOaIXFd1X9Mlqf3vV
30W/P1T5zjofzrcTvSN8SPQPav8t/d5Kv9dV/S6l+eca2AqlbbPD1J/fK+s/
C/MNS9tvx6qsrv0t+qv+y4V54+Eq/7Oy7nSczu3acxUbd4ba8zDXGH6iNnZD
puu+VdTmwvBElXXRuRd8W/SmovcSPVb39tG9u4sepfpbqv4WyAD1/03V21L0
piqrKvOIw1Rnk9J84yqVraV7d9O9E3VtQKzHkaqzhepsrt9Xq846qrOHyndR
+aoq70o90WuXXp/PZOYrrMlvRG/SMv95WO+SF5Zlf6GL1R43dMZVQ29Eh20V
1mOPzc3XMSceEV0Uln3jRK9cWGd+pmWbiTH8W22eU9vufUTXTy2txx6DvZDb
JnuzZVscPn+Kru9b2bdyi+ofrd8X6/pR8FeVz6jyjXXfDDpfqPJRtfUndKfb
VX9kab3kGZUdW1vXXSD8NOg/nTLrRehIe6gdHDzYI3fmfins7ltVthBzFhmq
sjNK67uXqE6XzPbCczo/qnorspZUp09pnvhC8BP4xjnqw2Lqw1boEqIXF711
Yr6+RO35f6HopUUPEn2R6OVq89IRavNzHWuyHvBPlOY7l+b28aCT76vr65Xm
XYuIX56s482wadHNkeOno59WtnEvDt8UthvyFL8E8hEb7ajUtgMy8cza17Bl
569tz/KtsImm20OcmRsXZebd6J+3ZPY34FPYDzncWJaPEJ2JPlf0Sql1f/jS
CJX1asyL5lL7r6am50CPDR39W/VhqN5rYb3rymEj/E/3rhc0+nkX1e+t34fq
9yA964DGPA4+sZ+OQ1Xna7Xzde02sTu+ET0MuaU+9w/9fF61s0bQg1S+QdgL
C6q8V2o9fweVbxh+m1VT2yXYHT+qf6cVtilmU/3lwh74WWVnFrZrdmTuRj+7
qc5aqf1ZOyOXatsXX6l8EdW/QfV7iF47tW9r0zijA/+u6xcU9ndtltoXhk7e
X+99qI4vVLaFjpGtsDH1vtur/XNF76Dz97WvrZvaH4D9tYie9X5qG+0z0V3V
/oWJx3hUjPmWun5MyzbITmrjx9p20CbxHleo/Evd21P3Xg8v0vWfa9tWO+vd
twk76xeVvdd43HdV+cCw6X5T+WSVb6Tfu6h827DvOun776XjYrX7hdrvofNY
td837D7stdXjW52CTNf1rQr7WF7Ru99S28/ysuiba/tfPm35jH8V3XG2lnXL
W/Xcb1r2kb2l+nfXns9rqjwPWTZJ5ffUrrOMymfReQnWBXxJz10tsS/oBtWZ
UddeY/zV/5n4rqr/Vcv62F26PkTv+4foV1VnkOrMqDqPqc6fLctC2j83tU/4
s5Z9XfiLOureeRuXf9Kyvwd74S7V/7VlGf1Ly/1dS+WvI08L+/1eVD9nE70p
MrRlXrcGwxDyC9m9sNrfpbG/6U3V3bEwP2TMOk8ft+CT6AZT1GY31blIdLfQ
c9FVNlZ/uoY+/H3LPjz4yWqp7fvRiX169yJbmSd6ZrfGPq4HdO/vLesYvUWX
oWP0El2EHrK26Fr0IsiyzGMJ/XPLMrC32n9H7e+gsZ0FfadlWY2MfkF9nhVZ
i+yIcea5X6n+V7XX75c6H9KYv6wt+lUd/VlX+GBqz4knavN5dMIHa+s/6MAP
1Nad0KdvVP1Ha/f7FtGP1X6fO0U/XvsdXqstx7EjeE6feFbT2D+AHHyythxZ
TfQrtXUDxvpc7JfKc3EjvWt3HReK92+i9xqsskOQr3rGB/q9nn5vputL6mjw
69eWO9gRT6qdZXXcr7pP1ZZT6MPP1JZT2Cr/1vZFoNP+U9sXcbrourHf4CLR
VWM/ADJ6Sz1nWR1r6VnPY2tX7tO1yHr93lx9ynT96co+x61FL69jA/2+pLbe
hT28KHacvtf8uXXtOvRtbIt22Bdvqr2PRK+ILhm6Ivx/R7W3qI5f9MwvVef3
2rz4ncY8Cl7/V23/xim650+Vb6jjF5X/UNsvBO+Ddw4O/vlBY14GH/ujtp/k
ZNajyn+tLSf+rO27GA2Pxjcp+jvq6F0+qd2/D4kl6b1OSKwz7tSyPTiv+ruL
jsMLf5PH47v0SD1HDlKdqbp2VGE9s3vq+YKe309j+lTYmP1C39uTtaBnzYdN
InpdPX8i4wD/UPmyqr+n6KVUtn5tG/B99fON2nrnr2pn4dT2yHuq30ntHKk6
Q9WvSbX12IVCn8VOXCC1foq+umBqnRcb8/vMcxG9/Y/gD9tyj9p5p7b9Mkz0
27XrfID/R+Mwv553s+p/3TJPfk/lr9ces/1U/73a7XyL76KwjfCp6nxa235Y
PLU9gR3BukDf2L5lW+lDdDDRX+u+4wuP4SKpbSPGeXPWSOP6H6n+B7Vtqqk6
H6zyNVV3/tD5+XYzaHyWSe2H/Fx1DmqsW3yme/fQu3TGXyz6/dp23d+Z+Sb0
kmFbMLZLpI5dHCH638zfmOcWan+p1DGOKWrjwMYycDI+OrW/ELISXtS27jJE
9+6eWh+7VvSXLfsHPm85poS/a4vCcgIZwfgyzsSGLowxXwn7i9hlbhr5h6yk
/tsqfwt7Q/QboicWvneSzu/p928t24/Ipj4qPz/k4IrYSthfqvNFyzLg25AR
2FbP5ObhyKUfg28TD0LWImexMZFza4ft82xuefeC2ntVv5dLHC+j7RVEP4me
U/r9z4lxoHwn+llYlmHP0t91Ess35NyGieVGmlo+4pN7vWV78IDwd82VOE7H
mPJcfIHEAWdOrE+jcy8Y+gY0ujd2Ef5E7C/8VthCnRPHKCeE/4oY31SVLx9y
Cv6BTw+7+a+WbedP9E5vF7adkfnIJeT7FJW/r/LNEsvDLLW8w95/Xv3bgDFR
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
8H/6R97j
              "]], Polygon3DBox[CompressedData["
1:eJw1nGMY9EjThTPIZDJr27vv2rZt2+aztm3btm3btm2b330/J9+Pvqarq9PJ
JJ3uqlOnMtFGQ1barl0UxTBlUXT5na1XFB9SrusUxTitoviN9qmqohgX5bHo
b+sXxYV1UVzf6P+k/hflVwa5BP1M1B+hfIt+WfTTcfwtjDcM8r3oxxwUxaKU
kjE/pm1rz0XZgPoe9L+AY3dB/3Ev57iF851L29XUx0L/OddxLbr1kc9jvAsY
5946Y22MvA26GWibnH570X8Kzj+Etj+4vivQ38p459P/WvqPjX4LdJPTfyz6
74o8D7onKf+iP5D+X9L/BeTh0G+B/j76/oC8EPLV6Ffg+Espy9F/SfRv0H4J
8rLIO6K/l/7f038B2q9C3onxVuX/LUj7grQ9zO8ayPtxzHAccwdtJ1GfkvqY
9O9QX4Q+izTnGxv5ZMpU6H9Cvh/dT4y/KPprkOei/jjlD/T7I3/N+V5BHhn9
VlzfWvRfmzIB+ifQv0v75Yy3MvIByA9wv05Angz5OeSvOP4ljh+Rflty/FTo
b0T/H/fzOvTTIu+B3PPakeem7xOUv5vxrudcJ/H/ZuH3L46Zjf67Up8E/dvo
F2L8FdHXtH1F22reB++xdc73Ff1HRP4ZeXv630l9FfrvRr8Obecj3835PqC+
Efpp6L87uhL5duRb0J9C/3krbyb3hfN9Rf/Z+T9HMP4HyK8hj4F8qM+bflvQ
/yrGWJP+yzTzeyX059D/MvRPI7e9H/5f+n1KuYW+/0P/De03IG+KfC36nXu5
X5t1cr43uL4vkG9HXtj7zXi/MN4S3fSfvsr8/Zl7dSLyWvQdHfk/+q/N8Wdw
/La0/YL+JPRXcf0XcfxN6Of2+qnvxfXPXeU/zon8mO8n+v18fzn+cI4fC/l+
5H04fnX6L0X/5el/Pfr90Y+A/lb0G1OfBN0o6Lbm/Ksx1sH0v532MejzCf07
6N+nviH9N6L9aspancyXZdEt5/HId6JfkePX5PgD6TMybbv08mzmZvyjvH9c
z6v0GbU5352MfwR9xqHvIxw/JfL2yH/y/69EnhX5KOTx0b+GPAvykcjjIb+K
vBpjr04ZE/k+5JsZ/2zGv8L3i/E3QLchZVLkZ9H/r8x69BPjn4/8EP1vpv9L
6Oek/8r0vZU+l1Pfkj5jUV+G/k9S3871DXlp5CeQt0X+mf9xB23X0n8Ibb8g
3418E/KOyPtSX5n+L1Hfmv7rMv79tN2Ofjfa/qD/Q8j3Iu+D/CvyPcg3I++E
/APyTcgXI2+KPHaZ9eg56jsx3vfob6TtIvSb0HYc/2fMOmM9j3576pfRfw3K
m7Qt5ftAmYb6XuivpH1D53g778PF1JenPNvOGncXx6/A81yOtqdpm26Q93lF
5OeRl2GsNyjTUd+H8Zam/jplWuS9kQ/k2lan7+vtvOPn8v+P5fiC36doOxr9
Bug/pt7nv5zpPHW+0vYYbe84b+izSStjju5/RfcQ9U0Y5hP0Z9G2L/pFaXu4
2Z/upL6W67f7G/3PRj6e8x/P+Ecx/k+03UfbBvRdBnlq5HORZ3ctQF4V+VXk
b/n9zveZ+uLOH3TLUqah7TzaNmf8BajfQX0J9P/w35dEfwntx3JNPyEvhnwu
8kHI03D+013DqM/PMb+jXwL9hb63tL3N/zmS+satPKMJvF9l9qYZkUelvhDn
u4f6epzvLfofRtt66KekbTTqC6O/l/r66D9EfwptO6Ofm7YPkE9G3gl5LuT3
kU9A3g55dp8R17M413MebQfTdpz3nvG+QHcw442D/C1lCuTdkNek/2eUeXyW
Rdbty8qsLa7fN1dZr+aq8r7Nz+98lOuLrNf3UN8H/RVl3vdpGetRyjCMtwby
KLR/SBnW+VlkH722zNrmfjoNfR+hDNCvTtvCjLdQlbWoQr8r/S+m/w3ILeSp
6fswpab/arTdTd+9Of/lZewH1y3fN/c6169V3Y+q2Dauh7NRn7XKXu9+tzBj
veg7R32zImuT7/9jRdYo1y7f58eLrGHbc+wQyutF9uiVmG/7cv7lq+zXu/O7
G+WdImvW+tTXozxTZE89oJf33b1vJOTF3f8pU3H+PWhbhr5LV1kLh+1kvXqN
Zzy+18rzPNf1mHIr8oKd7I8rc/6f6Teb6wv1OXw/yjzv1dF/0s9cOdL9ivaZ
Of5y5Is5/vk69pNz+Tj0a9D3037m2lHIm9B/Hvrf3M6e+GIde2MB30f0Z6Gb
hXIl8tzoh+Xav+SYidqxEcbhWuak/OI+4XrP2B9R5kB/OPLo6BamvNDN/BiZ
4w+m7xr810noMw26YyjPo18V/Qwc+zhleHTrIG9H30U5//3IT3O+C6gvRnnQ
9x355Tr21YLIJzgHGGsRyovdvH8zM9YTlBHQr4u8KvUP+3mXDkF+nWPfoHyJ
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
vnQr5zReJadILtHQMbqxfz1WTGRWrvXafvBrcey1Gv/uS+Qx9H/RXUr5qhUM
5qw6/AffvUWK2PLyLcQ/tOlHGmQNd+1eAv05dfhXzhXn2Hl1+FN/teKzTtxP
jMTYyJLIo3LsQoPEVIwfXFoHz+i249M+UMdm1Vb9gus5wblG24D+4xuXrMPp
cj586n4xyBrh2jAm7SMgLzBIjGs8mk+oglE83bxvV9TxiZ3vYiojU7+I8nkr
mKSx/cvr6MRdnkM3r5gn8mgcf08dTtFGRdqG6SfGZmxt3CLxNTFtsWzP/1Qd
DE3fosU1zYy8cj/1RxlvFM634CAxCuMZz6Obr5//5nwT212gn3shxqstf3+d
+ei81Jd5tM58c96N308MwtjD/EWwpu+q2O9iTuOhu0aby7WRthEHmSPODeMx
Yje/VcE3xHC03SccxPbRhhcr+KmKLylm4Frtmi1XRhtvgn5iIsZCFigSmzFG
41wYXlwJ3Q2UX1vBuCbvJ0ZnbG455P9Rv8vn2Q5GamxcDthXzfrgu+c7KB9E
XsgA3dn9+OJiWg/V4RjKLfymk9j433VsGWPk49L3am0+9HMV4UctN0hcx3jO
D81+IpfEd/Z06g/WGUsf8XrqD3LMHPR9jrY+9bMoz7eCsbk2uka6nv/ei626
F/plu7FZe9p+yEs1GMapg/C7jJ8aR3V93xP90vowYpl1OGByvzzmuzr2qFwo
OVHyI76mbc5uOHc3IL9fJ3ZmDO2dOpiZWJeY1891OIFyARdHLrUN+6lrE3bq
cBD1TfRR5PPIVzQWvkQr/ILjtbGpX9cNF/BB7tn13XACxTsu7gdLEVPZsQof
wb7nUT6pw1nR9pwZeQ99dcq7RcYQmxWjlb8yYRlu3rd1/qs8MOPLcizlOsp5
FNsV45XfM1EZW+XjKlyDORsbeAT3QLEk+t+I/HGdc/+D/ps69v6RrdzDE73W
Os/2AX065BuRX2z25xH7idkZq5uBMW+qwwFz/7PPyfS/hbZXOuEYGV+WX+J+
J6YpH8o93v1UTtwzHtvPXuR+PBz18/wP9J+OPrfW4ZvM1cqYI1G/kPJZKzEV
91r3XOPRxqWN9zzv/tlKjFIsSA6f2JiY0G/O3yrcTOfkTdQ/p222bmK+f9Th
NMplXJG2L+pwIuUm2kd+w4W9rIW+A9rXZ7rG6duV4XK+XWeuibMuqz3A8Zvq
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
              "]], 
             Polygon3DBox[CompressedData["
1:eJwV1HuQz1UcxvHv5ra7LttKWNayu66VLBortblsZBnaTJGU7sN0WaRkSuOa
ywxqKoVRihiXlfojw1SmonKJSbIkCo3bbsN0GZdtqdfnj2e+53mf53PO+Z3f
OSf3sXHDyq5JkuRxqkOHUpMkNT1JWjFHaydJZ50nsDSsNXYMK8TexKrrJUkv
bDvtSEmSpjKLsRb6z2ATaadcN3pe+3fK0Dc9LUmm0aa6SfIqNa2VJAP5KrV5
MuXYablydXWNWR/7zrx/mqNY7pRcLjZa7oRcP+wk1gZ7CDuOfYCtoBo1h2Nu
PJv/Xi6V78AvkZvFNzLHQKwdtgg7b97zeD5WTXdic9Sm4OfsURu5z+l1LA27
hLXld1C5ulbGW6aujL+odozcQby/3C6/Yxk+X12K3Eh8Dr/eOkvl/uYL1E7H
Mu1LM+wi1h1rjE0x3kxsBq1VMxvbTB35H+UayBXwq+ROYafpVvyMeZebf1Ps
k3lXyk2SSzFHZew9DVVzVq6XzFzrq8FKtWfKrTZXvrorWBM1s7BPjbGEX0pH
+Z/5YnM0l9uK7TXe3fhL+J7wVIRd4Fsat71cHlaoJh1bGvuPd8b/1a6h7fJ7
reU2mixTS38TrFvMob1ebR/fvlTbWC/IrYv/jH9AbjXfLs5l/N9U5XcclztG
76q9Ilsoe3Psie+TWKpvGr0jszj2X80hucPqhxjvWyxD/3B+uL4b1H6FF2qX
yV3AP9Sfhb/MD+P3WUsPdb/h2di92AHsOWwCjVQ7EltLW4z1i1yG3BG6qm8+
39h4T/F9ZT5T21vuS7X19JViJXKd+P18Q7mu8b/JbYkzIDtA/xAs0f82XW+8
CXIl2Ddy1/EL8S/iTmHP6GuCvYZtxYqxZ+MOG+t9Omm8ffwQmsGnm+fRuD/O
0EYsT+3Q2CvnZZraT7Cv4yzHffO9izZaTjY/SO6s2ifiXsk1xOZjb2B5WH+s
hzl2Uya23xwvYvNkGsj2086NWn11ZRbi2/l8+sccOTIfme+y/nHYe/KtsY1Y
NTYeWx7rU3sjfokfz/f0G8fGHmON+N3mrcYy+NlqT2j/gA+mFWrr4GnxJsqd
1teBr8THaq+Le05tsfuNmWVf5sb9lR8f7wE2wlr+ULsWmxzjYaOwAeYqxwZg
P1FLrELulXhn+ERuOFaFrYn/3hwl2Bmsndq28c7x6XjXOKNyE/XV56foW6Cd
Yy1F+vLlOuEH+Qrqafhm8abJ7ZQbjE2SK5LrgjfHm8U7IdeCvyPeA7lRcrPl
suJOxptqDw7E2adMuQK5DXKFcqOxa7H22EqsCzYizp+6VVQZ+4zdg90k95b5
tslVY5fj3qhbQ39p/ypTR19LuT5x57QfxOfFXVK3yHi7jLfJHvTG0mSmYhui
Tu5h+Vy1m2UfifMU76m+HLmO+F5+D3X3e89j5+h22asypfJH+SPUHauJs4H9
Z/ynaTWfova+eGv5AuPlxP7jY6ypBKuIMxj3CJtKQ+M9iCyWGfuM3aJum/bH
1lDiO4j+Bx+Y94I=
              "]]}]}, {}, {}, {}, {}}, {
          {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0ttLk3EYwPHfMpumOfsHlJG3Gd4X4l1QIHapiTgvZLtIrBuDalmCIkSJ
qIgXc6El3kjZ0ChIcXa4zex8hP6KDtrnR7Bn38/ePXv37pDODJy7kAghzJmF
gyFE39CfWm/qqhxzsJGP6lgyhGZO8zif4hY+G2u3jbv4NHdwjnt1ye5lHuRl
HuNhntGc3Qm+xyNc5BI/0Jd2y7wZn3ddO1zUDY/f8C/e1d/6Vv/oO72i7zXj
9Vf5A/fxNf7Ief1rPvF13TOf4zXpF71ot8Bf+RLP8zfe8r77/J23+T7/4Lta
9vg1T/gMz3iLV/SF1z/iAj/mRb7N09ptN8+jfJ4HeIh74rntZrmdZ7mTW/mM
Ntk9wSf5GDfycU7Fc9lt4H2z6LpSOhM/Y/w9zatK36O9Izzl+FNTy5P6xNTw
HT2sWee6xdXcz+Ps7cKorptk/M10zRzim+r0oaRuYdVdhT7UA/o88f9/9g/3
alOa
            "]]}, {}, {}, {
           Line3DBox[{1202, 1336, 1556, 1337, 1476, 1338, 2634, 1565, 1339, 
            1483, 1356, 1574, 2674, 1357, 1489, 1366, 1583, 1367, 2613, 1495, 
            1376, 1592, 1377, 1501, 2655, 1386, 1601, 1387, 1507, 1396, 2639, 
            1610, 1397, 1513, 1406, 1619, 2680, 1407, 1519, 1416, 1628, 1417, 
            2617, 1525, 1426, 1637, 1427, 1531, 2667, 1436, 1646, 1437, 1537, 
            1446, 2644, 1655, 1447, 1543, 1456, 1664, 1457, 2619, 1549, 1466, 
            1673, 1467, 1274}], 
           Line3DBox[{1203, 1340, 1557, 1280, 1204, 2622, 1341, 1566, 1284, 
            1214, 1358, 1575, 1288, 2651, 1219, 1368, 1584, 1292, 2652, 1224, 
            1378, 1593, 1296, 1229, 2625, 1388, 1602, 1300, 1234, 2628, 1398, 
            1611, 1304, 1239, 1408, 1620, 1308, 2661, 1244, 1418, 1629, 1312, 
            2662, 1249, 1428, 1638, 1316, 1254, 2630, 1438, 1647, 1320, 1259, 
            1448, 2684, 1656, 1324, 1264, 1458, 1665, 1328, 2670, 1269, 1468, 
            1674, 1332, 1275}], 
           Line3DBox[{1205, 1342, 1558, 1281, 1206, 1343, 2672, 1567, 1285, 
            1215, 1359, 1576, 2635, 1289, 1220, 1369, 1585, 1293, 2653, 1225, 
            1379, 1594, 1297, 1230, 2626, 1389, 1603, 1301, 1235, 1399, 2678, 
            1612, 1305, 1240, 1409, 1621, 2642, 1309, 1245, 1419, 1630, 1313, 
            2663, 1250, 1429, 1639, 1317, 1255, 2631, 1439, 1648, 1321, 1260, 
            1449, 2685, 1657, 1325, 1265, 1459, 1666, 2649, 1329, 1270, 1469, 
            1675, 1333, 1276}], Line3DBox[CompressedData["
1:eJwVz7kvw2Ecx/FvG0cj1CjUwOJYXYtFsRaRMDA0aUhMSmLRwSISicbijxHn
ZnIMpiIxuWIS1yTRV4dX3s/v+TxD210ozq4mIiLPYV3EUmPEMm0NEccccVEf
caI7TRGn2sU5Z1zZLmuln11vbvSaW1tF7xjggQ37vVZsz/rCKG+88uj+U/e8
+9JJfvjmyfav+7bwG3POSU3wbmvWFubdt+qmd2n9sLVrB3lbp5ZsGf219Wgv
K7X/oH38uR/UA++GdN02osMkncc0y5y95HvCeZyUc06n2Hae0S1vpjXte0EX
KTuvaZECVYNNMgE=
            "]], Line3DBox[CompressedData["
1:eJwVzz0oxHEYB/BHd8gt2CzUrYwKg8Hret3dQKFc3spyFxPZkFKuS4mVlZUy
ORabKJMikwGTxU3K5z/8+3yf7/N0/S67UCmWmyJi3nedjlhpjRhpjuhqiRhl
nfe85V4mYkzOyuO84wMfmWcv990U5Cf5ma+cYT9nOWD/Jr/In1ziMJf5xXeW
3PzKZXmSFTb4wZT3bTDvJqfblNO6b3Zwm9P6mv2O3Kn7YTcPkt+2q7LHfOim
kbxbPuaq3Qn7zH8c5JGbU3nd7oxDupQ8wXPzlP2W+SJ5q65NLvDSvCtfJf/P
TVHXbp7jja4q17lmXvT9A/7yMb4=
            "]], Line3DBox[CompressedData["
1:eJwVzrsvw2EUBuAjaV1qsbgkJtQoLoPJZXVbalAslLVIJA0TYxNT08RfY3Yd
TEVicotJ3CYJmj6/4cl7vvOe4evb2FncboqINU5SEcWWiC16myPOOOU8jSxn
Ii5klisuudbV5A1DHLm5k7fUdI/yiXFeKOmf5b3uXX4wzRefPNgX3Pya/5ih
zj+vulZ/ayPnJmfXbs7wpuuUXazaV/Q95m6+df1ygE3doMxSdfOjGzaPUNSN
yVHq9hPy2M2kLCX/lFOkzLNyjrz+wHvBPJ/8xbyU7CmbV+Shm2XZ4b0uC1TM
+3KPXRpGTzM6
            "]], 
           Line3DBox[{1212, 1902, 1350, 1564, 1351, 1480, 2650, 1352, 1573, 
            1353, 1487, 1363, 1582, 2675, 1364, 1493, 1373, 1591, 1374, 2615, 
            1499, 1383, 1600, 1384, 1505, 2658, 1393, 1609, 1394, 1511, 2659, 
            1403, 1618, 1404, 1517, 1413, 1627, 1414, 2616, 1523, 1423, 1636, 
            1424, 2618, 1529, 1433, 1645, 1434, 1535, 2668, 1443, 1654, 1444, 
            1541, 1453, 2648, 1663, 1454, 1547, 1463, 1672, 1464, 2621, 1553, 
            1473, 1681, 1474, 1913, 1907}], Line3DBox[CompressedData["
1:eJwV0D8oxHEYx/FHOcp4m0msjBbDZXGXQamzGFBu4DKgsMigsOkGchGRi07+
RXSySVksl7JYbrEoWSwsyuuGd5/n+byffn37tedmstMNETGGv8aIheaIeRSa
Ih4SEaPmH/2dfaUloiLXUOGGuG/u1n6DJRTdnHMZ7ou71l1hDiV9P9/DfXCX
ugtMYZvr0r/r827OdKcYR4Fr42rcib2MYazqk/o3/bH9CINY1Kd9I8G9ciXd
ITKY5X7lOl/lDsz7SGGC+5TP+j257GZXdmOEq8knbqf+XgzwnTLLvdT/F1eU
W+hAWt/r5tF8z23KDbSij8t73yT+AfnrN8k=
            "]], 
           Line3DBox[CompressedData["
1:eJwVzzEohHEYgPGXznd1gwEZbpCjDOIGxUBZz6IkBour244iJQYZSDZZ1JW6
UkoppZSSTWSxiCyWM1gUFgsG3c/w9L7/53mH78uVFicXGiKiiL9UxFBTxEo6
YjfhzFl88wP8Vibigt/GND+FLy2vnXPrqLgZ4wv41Hq1M34ZI9yaPmy+aT3a
KT+PPNePV77spks74UvI8Z2oaR38pn7Mz6CNb8WzltWOuAmkuVV3ifmktWuH
fAG/+MGOfq+1aAfeo/jAO+74Zn7DTdV7EC+o4VbLaPv2cb3PfMQDrrREq9i7
cYMlN9fmpdao7dmz///t2+ZQRh2YfzFr
            "]], 
           Line3DBox[{1279, 1335, 1555, 1475, 1273, 2671, 1331, 1554, 1465, 
            1268, 1327, 1548, 2669, 1455, 1263, 1323, 1542, 1445, 2633, 1258, 
            1319, 1536, 1435, 1253, 2666, 1315, 1530, 1425, 1248, 1311, 2643, 
            1524, 1415, 1243, 1307, 1518, 2660, 1405, 1238, 1303, 1512, 1395, 
            2627, 1233, 1299, 1506, 1385, 1228, 2654, 1295, 1500, 1375, 1223, 
            1291, 2638, 1494, 1365, 1218, 1287, 1488, 1355, 2624, 1213, 1283, 
            1482, 1354, 1481}]}, {Line3DBox[CompressedData["
1:eJwVz802QnEYRvE3RZ1KxtWoG6GxkWVo6AKoKRHSOb6ihSLkOn3zM9hr/9/9
rDM4re3dzZ1cRGwgK0ZMk4hmKaLODZ5wqq+UI9p41aoYahWeY0uv4VQru1+Q
YOzbTB/oJfczirjRT7Su7dp7SXvCIkbuY9sVL9vXMNMLuNSObBecdz8itVdx
rvVtZ7ygPyCHzD20H9pS79Cm+HUfoGP74Yn2zb3//9JWca99uffxiTv3B6/b
9vgdt9ob1/gPN/wnGA==
            "]], Line3DBox[CompressedData["
1:eJwVz0lOAgEQQNFyoaKJAWcFHAAhehaHGJcMDrjXRC4B7FD3zorCScDhSr5e
vFD1i6S7C83rk6uJiDimPR0xl4p4YGTOzkTczEak7Y+MtZyWMT9Rc/vW8tq8
/ZlJbZ8NbcH+QtVcY5NdtzaL+it1rcEWPTpuS/obp/YztrllWXun7D8HnGsF
7ljRP7gwH7pVKJrvWdX7/HjXkn3Prcua9smvvqO3tHX7F39aJ/k285AptyMG
yTclz03ew2+TS0r2f3IgIbU=
            "]], Line3DBox[CompressedData["
1:eJwNyrkyAwAUheGrCip5AFvGxBZbgdfIqEWRsTY00tPyAISQxFDaxfYUgkiC
h8lX/HPO/c8dzu8sbXdFRBYHiYj+7ohrfOjpnoi+3oh53HB1bpQb0G+xzH9y
Y9yg+w457osb54bc91jVv7kJuWs/ksd4sK3Jhm1SFnGCBT+PtnX9x5aRpyjh
id+zb+hN25Q8wzlqtk2ZsO9jWi+jgmdby/+MXrBV5QVe+DY/qyf5Rbxyv9wh
Uvo7Vvg/95t+6fcKc9jCPz/CdwA58iwO
            "]], Line3DBox[CompressedData["
1:eJwVzVs2QgEYBeDfE3p06b0H1yNr1QxiApYJUANgIArlPgFFKEIPuaaYlu88
fGuff+9z1slV9rf3JiJii6vJiNF0xJgiPwy51GczEZv8TUWsc6HLy18q+nnO
dWvuMX3flXV5zvSJbsSr/oXT9F1bjef0X7aefOLE9iirtoShrevu0LDdywe+
9av2Xe7cddutbPNlu5EtDuzHtmvPTT7T7zjSzdk2+HCvcKibdZd4dy9T0y3J
N3b0M1R1i+4BCxT4B+XoLNY=
            "]], Line3DBox[CompressedData["
1:eJwVz8s2gnEYhfHXyOEGaOgGsIScJWWZyeEKMGbGXbiASonkFiSiWcghdUF+
Bs/a7372t/5rfZNHZ/unQxGRx/1wRHc04nAkIikP5Ies8ydjEdv6ADnccVnZ
x7EtgRq3pf8igz1uCrf8pt5DGm1v3nAXtlf3BveDdbzoVVtLTthz+ObX8Mxd
257kqv6FFeR90+Qqtke5zH1iCQ390l62PbgXuS5SuOLObQv//4l5lLhxLot3
fQ5FLinfMItdW4GbcXcwjR38AWwxK24=
            "]], Line3DBox[CompressedData["
1:eJwVzzlOQlEUgOFjow+XYOcKbBRxLo0iMhgbQmVi48BzKrRlA7oLZCMO9M4g
4Er8bvHlnvNf8nKZP8ob7amIqPI4E7GdRbwxNC8WIm5nI3bs7/xqS9qu+YNj
dyOtqJXtn2Rag2Vtz/7FifmUEnfunpwV/Zsz8zkrPHPvfl//oW3PWeWFqjag
Ox1xYV/jlVp6L5fmKzq+se7sU0/vZuydG/YFdw/pjdqIib6pz2klxtqf1uMw
zRT0Aybpf/tt07nlvOaGlv0fJMMsmw==
            "]], Line3DBox[CompressedData["
1:eJwVyjlSAlAUBdFnpLgFTYhIIcRIZVAwoQxUijIxEDXAyHEXuAxdi+BcGssg
M0vwEHS9+7t/8uRyv7EUERU8LkccrET8LrA3ExFrqxFZdLgOt8Ud2l2c8l1u
mzvy7qHO9bgcV/Xu48ruc3n3Xn92W/jTrhdXK7htNPU0BtqN90Arui94xZBP
6WcYajvcG94x0m7dc22k7dof+MRYG3MlO6M/4Mue8BO+bK9zG5hyU+4JNXuO
C37mPbO//f3BHu4w54/5f3CgNfA=
            "]], Line3DBox[CompressedData["
1:eJwVzVdOQmEQBtDhybIHC5uxJD4YFyCKhUSJLsBlqLtQaYq6FQWxYC8ECyBg
wvHhZGa+77+5yfT2wlYiIuY5H4rojkT0mOOXDmfy5GjELH/DERlOZetmn6x8
krJszd2j4bsP9uUn8lVZl3fZG8eyHd2L/fX/X7pn84mS7sF8ZMabju7eXqeo
uzXvaMv39Df2awq6K7NGS1c1K+x6k9dd2C/50a2Qk03opvl2pzmSjbun+HIv
cyhbMj/ZlI9xIEu5myyywQClrjvc
            "]], Line3DBox[CompressedData["
1:eJwVzzlSQmEUROGLiAy7cAvqNqyyKBxiIi1lcGJQUaBMNcS9IIKz20FBydSP
oOv0Pf2C/y0XK/lyIiI25CMdkcxF3GYi1rMRN7jgfudL2HXn+A6+cW3Muq9w
x/7KXeoZroXb3Jq88BfuNH+OM3zmVm13csYtcU38wSfbN/ZsDS6l13GKj7YJ
1tyLeIpbvvvSR7ZPPOGSeIybthUZ2sbc0fyf8BAfuJatqie4Cg7mb+XKenAl
vOcO8E/2pWDvc3v6r+zKtfwDIb0rtw==
            "]], Line3DBox[CompressedData["
1:eJwV0ElOQmEQReEiMRFRwQabKcguwC0oIjZMXQDMRbEB7DBRdoXLsZ+o+P2D
k3PrVj14eaWTTqOdiYg6JrMR/WzE/FzEq7zD5VxEFQvym26Xh24Wua1/19Xl
G12ec7oW9uRbXYFP0UUDPbsfvrNb4jOcYx+/2LKvYTnd4gJN/OHeMyvct7/k
Kxxgige7Vb5OewzcHHLwyK4of3jXo/Sbugwe9WvmT/0xV3TbWJe/dC94crNp
7ui/zRvyjPysb6X/Sd8DY/M/iREmsA==
            "]]}}},
        VertexNormals->CompressedData["
1:eJxMXHk4ld/3pUFUUjIUEkIIkZnySghNNBgqUymVIaGIBg1mhRJSyRAVSqQk
uscQMlSKZMyYeUglUvidfe7b9/f56z7Pes5zndbZZ+21990n0QPHdx6axcLC
Ej2fhWU2/lytrtbj/XyAOhZ/LHOGitVWevyTlYWljVoy6dEL+IYh96ZPErHa
3+/cnpmZaaWMB44TPPxRjN+5+FjtarHHBLeT1Ce4qVSijvaFWO1ACVEW+J7q
pQYE3+aw4aHbkVjtXcErCT6L89tQbPYQNaAiUCQfeVu7y7RuzYaqz9SKJax6
tuoj1MQXn5iOE3e0PR59VyziraLYpR1cbw6NUAJz2QyM5e5qF77lXsIjmUm1
fEfeCzpGqNp5J5yjdsRpR8z5Ibm/9Rn68THUoZVnhDJQKY+E7+kfrVM97PYO
1coGOW49NUTdHX2WB39XKHJGNmyyHvU1vxG53tZPzfFcbKgRelM7e4vx3TGr
dvTVxKN9nKWHMhy92HOUN0o75Pnk/STtbuRv5PrU9E8b9TzAdOrc3HBtnzaZ
TNOVA2hH9y/1hyk6lOvhdI/b7SMbxm5kvJyZGUHi8a9Ce8Z7KQuPKA2rhfWU
l6EH4SFgvivBve//oQCfa75wCvi8z7HzKuBRITkKgGuc20nOZbs2L8E/d35T
BnztAkHyPX9ajxL8KUeBIuAsfeUEf+Ey03axuJ8qFlvyjr2sgZoeEpIDnjWi
X55oFxmk2HMCIwL4myi7BH0t4Hmoa94GqdeD1KEFHEIV2U2UrHrUUuDZb2Gw
MsodpNacvbWtOLWJehjvtgZ49jx4MLWLZZCKdgy48mKikbK4fVcZeA5dlDVh
E9JPvflz6eR4eAMV5CNMeBYZYzyTV+uleNj2ODB2fqbCd1kSnjuOXHtUmttF
edWN2un+qqHYm1c9AJ5zA6o/xNz8QlWMP1477PWW+iKrRHgeZc22XsiqTS0U
u1/N0i1L/aR5fmoxGLxnczu1K+mH15PUr5Rp8p5ZwIOm1qIQwO+NTp4GvOJs
FeFn9abYUMCPfjLzBvxngSHhn6XC5grgsS4i5Hv6lrwj68sL95HvYVUTJuvb
WI2Y8Xw0bZu9XwdVtnr2KT+NHqpn9IwM8PxbZHWWtGcn5VM8bJN5pJdK/KO2
Bng+1Tlksbq3k+qYL8Fu96uX4hZ5vQB4NqTOLv/R1kmdyus6ZDHUS1UNnlwF
PIc1K3ax2XVSiqojR0a29lLmBrFKwLNUQsfuEOsO6oV9yOd37D2U8GokBzxH
vok6OF7YRjXahoe6z/5Kvbw3Tni++S0v1jGjmbrR8yNa/m87ZatcReLZ9XXC
8jlynyjLyb0OjCuN1Mo8ZcLz08Wf/rgVK1OLd5iOWHFo/o/nP1KfL6SnvqEM
FkQ53pozQHlw2REdWNE3PxBwjZfznAB3ksz4C7iJSH4I4AdqbMn64VTZacDD
je0uAW48dJDgD60Y5HtGSvYFAO4t1nsMcAm+7YTntce/rXnpWkGtOmm4YXRs
kGLLUpACnreJWUu0lVdSqfPjM6aOD1PRXLxEN94IhHyRc6yilK9/fZImMkI9
uxzPAjxb1qkt+2pbRfEnt3Y68I5QcYX8IsDzmW9zTAxSK6lft/Oe2m4bpgZk
GxWA54tHTk3qaVRQ1sl8SevwPdiUf1saeLZ5sapm82AZ5ddz+/pi5X7Konwu
4XlyXEct7fRrytDe+Kupczf1SCOb8Dw8FHf6uyaDuph5JmvnVayzdfMIz6pB
5u833FtB2VeXRZdr6fyPZyFPseaM1DdI9/yEGvAg8kNiDvBwIGK4DXBUmKkB
eMy5UsKP5rbYLsD/+gpoAZ4Rxkv4jzbSaQF8T+NdTcBXeAoTnhdeym8FPIu7
mOCOfcxzmdLRr3vlWoGObEmfBzzbnvQjPEckHersLK9E8ve6vIBnHmPNdcDz
xCNfpOhYhXjOsnoBz2lPwwSB5yWl0xO9tlUo4p1AGvAswclGdINVxoDTOLUS
Sbb8PAM8D5qZkHiWNg71N9SoQA+XnHUBnt8nqpF4DhSft2DLYBlS7beyB57d
DWwJz0dkz009Ov0aresUzwee36zeTXTjzuaiG780GSh9y9JI4JnLWp/wHCeq
VL/x3goUz2HiDTz/0+fqKzPqZpvb0R6vT8MZ+F4brjlA9La8I1UD8MTIxhHA
O4XCCD+POw01ARdS1yd4ps07gj9dqU/w82/9CW7cIU7wbSw55Hva96aQ72dt
aSLnled0bd4hvw60ZmdM22WsG1XbOdYCz7Edw6dkPDuR64c3RU+wboi6bpEn
+rynU0yqtxPNezbHwRbrhsl7iht4nkzUbMe6gc58fVFqjnWjKZJVEHg+fnBH
yjy7ThT4+v3bYawbM5VP1YDnkYL8haHWHYjPe1oPdMNby5fwzPnzG+dEYRs6
b0TNBd3IWbST8PzK6XOOU0YzCrotJQm6YbWxk8Sz7ItFo1g3UCFvS94rrBvl
D0QJz2FCPZXuxcpoguug0X91405v3wDOU2h4q9TDfThP+XUeIvrstMtoGPCO
CZv7gPOMvCS8jW94QvC9ZzYS/HhSONFnqaVHhgDv1g19APgm8a2ET8UTfgQ3
PvuI4O01SwjuvWj/5kvF/chymGv1PJwHU/fVEn1+cOtJC86D6M+XW7V+OA+W
mkzLAc9bdoan4TyI6vn6Td7gPCiyz5sXeN6juPkezoNIK9j9XCHOg8YftZYD
z3kZu3m/sgyiHXft3z/HedBzPFsLeFY4dNXKNqQfbXm6+eMYzoPWf31IHuR1
X8q9Vq0X7UkI7snHeXB+2CnC8xp/wymcB9G6oEN8G3Ee3FiiQ+LZ5YqKwc2b
XxCLedfWQZwHX7+SIjwbnWiqxnkQabNG/Jr++v95cO564uvQGVEJNb4BM0ZL
OtPX9U0RX4dG0vsensk3YxjeYvo6aoT4OtTYKLdybqwZQ1yE6et2yBBfh1am
Uobnzpsx1okzfV0OP/F1iOOb72a3Y2aM6UCmr+tcTHwdusr3Jv4WpxkjbgfT
173iIb4OSR3kKXh5ai/DO5Xp6+plia9DXBYyCPDmSqav8/5FfB2q+cvGAFxy
FtPX3a0jvg5tjSjMBzxvmOnrShWIr0Nr3Rpuwd8tjGD6uuo24usQ29Xwm4Bb
GDN9Xclu4uuQ/5YDnmfumTL0nzF9XfFW4uuQqk5Q4stTxoyEVqav0+wlvg4d
EZeTkD+W/uofzwfD7Dog3q7IUu9xvKEHcr9IPPMdt+4CvGR5eDXg3HQ8h99u
6gT8SEU8WW8QfInw9jFak6znWpJM8HqnJsL/4Id+sn7eRub3/IvnrM32GyCe
30ecNMHxjB7Q8awstugjxLPE3T1z/fmbUP2YkyzwvL/NPR7i2U2R6zyOZyRM
x3PFtZwYiOcD9lse4XhGVxr7FYDnkfNjHBDPGr1x0ziekQcdz6Ho/i6I50aP
gUkczyj7zm/C8x8tW3aI598BNVyvdn5G/+JZPCVwDOK5pGBMHcczslv5gvCs
xtivCfGc/pL/HI5nVEzH85KJnSUQz5cKT0nOfJVFP2ievyu7rgb9nGvP9xfr
J7q05jDhOV5isRTgCw8emALcN3+E8FbnPJvgFdafCf6Y1ufnYSeZ3/MmhOD3
Cg4TPrU19xKcc/kWgk83M/XZSLNyDPs61LLdYwTrMwqdZSsLPM/yn3cQ9DlL
Tecj1mek0zqqBDzzaUtzgT53zS04hfUZ7aD1WZjL4y3o84/le+uwPiMPLUMJ
4Hl6dfc10Gfbm8YtWJ/RX1qfW/2MJ7GvQ292Z+/C+oy8aH0ubsr8i30dclJh
WYr1GT2j9ZkfhceCPttUWytifUbXP+oS3ag4FdgE+rzdie8t1md0+vcKwnMi
R2EO6POZsx6WWJ/Rv3guHxcIBT9w58RKbewH0LXLXkQ3BsTOXAX8u+BhgkfR
fsPLpCcQ8A9/NSjAWUtqCf8eS08EA/5Q0Zqsr4xWI9+jvVOM4CaXk8l6B9pv
+C8acAe/seOvISf2G8iK9hvDg5mh4DdkJD+fxX4DLaH9Bv/LGjvwGyY2Zmex
30BC2yRWAM9zz10NAr8h/uBUJvYbaBXtNwQOlj8xwn6jt13rIvYbqJv2G10j
1jLgNyo5Hntgv4Gcs4algGcLM8mXxthvSE/MOor9BjpVtpvwrJo59hT8hpzW
2wLsN5D432YSzx7vbMTAb1y3fRCN/QbqmuInPM8EvzsNfqPjFOtZ7Df+F89J
zw60gL/9VdFsDzxs+qVO4nlzstgXwNljPh8CPGzsHOH5+sEpsr5I9zrBV30b
I3hqugFZryOlfBjwB7R/vmYvQXAJu59kvTjtn03/Ot8C/3y1cUAVeJ5L+2eu
Dnc/8M/Op8VTgedI2j9vrD69XR7758hd+qnAc8RTeyHg+dQvCS/wz/fNDn8B
nm/S/tlZ+nUG+Oe0RcaPgWcfmyDin71iK7brY/9s9X5bHPAs6XeG+OfEUBkR
Q+yff1lSYcDzfuPJOODZ23C9D/jnJPEfbcDz9kNrSDwLKya1gH/2W74/A3g+
fHcd4ZlvnYqONvbPBz3DIv/L836JT7ehXjt3IO0YrtfQdroeLJRNugM4/1Fp
R8DL6HrQOuFmHOASN/4SfISuBwXWryH4fsnLBO/Yf5bwzG0gSPC/L2UI/oWu
B598e2IH9SCflNUhXA8iBW1JUnff731RBvVgq8Gu7bgeRE3HvigAzx4j5a5Q
Dx5ym/kJurHWqJsPeHZn+yoP9eAij8rduB5E87KDiW40VXNPQD2o9yfPAteD
iLedQx14NlP+6wD14MnfmW9AN+7wmxF9vl+p5Qn1YEbXp7OgG4+0PhGeo6N0
c6AenP6yIhR0I7qEyXPE/Ph1UA9ytTzfhetBdChIjPCstipjCdYNaoVCV8t/
deNH1uUo6D9c21Uw3wrnKTH/SsJzyrhBNOB1D+0XAh7oOE34OdS8PAZwu7hs
gu8LkWfq9rNssn7VnEmCy9H9DR6DMwQ/zbaU4FO9zP7GcpX+Aehv3JAIS2LH
edC2egHJg66/cs9Af+Ou2XqHAJwHH32jiH++zvHdEPobxx9f6S/HeVCG7m+o
37PZCP2Nm1u2LyvGeTCZ7m+8fWLwDPob7sk7bF/gPLiD7m+0HXowC+dBKn1b
gvE4zoPBN1OJPr95G82A/obLvGhdBs6DV+j+xqMIx+fQ32hOuk7p4jy4SvUW
0Y0vEnEt0N+QvriUdRjnwd4NHMw+UrbVMehvKDuqxbN0y6J/dUoV3a9L+LzP
zfQQ/lt0v+4Z3a87bLjgkb1FNGOQ7tfNG2T263KUzB2O4/XldL+OfzWzXydq
POB8el804xLdr7vEw+zXuaus07i2K5phQvfrquh+XdyKOrF23puMVrpf957u
12VGH+k6sSuW4UT36+bIMPt1VNiyNzfaYhmv6H5d4g9mv+56yrdSwIPpft3j
Gma/blRtvEdKIZbRQffrMuSY/ToHvwmZHe9jGHx0vy6shdmvq6sSX2qfHsV4
QvfrLpgy+3XCXNKKisevM4Lofl0f3a9boT/XxDgtlOFF9+uK6X5dqI+PehH7
4Kt/unH/Z5Qo1MPFNmIemVhHZcfjSTwHq3tnQP3m+XRpIPYLlHVtGeHf+XW2
GKwXf77eBdaXVe0g+N9b3QTf99DIGfAhzqUEV67QyoTvWXFrdQB8T8nMIcKz
8JU/ZH29OIsnrPeF8Me4nvwL8nftlOcGw3q3Xc9I3uTW51gF639H33CF9YEq
AWS9uXzIE1ifdz2N7LN2vz05dx3L8X08XQOU4JLOZS9OlVOWLGoqA+nNVEPC
WN9Xq27KoVBKY2NdO3W3Z1QV8PXJXbqJb4co1dUbotJUKqlq1prVYQMfqS88
0l5nu3sodudABTOuTkqMS1QccH6Xs2+3tA1TGX5TEi4KVVSdi53I4d1FlOHK
XUEFRb0Ux56Vx6YYnZRl7oeVgB9WaX6rt26EGpMU6dbzqaI2rJd1X/n1Ioo8
Z7ju7Jw+infRl9qjPzqpNpNLtwA/69A9GV4+TKlOv3zxSLCK0kjUk5if+Rrt
E3BV9n/SS9Wz3RfzeNJJ2X7zWQ14pevZ9JNxQ5SCwKc/N+dXUrttDETbl9ei
9KHEygcFPdS9cysGZEY7KJ/k2RKAK7uK7dkaM0D9qkkzC1Qsp2K5zJQ3NLWg
h3X7t4uIdlPT9z65VCS3U/LNSwi+IEZfgf1CL+U6aiUrYlNKaQRtStr6rhNt
5UUXIlM6qQPhP90umbdSfDvPEHx5tahEemMnFfzBUH2fSBF1JXPpo8nHvShV
tPSOftdnytTNe4S1+hnlNZr67EHYEOpz2Now8bmV+rT13J6/9g1UYeNMOqy/
81hjb/iFeqps55lz43YB2v4CD8j64h97nKCvMa+Dv2gTzof/9Hl8PsvUXlwP
d7BP8/RiHX1x9Q+J5yzP8ySuojTWkDgMKssjuEBh3m9Y/7ZIZhms/8l+icRb
Wa7rGOC5r9MIniLNS+LNcVvTX8DvrL/IB/jx8DSC57qU/thUU0+Zz9W2cS7t
o9YeeK4OcbXxY6DbrIBGKo+j78fn4AFq6QY9Zvw84tnv49NEyckcdksLHKRO
uQZJQ5xkKlDoxOsmKkTi/kWn2kFc7w9REA/G+wWEdRyaqDmlggtT3Qepn4V/
ZeHch7zW6s+1aqQc2ZMuUDYD1NZ+S3LuDuefbasOq6fGnltxHvLto8Z6xsk5
Gsgy9vu9/0Ttv9pxY3VyN1WfLkXOS67wnvEXqRqqwYXz/Kywd1R06mPCM5/0
hRMs6R8oReEFJcssO6h9Yb3kXBIezJ/Zz6FJ+U2KSHvgPPmPf1nfZi4LlRCG
YcU2ot/CsW+JDvzKl/8FvEX4KRPeVn1OmQ34Mdu4+FPrQhhnDN2IHl+cTCb3
l336kYeRQgjjw209gtfyizH9xp/2lBvyIYyTKUxdz98iQvBl6gELQe9U1ZRs
n94apOqPGKkB/7LsT6MaWq8yzoz6GdZHDFOiLimrgP9Ld9/dANx3Uxn3tbQR
yjtPkdzf489GLUUnwxinS8QYKTMjlCvbgRjgn1plZwE4g3pza2PkCDVP00ca
+J/MLo2A71mYUSd80m6YWj1fYBXwX+azQGdWRAijZt5714ltg9QHh0zC/7Pi
B++3vw9kLBmrHtsr1kcZql4i/NvfuV81tamEquj32WvEU0d5rXhE+Nc+kZe9
9vBlRsznR2IHrLqopOwWwr+8bvYq6IMkmyTM5sT58x//UR8fXtyPfUNt1rwX
4COeXE4k/F+85KdzKDOE8VuTmVeVHjHz6eTm8vOw3qDfNBfWW44/JXzeSLTx
BVzsRhv5Ho7dsszfZYxVLwDe/HSQ4G8L3zD1nOEVoF9Tj/TuFkw54fhfcC1f
A/jvqleQmBPQiAwym0Ig/p2DXooA/9canfnP+jShaL617BD/vGqSQsB/x7D2
ZffXTWhhQgQvxP9pVHkc+H8w/Lh+owP2NymfEh7i+G+b5S8J/LceOPWTzaoR
6W9TWw7xr+7iIw78W2fJd34Iq0f5OS/T7HH8Lzf6Q/gPmLyS5//+E0JDmhsh
/gO8rAn/55T1XsnoejEOZTH1RobWmfxWpxus6R9Q6fGecxD/7xiVhP9ZJhVd
EYy2V096mHn1Xz4dvNaiCf5Y5vvcRvDLm3inCD/snasJb2xJ9c+BN2evhaS/
fSKtj6yvW2DQBOu1F0iS+P8xWqYFeLqrH/meuvlORJeQWwZZP4vzLsGdlaOY
v6+Zv/bqtupG7S+v++ngvLaaTYXoz6Bk2uJz3T3IRsHvxB6cvwwvqZH4Pzvm
u7qwqBfJni9K+ovzFGcMO4n/3WznP+B8hPTD1nNCPrrtlWsG/Bdyfv+A8w6a
UVe0csd5Z9CvgPAfZdt08GFBD3r17rws5BfHA2yE/7x59k04jyAjXfSqHOeR
VSeTCf9La+9O43yBpDl71S/ifHFyuIbw77T1o9TMphL0bmsTG8T/N60kwn+a
+q/k359bUVpCyZ4/OC+sty8m/MuNe05A30TwR+E18I//fOP9b6q7oQ70j9rK
9hj7BLWCXBK3jRM6hDehv38agLdfPU0E36t1eg+sX/iNQdZ7sa4g/Fv+mU++
p17EYAHgJXpBZP3qYgOClw/Yzgdc7ogmwS18p69gv4HCsx6HZ2O/oXRphxbw
v3h88jT2FchwqdXH+9hXXGLoE19R+baKbWvbMOKdk6x5DPsH8cz3wsD/n/m/
2fTXjaC9+jpTOtgnzK34ehj4H31brRRRPowq6sarH2I/wOXpIAX89zns6cR5
H91RzNGIwnnfxDKW6L/V0JMAnN9Rl6ZXw2Wc37kPNqoA/zsFe/fjPI6Opdjw
rMB5vH/8B+G/eF7na6z/aJXR4m2sWP8Ff9wj/MfN+BjhPI6C5/PlWeA8Xruc
l+Tx4tmySVAX9XSZ7HP/j/47b9LaAfzI/mC1wfwgC0Y04Sc/pH4X4NK6hYS3
5RsGCF6w0McE8H16lDWs/8f/BhVf8j3rr/fvA3zR9eNkPVUfT/Ddb3r3Au69
zZTgOXw7goD/gMiKDsw/UqD5f3Fy1kngn3XgtPQDlUr0j39d/iYW4L9X90Mi
5h/94z9v+ylW4N+7qMlqo08V2mB5dy/wX3MlTh74d7wQsCZVsArdH+Yj+t9R
veUL8H/TbSYC84+20/xbO+VfBP6Tv29X8FMsR0to/t+8tLIA/oe9vx/E/KM+
mv/H2yPKsS9Cxos4RqffP6OyGu8T/p+ebtIH/p+GpExi/tE//qOtjIKh/p9a
sOMB9R//42izSw7i/IcTywCOc6RL68+UFivhTcI2hpzLP/5DHQbJ+iiU2g/r
N9gGk/Wbo1oIHirExBeK3iX4jr1MfEtaFsGdaP15WLPAEfSH2+hNFNYfJEnr
z9qBEVbQnxcy05ew/qB/+rOQ120Z6E+6td1zrD9IdlOIOPCv7XOpGPTHXaZE
GOsP8qX1p9nqbDHoz+xXpsex/qA+Wn/EslX3gP4InW/WxvqDjtH6Ixrz5i3o
zyPL9++w/qB/+vN+4ZbvoD9ZLJ/Msf4gD1p/9pY6lAD/WWmTGjPvn6F//H8P
eHsN9MdroNIZ6w/6pz+KR48GAP9Vp7k5de6t+F/dms8vYg46/8Olvgj62Qbd
KwjPiw5vJrztE2Ql5zIatpDgs09HWsD6427fi2G9RulT0ocpOBJvCfhnVhXy
Pex0/m1p3kzwlQMmBFddIEbwo0KGVpB/1Tf3zcP+E7HT+bf/vMav2Tj/8hyM
i8L5FzkPDRD+Zzqs+8/g/PvKZYIb519UMpmzAvhnvbpuF+TfOXw2ojj/Im7r
1LvA/+4G83TIv86Hr6Xj/IuWta0l9chWBlsp5N/CD+fFcf5FLuJDxP9s1vyW
A/k389r95zj/oqFRTSXgf5n5zhjIvzORu41w/kXHs98R/t3TOHJBf/ZcOXkM
6w/i0mXWBUclZ05B/s2V3eWP8y/a3ZhL+J/nE3gd9GdGZsgF+rv/4l86NHud
0Hp/RgTTf6IVtP8sk/EivJ132UR4C/8mTnA/B/9wYWl/RhnTfyJf2n9KXLbd
XyLgzxC4Q/wn+kj7T7OBZYahXP4MxPSf6CXtP/3Dr12pLPdnhDL9J6qj/Sfr
o7ub1ugGMlqY/hOJ0P5TyOHNAvf9QYx3TP+JPGn/+ZHn43zAG5n+Ex2n/efj
2inBfdOBDHEd4j8RG+0/z/yW37m0K4Bxguk/kQTtP0Us5WKfOvozBNmJ/0SV
tP+8LaTDtYz9MsOM6T+RPu0/T7FfmQ35V7SmggvnX1TBk0z4Lwn6Wykk68uo
Y/pPlED7z9iL5WWQfz0LvOPgd4x//uenC+8K+D2y0ewmJ/b5aM+3U6TOOqi7
iy3+lx9jixbz9zpF2n9a7G8VgvWR3y4vgvW5MYIE15gbJAy4cw0bF+C/Bplz
F4sXZBD8wNYosn7e5p2Ef9eZQT49XH+9vzJhBvE/qjmX6M+quJEYqL/iBAP7
If71F3FIAP8/Q09fhPor0vvRUYj/G5a+xH9WbV7eA/XX7vsLT0P8zylg+s9f
jc36UH/tPh0zC9dfaMPdlDXAv5KuhzPUX6HrjnlC/NeJqhH9Mdju6QH1V5ae
1Bxcf6GQHyGE/+pPUt5Qf8X83nIV4l/lQj7hX0EheM5Pb3fGY6b/RGto//lc
bcFVqL802sMYEP/uOnGE/1XmWskxBxpfdTP95//i/9G2LQjq3A8m2h7wO88+
um/DcXCGnIvpJmHCm8NNZt9mVntiAazn5dl9EtY/UbtB9MfjRT3BD64JId/j
SPdhLN5ZEHzGv5Hg1XS/5eL9Y7+hr9KrWiq+Eet/rbkr0Z9GsZBA6J8sbnMV
NMP6z/3cTBL4tzpldgv6JGzdgbumsP7vovsk+6J49aAfol8QzgD9b9bbqA/8
mx7P0oe+x3n2ooUeWP9N1u8i/LsbNDRDf+NG7M9PoP/fnh0j8e98LMIK+hiO
Yyv3VWD9N+yPIvn3+7o5YdCv8GlNN72E9Z+b7lcILbAbhPor+BTrLoj/7BPM
+Lew9RqFvsTNi1fU/2L9l3mYTPjveFOzDeqvhrIzv/8b/4px+1dDn0pHbnJR
Js6z0nQ/rfXHVnIutkJbCG/GZTmEf84nmlKw/jV7Lxes76f7Zidn1RJ8fsjV
xYCfoftjg7nXCd4Ye4TgSiauBLc4r3UA+l3P5bjTcrD/MaX7Xcp8lDH0tY7b
REulYf9zbl4/qb+Ma7fWQv9qzXqZDGfsf+wPXCf8P1f7UAN9KpN1L8/qYf9j
Qvep8oOyWLH/ocZ+xG58hP2PCt2Petc3kgV9px67+uCb2P/soPtOJ6/I7IP+
ki7n+GAA9j/X6f7S0YsNytBH8uU3rlmJ/Y+UbyfhP5ljuQX0H7K8n1vNwvp/
cRYz/rdx8UtDHyn/ysD3vdj/BNN9pJwj+Vwwb+H+RZHH4z/6z/eG2XeoKD2q
vcc6miFwi6n/bEHT5FwCS8OWAG9FdN/y1dW0ROhHpU343GatfoYu3kskf9fx
E7Pe9uvqvJWgGcE4+Yype6Ziuceh7/Tn1/4tm3De/3fuOhnMunG/6a2qwvTL
jH99Krcy5n7WC012NSnGagvT+4k/EH8F6kCe2Cwyx2h3kIPEiVnCcYJH16eq
An7B0ZOcb0fxAJl7PHnwgRLgG5yZ8zk7eV+S9b8GT5L1gcL8ZH1EeNgHqMNX
mk7pGmBdZH1oSPqcteoO+6EOrz52qB/X5dTig1dJPFzQ/Pk5Fdfh8908WnBd
TuWtrCT9qLZlmR2O0IdSuGjugXXxoxXTD1wtMXSFOly3RDBZF+ti+IFcOYiH
iyr7+7RxHe7e/TdvHtZF9pWnyH1ctzrFF+rwpvGkqI9YF0+8DiTx4FT/hh/q
8M/zPQ4FYF287PCHxMNMLZP/lARhdw/O69qeNP8rIlf4w5zTbl7RgAlNBtVk
xZzDuby6zAbq8z+9h/hnYb386pZG1ofzdpI5yej9NmQe8kYJk/8Wbi0yD6n8
3ZHgcjrM37Pa3iWT9Uo9Tj6ANwaHE54fNSYS3K27nMxD/laUIuv3pzipQr2t
8yEjB/tfamd0Hck7bsHGy6HelnW/ao79L9XKf4Xw3HAUGUK9bWj9+zj2v5Sv
9SEx4PnFq8bMI7jelks2FziH9S/RpmQUeD66af5sqLeH9D4tD8D6t+dxK/G9
KZxZn6Rxvc0q+/sB9r/UodWBJO/YrHngBPX21oe9gqJY//Qe8hHdY/d7kXYB
19siAZJqN7D+hbneZPZvj3i5wDxTf/9H07lynyj/vLWEz5dXuFsncb3d0xgz
ZxLrX5BDCeHz+vRHMt/Yt0SYzCtWiqsQPoNMlMMB71DIJ/jptWdIXggdqPAH
/GlsDcE1nzN/5+WLmBMMuHrAUYI/2txB8GmWEdanuH7ejsxSQM9kRIWJjm3d
WCmagutnttwP10HPKnv+rgQ+p7KeBR3B9fPJyGlhXM9Rjm2BssCn2C2d9RSu
n58UxIjgeo662GuxHfhc7Fks/ADXzzW1aCvomdv7FHHgc3udW0Qkrp+fV1z6
A3pWbf6a6Jh97lzTS7h+vjURFQd6Nq38l/jYWZyh2YK4fp7ynHAFPfO4N074
9NVXdxvwekvdU7jgffPmF0o2WpfwKXBxy11zXD8z8jj3gp4lZpYRPiXMBb7A
nEDaub/qwMP2/dpEB2aVGXcAvq/Wjcwrvqt9ReIw67tBE+AOH6fIPOSDwA+E
t7i7UuR7Ms9tJOvt5ZcR3Cf++JHnOB8E8PC6A58CDw1JXbwvLrj+Ic4Hi9b6
WAGf66WDSXwGmNXvdML5gCNSoRfyg3GQIskLa54sXb4J5wPLs2t6IT940n2J
6AyeL2k4H0jriPMBn2cnLokCnwYdfBoxOB+gaPlSwuc+V8Jn5NbUTH+cD9oc
VZyBT+0UCaIDus2bS4VxPlhzNFMP+DyqvJnwma+/xtaC/wKjcwvzd616ek4p
695vXsgHaZeyVYBPUQFukhcUdN6Q+UYPkYdk/vDFtwYSn9L9fWQu8enqcTKv
eCo6l/gcpSP9BDfNyCHrc9tDmb8rKU4S/LHnYrLe79ZsgrM+jOyG+pb763sZ
uO8XupdoAp+Z17Ibob7dtSYrH/xOkWE68flbb//kAn+z1mX3B/A71z6mkTrL
cvzkafA3Ve5yPuB33poyf/dJsb/5Burbd4kLzoDfOXjAjficl+fW3QB/s7lv
wWK47w5H/MjvOOs+HxUGf8PosrgKfieB8xLh8/DjP1+hvv05S+El+J0PHzcS
PvuCnuwZ8nqLXjemskF8Jk4tI3yyG/i2QX3LcXqvGq53qfN2hSQ+nV+uJ3OM
SR7mZI6R1+kA6dufqxkh84dyKxTJvKKCzxi579sC5hDc46Q0mUu8cptZ574I
20FwF4O3ZH2F1EvCJ8dUlTL49WrlC8ng32dxnCB1U5zOqVLw69N8GYq4fqUK
nnST+HSLNdIDv37ub/8KXL9S8w4HCwKf1a5mO8Gvi815FeCG81Rt5k1VEcxn
5RHBZqhXVX4pdIN/dzdh9m1ufPDfBX69YNnm2bh+pRKrFUmeEmjU7YB6dbH6
G1Zcv1LGTssJnygg0BX8+pzk/HHw7yKlioRP/U81/DA3MOfdy7MwR9CxjDk/
0Cn1PBn8+lGu0R/g36skGwmfWyuZdaln9gpX/8V7GG9uMvPRJSNm/fmaKpqj
s3oPo+E3sw6to+tPycppb0f1PYxzdB16+j6z/rRNzj/boL+HcZiuQzepM+vP
kVWIzCUq03VowHdm/cmtZknmEu87M+vQE3rM+vPi8RtkLnHiJbMO9Sxl1p9B
DpFkLrF/LrMOfU3Xn8VfDV8B7qXBrEOXP2HWn4IrSm/D303mYNahNXT9qeLD
S+YVpek6lP8Xs/582f+MfWHDLsaICrMOvXe6/B7Mu9QJrtj+E+ZfprUIn+H1
zPpT0eJHeUPrdsY+ug6tPhpM5gYNfh8hc4O67DmEh1oTGzJnKFV8/yPgSfES
5L63q3qS9beMK94BnvPelVkHWZ4huMSSW+R7/sWn+QMPGYjPhjrPahyfiJWO
z59X7uZBfDYFZFlDf+VffE6OflaH+DSdlt8G/ZUMaSFy39UL4zdDfCaxm2bj
+EQ+tI/647ryI8Qn+6wHXNBf+Refz9cGGkJ88h38pgD9lX/x+Ss6ux7iM6t5
Uhr6K52ej0g+sj381AHiU2OwTxD6KxHWewifD4WqE4DPaydKn2E+keUNbcLn
vrorcRCf5qWpS6C/8i8+y5KNyXzgva+3yPxhDq2fr351EpxqkSRzgw/WejHn
VSpbCb65V4DgObR+fl6cQHDrbVkEv0jrZ+/Ul1rQz9W2I+rQL/Sl9TOlvbEU
9HNFhn8V1k+EaP2cqvgxCf3B+LYv7Vg/UfFZeeKXAq4fOgT6eSJKLgT6hW20
fiZqbM8G/VybrBkK/cJ/+hm25s0F0M/xOGMR6BdOPh4g+ehyNmMh6Kfv7+O3
oV94l9bP3Uqzy0A/PQ8GlUK/8D2tn5GjlfPgvt8cqI2AecN2+r4/Wve9BPTT
oQZtgX7ht2ZWko+6zlaGQF7OKeQic4AGhcy5QftJCTIfeCkvhOCBRszfnXGI
kznD9NkMgqd7CxN8MlKBrF/Ns5DgB+j8rmfevhzy+2xZ4dPQ/xZt2ED8kt2J
ujOQ322mb9hB//vdrWTS9/4Y5jjuiPO7nYvtEM7vKPXGDMnv+29bMHRxfhc5
YDGE8ztaSNd9UnEGAZDfv/BHC0D/e3hRAPH5Fh3+jdE4v1ePvqyA/neK1nFJ
4PNl8/YDkN9DkvJPQP97PZ3fD+konIT87hpjbAT9b4E9Jsy+k1+EOOSjr3z9
S2BO9vog0y89L/z8yRLn93sxeRrQ/9Y2LGX6+eHEZuIzH4iQeUIvkSCSj2Zq
PckcIOO7HpkP9KT9Z8hvWYI/lGTOGWrQ/nNAPJfMGX6pTCR4Gu0/fWf3WIL/
LMs3TQA+JWj/KZkeFAL+U2Rx+RXgs5z2n90tvT3gP28HiAvA7wljDc7kd4QM
adV74D/3x6cKwO8J+7y4dYHPzddNT4L/vPW5bjPw2W4+vgr4vHBjuB/8p/GD
I7+Az7e0/5SZ9EsG/7nRfuNN4LPVsp34+ePKTXOFsP80P9riBHy+C93O5LPp
/b2Ptd4MQXq++59fqlJZ0gb+03T71B7g89IlZh09PviCzAf2ce8lc4MRdH10
uPs3wXfJ6JN5vzV0fRSQ/JjMAYpXuhH8E10frTmtQfBzLPsI7sP5jvA/2/TE
ZqiPjFb2p8J9Z1ltQerQ1B+71kJ91Hz9jz78PtBC10eSJ9dZQ31Uc+SLNfw+
cIauj4yee5dCfXRt9yAHro/QM/p3gQzfeH6oj0y7VDlwfYQWTT6XAT7H2bT7
oT56wjIUA/f9m9qIGPB5u2bgPNRHi2xTFuL6CPW1lJH43FqZVQn1UfL+wzK4
PkKhdH3kGKieAH7+74ne4xCfNmGLCJ+nGHP/Qn30KuHiENx3f7o+WpljQub3
TibWkfnA768vEz4rF/YRPPPmXjLXd15vLuHz220PgjfIdC4AnKWhh+AuRoUE
L9CsJusv03X9to9ZTVDXzzKK4MV1PUo8IEX6bIeC3B2grhfdvf4l/N7OXoaI
fi6yaG2Huj6/5vhz+L1dmKOI9Dm5Tqwfgbr+3pqQVbiuR/zHm+uFMZ87Fs/z
gbp+thHDC9f1KJ86yJwzKTIcg7p+y9yuYFzXI9VPPYTPMxyhwVDXb00JdMZ1
PTpK1/X8ZaFiUNf3vLPQwnU9yppkzgs1JbhegHoz4QiHJq43kR9db25lqT0M
9XvGDuFJyEcddP1ek/AjCOr9kY40Flzvowa63u/0miMOdc6ZHx8dYB6MW8OF
xBsjkJ3gpRnf3QDf/UKL5H0Rgx4yP+b0PMIJ8Of53SRuM26JEzx/9jSZf5ud
WE++R1G6ZPjb2CBVz3h/FrlWUDtTlpN5+IKFPDbwHiwkI/DR1/JKqmBpGHl3
wDZ43hreg8UVBPkqOVZRwf2ci2AOUDV3xzV4D/Y1Z9GjftsqauODUTGYAxSN
tzgI78FYNjKqtqRWUvouIWTe0lTimBm8Bys+4itnrFFBKed9I3OAJqWO2+A9
GGPhouitg2XU8uJuMgfYh5TaDXnqqLrNW0tmNpVQR0WZ/as7ixvIvNO1uvQg
mHeaFhZkvnOx0SDzeC88Xci83IbIxYSH1SJCZI6uybqV4KxJi0m8lZ6qIOsf
jqb4AW65To/Es5LurDvwjit421WrQ34d1BGtdWROMj5X9wy844rW+/1OxrOT
WmH/gMyxn2yYvwLecZn/fHVeqreTWrbiDHkHaldw/jy845K7baX5E+Z/WVeT
uV8XN+QP77iGF7rOzLPrpJqKA8l7AfOXl1ngHVfEsY4DodYdVDyVTvhJuttW
7jb7K7V33l+LicI2KqGeQeZ+5/+WL2YJe0dVVHT/gf5ikSNzriBvkvsPzCPd
CnzAD/NIO0L4CT9rmzTHAX/ctG454PrHZEn8lP09MAG4dsVBst42/DfhpzVs
hHxPLY8wwed8Z/J2vm+ZI1tZA3VIJdDjUnE/NTtJnfCjtOA7F7y/EjDi5OwQ
GaTmXmoh77A6F4iGlmU3Ucmq3xphbpfFxYnMRe91OfW4ILWJylZcUwdzu+0u
66WBn47jXhzw/kpwTEz/K8sgZeXup0Hip+EsP7y/2r3qTjDM7cr7riL8bK8X
o+D9ld19P821ar2UUswtEj/bgrTuTr1/Rm3S+dIMfdAtoSmEn9yBP0/yboUw
Wv8y521/0u+njGU2/H0WEsJQGWbO236g3091bhdQsjsfwtCTZs5lBdLvp/SK
zkQtmhvKSOZjztvuDmLO2c5rvEbmtQa4mPO2CibMOdsneQfIvFbhUua8rUYa
c842pyNlL8xfNaxhztuaVTHnbA++nroO66+MMedti+n3U+pCF68BHv+JOW8b
MMKcs/1wTJoN/m7lWua87b5rzDnbfSfv7vsyO4RR2Mqct82g308VHjgQxFL9
DIkMHc4Cfmyb4wk/HwskLsHviYstVMgc1K4XzN9n70nOJnNTTy5OE9zMVoTg
G87mEjzQ5R3B33dKElytPZHg3K8bCF6Uxfy92EDYiBvmvK++f7cI4uckryuZ
9xbpyXgH750mLTwTYO57lshKMu+duiF6G8x5cxyecIH4uWDWOrkU7lfLzlNF
qU2ottXzCMRP3LrX5J3136ePS3MmGtGihGONMPc9xuO6DvixODmd+yu8AQl9
CJeA+OEU3Enmvc1le/PgvVPo6QWtMPd9zd+U8GN9V2YMfq+9cDLzAtyvlPI0
wk+MzEcybyOamUTmlB7LHSDnXtekQOaaDH3WElzZzYZZF2z8TNan7zIi+MSX
fIJfaDxO8O3pnwjevSeT4M/MnirCe4OeZrYkeH/w4LQLiR/GCbtl8N5A87bP
AtCfvMHItcBPxaWsV/DeINZH4zm8P1C8IbYY4ke/024FvDcIfmXnAe8PRD2P
Ev3h5s4Ug/cGj7ybtEB/0KcvRH+Mqc034L1BDvemB/D+YExqgMTPbafo7fDe
IOPA10x4f2DsbE/4WTd8WAV+T7oQqOswjfX5ylrm/dLj3UjmjizdIsg8zKol
zHfK5qNbCC7o3MIB+BpeIYLnBLKQuaNmawVOwEPTHUmcLHVnIevZKlYSvFzH
m6yP/LtWHN69PPjcVJeH81d222vCj1GUdhS8e+n95dnYjvNXksVTdeBne+3X
KHj3svem3r21OH+J7NjGCfzsGgqugHcvi9/6VHfj/KXvLqAE/Pw0G4+Fdy/6
p7NZDHH+EtvIS+JnbE5UCLx7UTu2P8YA5y8Be17y/uWeaPk5ePfCOi63yQjn
L9+qIqLPL54yf+8cTLzYvqBhE2MB/btJabALmQu6McZD5lX+8SP0bD3Bfe8E
HgBchubnVUowmW+JZN9P5oVCaH5UkCVZb2l7mXxPZM12sj5aPU4Y+FGJOaWe
71qBntH8qCYKRgA/FTlnlDvKK9E/fjRcdSKAn+Llk2wKjlXIu7eD5Hfbr7Wv
gZ8c7UblHtsqVMJ3TxH4sbN8ewP4ib6ivA/zg0RpfsJ6tQKAH60EyS7MD1K+
pUL4WX5ExBv4mRHaEYn5QT5b3hF+BtknZSF+srYcDcbxg56aMeeyuK7pyMO9
eJvJQeZJSvMOkn8Xi99vMmfSvNiE4BdkQwnOwfOT4OHnHhH8q/AHkvcvDi8g
eKdkPMG76Pt14bvlKnK/auqz4V1gpccE4cc9qokd7teq+8HC8C6w+RifMvCz
gYfzMdwvGfH6cny/kDR9v+7UjnDC/eqbQAHwLlCQvl+MjR1L4X6d9GveDu8C
52kdJ+/UIsde+sP9GpK/8BLeBY7S92tV3SVduF9rr2YWkneBzcz4mRx99Qn0
p33I8irMj2R4M+/XW91XZK7GPpblNfR1rn87QvI4d9AmMgfSdSyazIH43n9G
/r2cUScIvuE1cz7kHa3PQ25iBNd+vp/gxbQ+D+if7oT3qMnWPALwPvUErc/L
39nHgT5XaSx7BO9T/65k6nPavUxB0OfEYYY3vE+VNwrkAX6KSniMQJ83ZO13
h/epN2l9dswPigJ9fu1l8hXrM+q3e7ge+PnOX3sF9FmHUlKA96kLaH2OXmFy
A/S5xdOsF+sziqD1OalKbyPkr/ARi+cw3xSd+JDw87u+ueH2oB9DkX4n/Z3O
79t64uepfPVjBDDzO3pL5/cbL4T46nj8GdeY+R350/ldN9d0x7v5/ow/zPyO
TOn8bunmbwZzKQr0O+m1dH5XvZYgDHMsfPQ7aVU6v7OU2pF5GA36nfRuOr+H
XzUm8zBNzPyOCuj8nmTeJ7cpPpAxyczv6BKd3/V54w/+8Qtg8NDvpM3p/L78
8dJqR1M/Bg/9Tvoxnd+Plez5Cv7HU+NLPZm/o/2PXm4rmZeQd9pM5k+20P7Q
8utSgh/+/JvMUWQ5m5J/71jwKjKXkjjNXJ9X0UHul/K+KIJnCpaS9bNofxjk
Uh0O/jCw8PUxiJ/kAiN54MdtkbE6+EPpw/6zsD9E35U6NYGfZDSQBf5wxY2W
DxA/f+LSf0N+PzbD1gr+cFcvFjEcPysO8MkCPyKrXquAPzTkP6gJ75sDrhZo
Aj+HmmK0wR86tub4QvzEUnLywM+R2rSD4A/NnW4qwvvmn05vCD+dinEd4J+P
7NgwAvfrxUumPr/5o0/mQJzm85C5kQm6vojcnUjmHFwvTZA5h+HuQObv17s4
yHrP3G6CzyQyeTgSrUbWDw5WE9ycri/MYkceQX0xc2q3Ify/EYfo+uKRiNYV
qC+UwzNzQX+W0/XF6rKctVBfSLXsPALvkv/VF3kapWFQX2ycOyaB6ws0n64v
xseux0B98XEPTx/oTx1dX1jFy3FDfWGUorsV/t8I2R28hJ95i4froL64Nu/E
Zvh/Ix5ubCf8jNugPqi/NHqTE2B+SneSWV+IW/eROY3yak5umDdYQNen6WyB
BD+rUE7mEEaXMX2RHRIhuNvt3QSPfMmcg2rf/Y7gzW6I4NMJzPpU1+X+T6hP
M3Jt+XF9ihRk+wg/u7/fsYf6lE9gPoXrU/T3Rr0G8GObv8Qe6tMOpWFhXJ+i
S3R9evnj3BioT3X1xw1xfYo06Pq0IN3uKNSnK/l/H8D1KdKm69PHGxz3Q316
657BayOcv+To+lRYI28X1KedOrcUcX2KvhuvIPxMHTwckBk6QI0s3d6SubmG
6pL9vi5yfSOl0iSY6Lt2iFrve2VPhVMttdq0TFDdp5oK+sFR58UxTF0QnT9/
z9xP1E0pFyXXnpfU3pU3uu+uGaaMepblaq34RL0pV9rEsv4Bqk8q3u4WM0SF
vhJ4pfW8luLWSBR/EVGOHAJDVY9erqZOmS9YYCmcQ0ksHFerLRtG53cceXQ+
qYui7MdjfPHn1F0FFdjP3mVHvKiWr1TasY8ndPBnGWMr2c+I/M7fQb7dlMyI
yFQw/vyxt2gd7Gf6UNiHlbHdVLNZzwcR/Nlb+1kd9qNwd0lZy5puiiv8aNkX
/Gm9gncN7OcR24uTh9AbaoNzacRh/Lkkd4LsR+q3jU0G5mX/c9tx4Gmuh4Mi
7MdLKvhJGeZlYr7fsguYp6C0BUKwH9vxM2Y7MS9PLqjvOI15sg9rk4D99LkU
TaljXrbEfbWNxzzdFBjbAfuJnz62XAPz0tDb8Bp4MpdlXw370Y1ezmaGeRFX
5vcGntJv/Sb7ic4oa6gSf4lKz2ZOzWYdok7VcCrAfoYsisrWZ+WhG0r6q0Zy
h6myS/YCsJ9cmSkf3gv5aHp/ndDRuyNUUo/JethP+0D0qXMJ+cj+14JXVsUj
1CKrp4awnwku42s1vPloh8kUj6PUCKUywr0W9vMhs2nEwPIuOm938nriwQ+U
3AEmP7M/i/3OWNSKIuQrrr143kv1/NYh8aOtVa5w1L0NVVvsdXWU76eeW8wl
/JhVZjzXH25DP/kZ1T9G+6mFXvHKsB/L7svNfqztiG3W7d6oxQNU2eKtZD/7
WDfYhT9uQ3st1R6FhfZTqmtPE37SZH1vV8UVIV2WLzdNEt9SVj+Z8XPvpFcd
3geyf20sivdFZZxEZD9qU+PP8T7Qko1UwRH3NopjfxLZj4XdNYGfo/0oab/w
Rrwvys/eWQ32U9B+Vil68QBK8959CO+L8jg3aAz7udpcMob3gfQuWw2FPW6j
RHckk/hZZHhmAO8DmQddEcD7ouo8mfyc3Gm6YA7rEDqyye/jG/GXlEQmuzLs
JyZddR0+J9TesPi2elYeJX5+GYnnnYOcsvic0MLr77ctuZBPHRJwU4T9OO+L
rcLnhHTlJaW8E/Kp+NF2bdiPiZ6VOD4n9P1ytdF73nzqZs5hBdhP8gvu2/ic
0DZWWxldy7vUxgEmP6Wv2apwHKPI0uydTzbXoIHidLIfBZ8n/fi+IxF9nqdv
nGoR7wIDEdiP2ISDCI5jVLw3xmbX3E8oz65QD/aT5JygiOMYjbu6LtBc8QmF
TD85BvtJ566NwnGMnt65I6z5vBYNpnPIwX4E58TZ4jhGT68OSZsL56DpbOZ+
futo6uB7jrTTO9ngU0CwkZzXwwPlS/E9RzUXBurwvUdj9sXLYD8du4Jj8T1H
c9727oNPJ0vmfa977e+K7zliWVK2Dj5rF7HYwH6+u604jO85EkZWUvDJIsS8
77e5EiXxPUe1o6Nt+N6jX0nM/SztDxgAXlLt8zOBJ+M3lWQ/q1J4zcsxLz/M
9d8BT0O+O4VhP627eNl2Y14SOG7NBp7Oae+Wg/1sL9HJAl62fb7AAzwZH/xu
BvsJkswsAF4curO8gSe975+kYD8lRiYdwEttgLsJ8BT+nRk/g0NBlqU4blo6
3/FAHI2uO0v059vTi99VcNxsS8jVgjiSTkAkfj7K/DyzCMdN1dJJFYijVNki
XdhP+Y7iw544blbnRNRBHPkr7FCG/ezQu3u9CsfNbs00eYijdezCkrCfxCId
fgrHjcDT+ASII5fzTH4YH+qiH+N79Su2ijUX37OLN5QIP+/Trp6Ee/WmcfIr
3LPAgyLkfjln2I7p4XslFChsDPcscKemJuynS+LtcrhX9bJzD8I9C3fLVoX9
BKjVJsG9Um7pXxWO71mveaos7MfYWvNNJb5X89O3rDTF9+yCMnM/g53GDqA7
iolFvk+wDq2+cpPki9mpIbqgO+nZn0+DDumaORB+nIbHEkB3nEV6WQywDm0x
ZtWG/Xj4Wb8E3TndsVLSH+tQ+L00fdiPpErsOdAd0ezmVNAhVw4zEs8q0e8P
g+48WRM/BDo0qsbU54srVffCfhLEitPxfqhLzVWEn6HhuVsnvQYpx5Hkt5xD
NdRn7oLV3fs+UcGVnemPg/uoYseP9wIWtlHv5baKA95jP6EE+z+y93IE3j9l
VXxuOew/UVby9sXdX6mAjOXXLuFPUY4/q2C9WMX0u1XZQ1TJ+cc6d8prKedZ
H9fyqJRRCz8flHdI7qeqSrhaZBlt1JLt1DrAn2+5dx14KNk3w495oGSu1BCd
YfXma76t002NHnNpvoM/1TNnlGD9Z+VFtYsVh6l1909EzRf9RKm1ig22XrtD
daapaHjxDlA3Lf4eiJ7TTm10NxFqw/j6YzlpwOfmvBMbMJ9UAs2n3ia0Wymu
m1JW5t+jjD8ztf21YL3RsYlznL+HqNrXeZ6ff9dSD6s3rH8Rj9AxY74B9c5+
SuRwVu2cr21U4HM3OcDZZ14fh3Pp+v29CJ8LteSKKblH7RkLuTd4dFMf4u25
tfHnjZ5dsrB+lkRX+Sz2IYple4rUatNa6lHEX9Hghx/Qb5bmudPz+ykD59Q5
q63aKMfUvQTn2/L+2UP0lbrh9CQrFX+KiSoRfK9d5mi18QC1yMb6cvTyGoqR
Y6HQfawJHVW+kH/Xp5fS/N792un1F+qt9uQ6wH+8srkn4dZFacz2CpXEnwrC
JxQBl5OLaZBc2EzNPGHv64ovpn6+Pa501nwQ7bhwwBHuV4nW1UX4flElN4tU
IX52Pb122h/HR7vIiyMZOF5YvHUl4NzFizit4d5NlPuPQbys3yjPD3Gy1bVG
dQGOs71Wmwsg7pafUZaE9Tp7eRPW4Dh4JJb+E+JiwHOuGpxvvLJqC9zTiwXb
LPE9pa7R9zSS3S0kFsdT8VkFQ3EcX1PnXijCerPH2ZJR+Lzffvk+A+ffJ3Wd
F84xbsebWXCvqU6fE/heU1fpe/1g0bfGeThuuD+ab1+C46j1TJcJrN/IOnRz
Nj5XOf7iJxr4nD8OWinBeel6FQWDDoSKvVHCOkAN/aiSgfPVbJ5XUIvjI2Vl
7wTES9wM21pYv+mqTa0EPj93Ja0SOM9FCWYicF5Ud7GfOD5vyzphndn4/EOa
JgkeaaoadAyfk5L+A9d4fG57rrCTc8m46z3/Bj7XgdSfNh/wOWtwd5Nz7LVv
/LlIuoGiChqjbePeU6fWO5Pz2m43bQk6sDPHeNZbrE934n8RHch0Mn//Z9Yn
Kk+4tvAv/tyb7ErWr7S0zyvBen4+NZQX6zn16AiXOpyvUTnnxZk5edQuhcNS
pfjf9Syam9xrg/nxFOi83C1tbfB1a2id3y3t9J1tbh5y26vMCetH+NeQeHBn
K3VbqpBPjaiVTVzTH6Giko7JwHnVia2r5cR5oT1orzr4wCd0XnC/fFZbUCEf
Wdw51QzrvTrb5GF9+kGdkPiUfGrjsJ/psvIRSnG3oyicl6Rgx8tTOI88cZmq
B994hc4jKau2OzxIyUcD/dIqsJ4/gEUD1hesUvnmdSKfahosmVp5FeP9jeQ+
jtQWDlXivJPAM6MAPvPeOUOSdzY/3FTkeyIfqd0Ib4f1pucjyH3/+fvGtrzQ
PMqDYZOxL3yYMs3fKQ7naBrQX1kUmoe0n2ZHAv76fTe5px2ubG82dudS40ty
1z3MG6RS7JPJ+XbbJD0x7M5Ft5J2CQB+Mu/cWsAlOz9vscbnKsIW+IgLn7PY
ZeZ59bVnpkHeybTTUMR5h7pI5x3/v8sPdOB726k6f8tqfI8X7bMh6+VuCi/D
dRRystn5EOqFu8PWJB9tzo2djXUfjQ4LnYD7KDXgKQznFVnJGQi+oqn8QSnU
W8MjoeT+Zmfbbsb5AFVEH+mB/PDl8HpyvuFPDA/cLq9FRV1rx0DvPRUDteG8
FPYpqIIPGZZ4Pwn1WYOGjyGcb4eujjfWffT37XonuO/cjfdUYf3sZ8dfcIh+
QpEttZOg66LZixXhvCZDs9rAt8xLtFsIdcpm2rfscaBYsL4j06NannDfg/ZO
ycH6GM+RmLrftcipSTwF7qNk7CUFOK+PUl5j4HOSFniegLpGn/Y5VuyFbljH
cV1+UQruu2zOKLnvS5+tsJI0rUWfzlNDoNOz9FNWwTm+YBVNkbRqQ/UP12+E
e6339Bw53zOmiwqiltegOV9vLoV7Wm7JT+6pWuQLHqy/KGFD0E/Q47TloUSf
G87mVeTeSaVWxuSMKwW0UBuTTpDzWhbOv1kb+5yeX/xJUNf88zmKuifYCu+k
okHlrBZYv+Ql8767WR02AZ8aEpbzC+pUIdqv/opn6ON8jBKXruyD/Lwp5LIo
nNeZGDEJ8LHFW66VQP36z8cuP7teDus4sjC+Ug+63qC9k+T93txHV3DeRVWP
ZNdA/h3/1UruY0D3qzTwuys1nxlDnetC+96zauue4XNFcYd+zoX8/jWhSB3W
S14/PhfnV1Tcffge5FuN9cw8++jrn4vgj2MbvEWgLpaoYdbFXJLyhfhcEfud
yGDQ9fs6b8h9T1x7uhjnUxS8asIW8mr0V2Y+fRnd6wl+et9AKx/U0Zedusj9
NXGUd8PnitZ51k6BrluHNEnBep/Z7PY4j6JPzz3nQD5dL8LMpxHj+YH4XNGI
5FZlfM7UTH4iwT8YbtLH+RJNekcOQP78JsTMmyIvNqhhvUYBLw9Sjli/B088
JvgsPd3lOI+i6zNzpiGvPpNxJOe1a/13Xgvsqw+WzNkKdfRKLqY+n9apbbWJ
e4/43jrLw33vbfAm61MPmNWQ+mi2nBSuAyjNEHVyf0dEb93G9xa1vG9hW4jz
KreSmRicV5qBxg+oB8zkjQJw3UQFiiwjdffxvj1CWJfRliXsb2fNzaPu8EiQ
86VuXRbDeRS1CXAevIXzap/qEwU4r9wrRtJQPyw2ZV2L6yxK+3CsNJyvMjIZ
wLqMzl8e5uLHuv5KARE/9rf4njTOoyg/ge0RO86rm1dvIPlXeJ+DJtQbrz+L
NGqs+ET1nVVdD+er7SStj3UZPVTUmEjCun4hw0kW1rsb/a7B9xYFnTOO/ITz
6iL9x2JwXseLQ+5CffKufsM36E+8GWgQhfPt92AdxbqMvrlzOJ3Bur6FfbEm
rL97a7kgzq9ok4PjXgmcb1mdilfCOXLp307CuozCFq3NZWD9vuV5kOTf3p0L
tfG9Ree4jN9BvlU56kvOsVNHRgrrMpo9snBAD+v30IFz8oDvtpY+hfMo0lec
JQj5dDadTwvajmhAHecew/sO+jffXjDrpk2tO93xuaLKn45z8TlTGTzMePhY
/oAd6qj9vnph5eIvkThdj89WurUczou17XjYbJxXJ24uI+e1bumutVBfRTUq
HtXIykP/6vSfZ7dGQjyYSeWp4HhA4yf6SDx4W3j3wnltOrGkEZ8X6tsUQs6L
86qKNNRjj1fX8HNfyEf2dF3PN6kgAPGwrO/sVRwPaJtXOAXrG7tm68J5dYzm
f7mH86rHFmsG+G03qdhyqN/0kfWUd0I+SowVIX2Ay2tKRCEeUp6cb8DxgGJD
pk/C+fq7+QzDeZ3JLtc6i/Oqnc1+ETgv/lhBMaj37ukM8FTz5qOZsrukL8c5
/28lxMP++4WFOB6Q/KFycVivKj0/Ac6xKH/ncYTz7WdJZ6aPijVfCueexS8Z
gM8duUiaknPPX/VEHM4x6HfELX2cb/vzkok+75hwUYVzLx56/xufO1Kmz31c
+bgUzqNIT8h7dSfOq/FTB8l5ZVzeeQjq4XcW8j+gH+YaM0nOlzPw1QDWZRTi
NbDoFdb1xl/nyPqiLq8K6P80XfDZDH2pdLr/c2NJjAjorRJb+iDWW/SZ1ttZ
9tdSoV5VLsqvxT4ahVTdJHXW+/E/yqDnbK/af2M9R/q0no/ajd0HvQ1ct08Q
8urI4x5lOC+XmWucUN9eb367B/pbl+g+UtU2MR/Q8583D2yAz18ZzHoqIC7n
KegtWz5rPNZblEfr7YVxeUmoh7cJJXlDPyxqNg/xV74s639iHUfJp2Ofwecm
Ws9H8p/ag94+UzRcCnnVjtbbb42CvdCn4g0Xmg11qxjdpxJ3DsoEPTfu7nGD
z3Baz+sWjvmADk/bJhlCvp2mdVjndNtO0O1TMbP44FOg1oicb/jLeWtAhz2f
bjyMdRj10zpsLsuvArr9OLrgD9ZtNEDrdszDmD44rzv6WWX4vJDIYVtyXju/
esdCf6GoxHnhJsu7SP0XM/8ejCoRgXj4sfe+CY4HND33AlmfgoI+wLly/dK8
C+fcRfcby3kOK4Ffstr16wf2S6iF9kuTDY1CUP/fNpA7C+dcWyJE9NlR4MB7
uLcb2yhvuMeStB9j+P2wh3Plnoo7Dee8lPZL8z87JMC5Oumv+ILrZsRO9y3L
cw+pgh+zDWr5i/0YOkX7sbT8pQNwrp0T4ZfhnIUsBBfDeZ3NbC+Bcx20/fQL
18eoiO5z5jjPvwh+bKWS5Ry4xytpP1bqtMAazlXfL1kFzrnqnRTxw4HWs7fB
uW7/9j4XzvnPNTNpOF+XPYoO4MduVNQ/hnu8ivZjVh/5IuBcbeed3A7nrEv7
qH7nSEnwXa9FK35h34VYad916XLSMJxroZAvC5zzQ9pH8fv7RYDvEvOuFYR7
rGXNIOcbsfquA+jtM/00GcirT2i97fNSaoa+aJty5Trok2gZMvskd/5kHgI9
V408vQY+Z9F6fvmD0GLob4fcDmQBnfag+9vXE3wFoN7J5N24GHR68x1hcr7f
tdfNg753+rk/EqDTJXTf++lmY3kWnHdT1/6WgPVZdD11mfOQlwDW5VebNrWC
Tt/6lU78lQqHQBEP1uUINfeVoNN5EzmkTy6zTMuYB+ddNbulY7Ce1+kD8Vfs
W2p872NdPnn1iDro9OpZ1zXhvDIcYu+dxbq8hZ+1AHSak+6rr0vgVEvAefdu
AMsOWK+ntDAC1kfH+Q+dx7qcHRfWBTq9ja539lELCj9iXV4zMsoPOv3Cq1ce
zvcBOpN2Gufdr4/F/sD6pXQ9Fdg3sxjqoAJ2i2jQ6UsiLeR89QwG5+TjvNt3
KOIR4B/P/RAGfIf64aVQB/2JCBYCnT5O10GmXwPsdHHe/XYzTAHwRLpuWpo9
+RzO1VrkiBacs1aaGzkv0ZYYPzjX5TK6D+Cc99N9+AyNfYNwb9+Kt82Fe/yc
9mPuop+uwO8po08vDIPPyrLzJ/m30GCHA/Qr5qo8yYH7+ONlGelXbF/j2QG/
s0z1vuG6gH2WH/07y9HGvnDwzXsD0vaCrg+d30Hy77UL9a+gXyEiaUJBXn1V
10/6XQv0XALhd5ntjWIG4LNave+Tvl/DlZo86IfkdCh1wX23RR3Ej62yzJ4N
voqnfcdmuI+T15u7If+uzhlWBF/lXPfaHHxWCP07jnIQHwW+maUp/hvc9290
P6RZeLwP+hUsfRGjcB9v0v2K/+Pqu+N6/N64lULIipQoCi0VUlY6ZZSMkqZE
AyVKGUUhpUQaSmmhUKG9aKCO9qS9997Dt2GUPOc6n8/veb2e58+u7tf5nGu9
r/d1zrnPzdk0qwy8KiY96QvwLC3mvs8bIYVE4M0HNOxeQ74XMddDGr4tSYV1
jAmlkzuh3roy1zGkOY4NwrrHQ4NnyZDXQfl51O9CD47KAq/CT5N0IU/PWe+n
flR5xp8M6x6nbrsbQ15rMtc9ypCb3leCyyPl/G2A05P3Gf2O/a2YmUMEl5/m
iz8DnN7C3Pdxn2m79onUXVYxvUl4Xtic0U/pfl2bDn3R0on9rtAnTTH378oj
nsVAX7RSOtIB6uo65rrl8vXpj6Aven3urhHtk5j7el6ZvJ+h780P2+FJ+2Dm
uqjaxdlhWJ88d9elCOrpNub6pIvX3MXQF53xtByAPmmQuQ9YKPNxH/S9nO2b
cwDXreYZ0/x9Msp1Afoiv0dZB6FP8mWuQ9bU1rfDvmGd1aNM6JOO/Td4FPyb
uLtYGfrekNyEo9AHm55pPQrPz5mbKAh9kYkqZpEn9VSMud54ZMeRethnTJ3e
+hH6JF3mPuObBu/fsJ554ONUOuD6jNVbyrf7Y8sLYL3xCUdsCNRZAeZ6I9tB
k5XQ927ZJDQM+L20vEgQ5C6fjyRBX3R8nsddqLdrmeuKA8/zC6HvVbsp9wL6
4LQ526k8Nn3TQ1iv4NwTeBDysa1Mn7Ee5eYqB7zq0xsza+BZe1MZ/dFrtRwb
WA/5XLDoFeT7BuZ6SLqd6hNY13i+bF08rHO0MfeLT1r4asK6Rtn39BewzlHJ
XN8eFDsfCesa1zZ+2VRkXoXf/zxL8/f959w6WL8omivI8ZLUz3uRIRSHy46s
aIH1iweX1JtgPUOQZwnlyb33dVtgncLPnPf0QlInUxW7joH9A/vnj8K+c75P
56O966qxohCmfPiZv6wrrEd8Wm6Nakk95O4Uozx28Sd2bViPuNU46LM3uQqb
f3gnBH55q2ZaAesOCr7Pf0I9PFh7hdo58LjkH1jvPRPdoOFP6l4Kc713eU5w
G6zv8Ra4x0P90mHWL77Cba7Qh0RGHbOHvuR/+8gzrXJzoc/MvLv8kiHB0RvM
9cOYLws6oV/1y6lPhP51vS4DV91eTeyl/Wqe8DfoXyuPMXDV1jaErdV1EB2O
/lkQUZGKvtb30O+qxPXvcof1i5nNOT+OnApBCt8Zv3vt0aF58Px1W+uh9xWp
eL0Z477uGMP1nvD8TyvpThWS37L1jOd5ZBj3M0aYxJ/s4A/ISLvEfD9xlHE/
Y88k5xzVvMAMD0vG+4n+ioz7GaXLdtbMDQrK+PGF8X5iSDbjfsbIhPCvLXOf
Z8zOZ7yf2LGPcT9jgkxfJTwfu5fxfiJXDON+xqORpazsoYEZoYsY7yfWzy6Y
C/PvLI3MBX3PPzhAz10o72DM82lN6oBd8nN5zJxn0ghjnobXC+h3u3yY85yN
jJ8D66QB19jPLiS8QHXtNlpfllgacMO6apO8tLFC4me03zWe8v8sBYZe2GS3
JXzP6ydTr+9yPKWwThoWco5NgPCC4MjvohC3MZL6S2FddbHqPhVexy/IqG6O
OF1/y2LYQYuF6wqMM3cBww5BgZtEYJ20oeYFazThBeGNm5Uhnscvm8XBuuqX
cGu5+6+/oM71ShoQz5xMu21T9TeHcT4w7WYW6VMJ66TyBtjXmfCCX6/yaD++
nJ+DA9ZVAzV/ctWu+oKij4bS/n1HNMPOJ29z0++RvWfaee0K9oewfipq7vwo
j/AFX1tDygPrhte+Hc4aRk/zlWODKj+h+bGy4rse1+CfbIx7Mx8dtV+cXxck
n2nGeG907bZVnLCuemAJ+7FjhEdIr7pH80X2P8Z9miUqogHlZf7yR3cy3icN
/ewp+qyjH3m2b8xcp5WCTGzzN2zw68BHIqdefbtXjo7uNYnSveEgv3wdIz6d
thSVw3qco4CJSQ6pP05KDBxb8GRD+zq9OsRfcFxcbzwc7dNg3A8z+W9oLvj9
q+3hWxyEPx5h+n3d7cIK8GNM+u7ZdYQP+jP9uDzlqTj4xR+7cUcRfjfn74Na
qPshi1/Wgp0PzT6ycSJ8TQRdpnaOZSl5DHbbGpt2J5fwr5NF2tRu4ewM+2j8
h/RO1PlnfGLa5xvTDlc3NdR3736WcZhpB2cdP8Y92HID0ies/DOeLxKl54gO
cfXENLopoLlaSTlHqjj/7z0qOM2hCuywKz87PJvUbUemHX5rM8a5tbdIM6Yp
UP4Nc5w/01zRMM6vsn35R6s4/+99dErVnhRPWDgWjQI+HLhWR9/XS2TaP5jf
KfWf/d2MpUz7W7ZLTsC5k41clzRKCU+P3hJO8V/nZCAv5NF2q4g7iPBx63Pp
NI88ubtWQF4US4iq8hB+fa/flObF+HzWJIjzsvL1+xwJX25ixnn/xuWLIW5r
1n6RqyH8N5QZt625XyMgDm1VqqMCKz9hNmYcvnWuH4P5+N6sUSjb+Akt1gyk
83nQG7cU4nBpm8Kxo4TnfvoVswPiMGVBnTjE2yuXDX/WaqVg+ff3BCHenmoZ
dEL8OPTkOpwaD8dChYz7XccDrlN7BuVkR6soB8nzXHhN7Snir0vl2rIr0q89
CZIf/2+W8f3BA3WM7+Up5NF7YD7WM+5lCu1jvHcxjzsnZ8I8SJ67mnEO02hc
lD7f9diGPr+9m3Ee7/bSVfM82obRHmUd2xVfX8iXqevdXTpUg3xUWth+eY0i
wdsq4cmrg+Xji0TOJM3JRdfeH5a9WD6Evh7dzOeR2Yjkok74dOFg/DVF/vY/
niFU2XH19+jSRtTmbxofGleCR9cECUYvG0buu3731v56Lj9f/c/FQ3kN2KZk
G9+h4/1IkX1Bi960vzznnjxZff9O/LaFTd/vXxsayGS7utegDGlEdnun1PXj
kv3d9N6VJYLr6X0sspdqqb7sD3jo9+lOhevT+1jOcO2jevGFDcWc/NGJVC7c
vNXG0o+4/1i+h3muCJPd8/FqJ0p/0iPfYNSHcvy0Y2GePz5EKBe41KJzZdqN
Wg7N6OjTcfq7lfdu03tL7qS10ftJnsgw7ll6paVBv/vmzfOJyl/8ZnzXhldi
rOvgrRLULpHMxyo1ivxyNc3gd9lv8/hwZxUjwScKK2xMR1CqcWwU/O7MChV1
1uKv6LwfV+C38x1ozvIW+rsnO2/Q+z1UPRbTezyq9n5gvO8QJkq/X7Z5wofK
t57qo3ZYvtQi+/CtEtxrsqWThfzuj9cy9vC7bbni6muyivHcs/carcnvXp0S
ioHfXfssPJCt+Cu+MK13E343PF3wKfyuxbv/6H0Xzk5F9B4ME7tL9Hd3W5ZS
+d+xEir33O1B5b8vxllr/OjEx1bK1rcSO4uvqboHv6uYtvAvsTPe1b8rtJ7Y
WVTPJRF+t/zPPdlCl1rspbdgHdh5UX8v1Zfdl5PeC9FktZ3eF6G4bpqOf67+
KpVPT5ym8gUL1aj8w7eJcBKHuKF051E3EocWDw4nw+9Wb7DoIXGIFxbO7hkh
cSg6fu4j/O6EC35B4grrqGWc20PiqozlF/3d55GMexXip/gMhLW1MgxZGPcq
9IwwzjcLD8VsWTxHOyOulJFHehlzFFRnRnFFvPJAmJ1ehmIwdoPfXdTz1v6V
1ChmrU/G+bZ6GQ65Ngnwu4arB1l6mjtwseDOx7tHjmUIt/+hv9v2+xG9Z2CN
ZAu9f6A1+DjlGxPhWVQeLOVL7x+Yz9TXJXLlc9C30/v+LaIv1nx1NBB+NwEd
bwR9t4pvNyP6YmGmvj5yQn6gr9rN7feIvriUqW+eYA19H19MfBN9H1/3kisd
P3zmOpVffWVF5e5M/06qJhmBf6t9BfuJf/GI/jKq77CwTT/4d/PxmkTiXyzC
9K+vjzg/+Nfo1dytxL/YI3wejav0Q4zv5jTOD6bvre/su0/jtsBRmL7PHpxq
QeVbmPGcpPzXGOJZmTW6j8QzXqASfR9+d+768EleEs+m1f5tJJ6x6r6jcfC7
YZ4n9CGeY8a23ibxjBfcZ+BGuJoUfe9b/Hkrfb/bg5m/gfNn6Xvf9sk1VB7E
zN8bbTlHDpH8PZ7fu4rkL57lbzkPv2v3n+wPyN/tdr2LSf7iwKfHaP6ufHTT
DfL3012LZ/C77LO8VN+dSW/oe9ArDG7Q96CPrnhL9TJS3Ezlrw7LUflnw00M
/0aVZAFeLVHrMCV4hTmyta7B7/qJ7VUFvMrQC5YkeIUjr0VRO3/QbTEGvLLv
zMkFOwucG6D6vreyo+8LX3aeoe8Rv9tTzfieztlnVB5VqUPfI5Zi4r/u1MR+
wPP291U97iSufryfdxR+19p8nQvgudKNMyUEz/GMohjF88a9nsaAz1faz2sT
fMYW98ro774MZNQv1as/5MZP+2csZ9avdmb9WvBS+v4cQ/+MAWb90u1n1Knj
fnIrWbX8M7iYdcrxM80vlHdoVa3cbFDGy9eM/FrXSfMLZezJ57JUCsq4U8DI
L72VNL/QbrO8U/VdTzI2dDDyy2Gafc7z1gEUre/6+l1NEfp14Lie0bw25Mmr
cMe1sh8pKEhyzWmrRElPI9LGlrchaU9nF7dXQ2i1Otvers91KH/anb8ipQSX
8L6tm21sRx2XF8vXGuWj7I0prMk9/bjgzrTWouPdyFpVL+D+h3Z0yzT7FIz/
Qj14+9+JDtTU0TaTJNKFqvR46fiXvra5C1l0ISe29a+EvXrRlKjIehi/Z5e3
QitfIyr79HZwYn4D+u9EGh3/SP9YYztbLVopzr8zdFs/OvjOhM5/6p/DW/vI
MmTeHsV28NwAyjj0nI6/M9PuMpd+GSrembQ9ZPUI2skzshbGD1iQLnJjfxGy
GG9P9nzejqTW+NLxp+PigpN+euOBy0M9WgmDaNslUzp+l1yi38pHGD9lueTd
fG4QXdv5KBXGXxR266gCzsNjO4K7j0SMoO+Wehtg/JR1P8V2BEbhkqKT6/ST
O1CBTCIdX333u67ehfW4Rmjh1d4PfUjMR+M0jJ+fHW1W29KCr36x+RfzsweF
Go7R+T84pW110qIDV0iIhJ8Q6UelKQ50fK33k/3PdSuxrF+ejcFa8twlxvx9
N9nsVZnTgzvStjrjyjbUPPua2t9Hc/bwjtZerLB0zdbev42Ic70WHT/q93nO
+86DeKNOyaH7Os3IJ9N9E4w/vDzQd6NZKxY1KatmCa1C0def0fE9rgfa+wgM
YkUsYPTEOg995UxnzD//e7mf7yDmX6iU/5wtEVkv96fjhzR8u35VZBS/33Fv
vaB1GOJ+LrERxtdbHNbi9KoDG7waWhPcmITG/b7Q8QvLb20l8YkF5r90D6sp
ws8evqHjh8qYZZP4xPGGF1/Ptlbiujuv6fiq437NJD6x0bwv4R2f6/CSfo7N
ML7imB3rv8Z2HHDz175qo3zc/iKbjt/6eLSGxCc+xi084/ihHX86PkL9a1Mp
lEPiE8+cvH6dxCeOia2i40tkbpLdaNGFa4u2cpL4xEGbswVhfM8dCbMkPrHU
kpObSXziLhtPOv7Tnw8OdLLVYl5V5a432/rxlQFHOn/l8Bk+h8gyfHnd+qID
5wZwrXMfjZ+ID3t4V+mXYTVbkV/Bq0dwvIS4AIwvs3LROpv9Rbiw8PgjEp/Y
4v5jOv7Rls3/gn56oxOLewZIfOLsTEs6/2Aek3tLHmFUY8IaQ+ITdyQeZ8zf
/lSbHM5D64zvLDkaMYJtX56j8b8m+G22eGAU2tqfK0riE2+deEfHfzLK7tKz
sB4dLf5SROIT98Ww0fEfv9+yoaalBR25vv9K7M8e/PDtKTp+fpvSF3WLDrSm
pVtEXaQf33rlLQTj83/PZSXxiXa8V/tC4hPv1btHx//WmpJ9eE4P2qf6dv3X
yjZ8/V46jc/34ce7pVt7UdS5Lqe+v41Y8dANOn5vakaYo/MgYm3ULHXSacYF
+SE0/l9LzLCQ+ERXFvh9ZA2twg4cNnT8ixUKOiQ+0diy02ZPrfPwBqRD539t
bmsmiU+0wF5i7DVbInYuOUHHX94ydYnEJxJZ+WHpVuswbKtfSvHNZltPCYlP
dPzPyIE3jUk4q5QRnz/sB0LVbAbRb/vpE2s5PiPPOtHVe7na0M0RLXdrmQFU
9CI3Kiu9HC3tDeEG+XvH0spUpV4k2HuoPnCwGV2q4KRy922S2inZnehbeCQ7
/5lOlM+2g47TsvQ/dZj/wN2yUjJ/dNjuFJ2/+jHVJLBb3bXlssRuKE2rgNrt
Hl89Br2cU25/eEPy7qMCwy93q9rrwZ6HzoREEnui+FEPKp+6PEdMYNMoenfe
+6yUaw6yXJ3wPXJeLipXi88rUBlBP457ebjnlaPPKfMrQI4ur712uLofLQ6x
3OQu1IE+jvNVglzpb2l+8pVetFQrQWTb5m60cYitCuS9aiF8Nk9GkepR4xzz
ohz0oLqJh7MwGD/jHmiYKzmAwo5oBRoZdqAzhTpcINddmtkikdeHfvy53NRg
lYNuzxtuPxfYic31u5WlHvQhGRUtlz/BBWgIN0rIBXfiU7p/LdJ4u9CVlexd
dyJb0PdF6yRBbu7RkNx4uRNVXDhecUCqDekbilL5zj1ZReDHwg1ymcSPKC04
j/qxycRqVIjET9HhDWUkfpDOSDGV15SuaWiZbEI3Q7rODvn0onKe29RfSPa5
elRpBQpVXGjmyj6AQgacV4H80ynvM5Avcd/iqgDPpQZvU39FWYfMVJN8uW7u
akfyhfCF09T+WXvFwneUtqDTB6XOcnsMon3RP+rBbivLRjsWt9aiu187FLJ3
DaOgGN1akK9jKzqouqcVveBeZXZhYJCMOzm8mNjN7n1ACNdADZrvPUdQ3LUH
rRUqoPbR5jVt9huvQqnaN2VEWXvR2sgiKvesiegNIvlY8VYlB+rFF75Aqu9E
6548z4fJ6OW/AxWeLqSP402jej3fWev57GEy3lhn8BnkET86qR22Xb9gHkDw
59dlzUGoj+ejzKi+tVEuVZwEf1r38cVDfbSxOUD1DWjc2uDwLRbNBs8axjiO
Ih/lIRpvl489N/H6Fos39cepg1z42K1ykN/84L82QSUO8af6d/4ZGkVWD/A/
0Fd3TX5YkoU3OpverW2l1I/aMniofx84DPuWWHjjJQ2+J0Huqc5P5bMDW6vE
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
vAx6hczLtgAeVbSIR4HwKDxmcYae47otnpwGPOrDHDlT6Le4jWapXrM2c1uB
R73Yu7AS+q0XRSXUXzbcj+k9kBqj7fS7n3OZvNctOZvKX7m/onLBLl7Gd6DY
06h8d/5+em9k8om1VF6669oM8F6TGL43TQQPOfyHaX51x1xzBt574vZaEcJ7
Mf6vg+Ihh5ZQKfDei04hgoT34v/x3nkROB94b+7BRxF8BA/XMnnvhrfn9IH3
uj+oWkJ4L65i8t6Z1v96gfeqenhfIbwXb3+0hvqLQzPuEqzXrebYP8+KvQLF
ihrOh/W6u2Fy7LBfeOG/YzJbJetQosub5SA3f6NdFbx6BP0TE93ArV+GNOYc
o+cZarjMzWGdM+leymtRy24kuGAdOzxfvlbVG/bh9ilpG+eS/6dOztD9eoNQ
98TNXr1Isyc1eKNFF7p3J5Cee0k4k/8I1odPR057we9Pajdy0PVDi+XyFmR+
ql57KmG+C/t+Lgb5xSLjyPbPdWi77ZqV7q+GEMtuezqO09zA2q8qcfhchXAV
7PNm32esq/eufjNwqSgH123bKAXnCLKjAheCfOS4c4KYdRhmWSpzBc5rbHVM
pOdMuuTEWU7sacUX5uYNnR8YRHEXEP3dlXIpe4wMO7C9j8Y6NskBhFYIc9N1
XYHcnXCOhLfD8BucK6mxWkntk1T3wgL2ce7HnC4wNOxApX5WVC/+0RPbLgwM
YtWgrkVqe1pRa4OmHMj/OxUxeUKkH2unHGI9adGBDI/y0fmcE44+BPtfFZlh
+ReLclDMyTa6f52SldwE+wfrYl7zp6rEodnd2xfBOB7nzs8eiRjBe1ffk5HH
eSgnn4eebylwOhkF+4Y/1ROPX2GvwCVKXBLwvFYerz6sy4ee93GTlKzDdoGx
dD730oaWhKwewTLKBldX6pfhG0pT9ByRqX4AO+y3/tjK/ov4GZ8vPicAz/M+
a9wN691SXwWLSFxgV5spSZC7TtopwTmnt5ePTQhZdOGd9xbT83jcyZxSsE8t
uuzrHvj9OxLcwvC8n/yS3zA/qy+ST2G+gSfY14G8teSZYudnUu/apj/D+Szu
kLX0XJla0OrARKL/gQbBDrDHSftgap/nHyrNTIm9PAR4NMF+5of+GwT52GuU
udY6DDmLu9+Ec2RFzuZ0PnLfdlnBuYjTbkP64J+U4Jlf8Hy6Zp09+C/1+L7X
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
8mc/IPV5Yme53FNdJuysCpYMtulGVenp+wOlyoFThRG18m8HPDDOFeTi7UZi
524UGWpWQe+cnR+aEtqh0Tn16uSdTsSVcGLUBvOdeutNiQQ3l8WV7sC4icok
jlDc9E1eLGmRMQAF8UMvVbvL0SXuvUrNbrUo7GKxGMHNObVmphg30fu1m3wI
bkbucJ10ExyCO0OO38XjK9DGC03jLxyLcN3c/YLg5grRjU8xbqK8LvEqgpv7
lA/KPI0dglQbrpo61kpkLy1faZgYidYE7RQgeCo93bUH4ykSOFj9neBp8eAH
qSKvIVB4KKnGMVCBVlQpBAdopIPKxPEqgqfJHw7EYzxFFn5dCwmeDvzZ3WYb
NQiHbiZ1fDtWgWbVXxDLwjrjJuvCq2bSNRD7pezV/gc4LluPcisE9cPHoetH
LxypgAW58sOmTVVIzSf9CPeyQejWfyhA+nsfbqy4tGN9IqpQ/dffG3lqWw/B
x1vTK8QwPqLySAOKj47MuULEbxkPMmuw32Dz5nDqt33Zfj+Ifw78iJOUiK+A
xjNj08Q/P9hOSRA/bDIuYK1nrYSbwn8GiR/u7/sgRp53+eniY/h5QejRU/q8
7fOyGshzJazN5vt+rAKCotTocw1v+8wqfqQVpHN+RSYFZaNPdz0vu1f0Q3id
hDjhDyUyKe6YPyCGhSPlDxdnziuonDmvoHnmvAKbTyVSJO9ufD+agvMObnxY
SvPunNa2JySPUjtfpOM8gkQB9IPkEe/rNhuSFyjFrg3nBYxrPqV5IWvi2Ury
4vMVzf04L8D56gWaF4FNeQtJ/F+4eTgKxz8EF5XFkPhnGmelkPhXuvjxJ45/
uLpCgMY/urVagMR5eEjTShznsO7GXBrnz7bqPiJxfmvYcxmOc7Csuf2JxPnx
NvmXJM4zrwXdwnEOQTU2NM5PNndOimH/wALOWuwfOGL+kPpn9/lDx0k8WJgV
JuN4AK4uaxoPNxWv7yHxwFeqPoXjAWq2pdJ42LQnworMI8SsbPES5xiE+KZo
Oo/g9SZ9PeHJKz4dXoV5MhgbSZwgPPl44rPMuxh3nmea82DcgSPMeoo7zFwm
vMG4U7kj+BHGHVC99WI5wZ3zk0oNZ+OywV9Mm10N8wzLnLt0rmF3+e6EJsy3
RWzthzDfhicvi5cTvp1t7cxLcKos9IUSxilYxO9FcerDxzsjQhinAmIyZDBO
gdiycopT3YeyrpH5CNeS85tZvYchSayDzkfYuwRyEN6+vq/XCvN2+Hz8pifh
7UsnFhXlYFxb4RTviXENpApznQmuMaN2CBBc46qbw4lxDa7drakkuNbaxvOU
d0UO5EVZCck9G4ajO23onMW110IshP8vkDkfgvk/XGg+O034/3RJ1j6Cg8tm
r2jBOAj1c+5QHHQ09DIkOLih6vVOjIOQccp5A8HByahLPT8LsyFy0RJbNI5x
/e7pgbLhYhAbHXUgOsKKeyUT6whYtWvnGqIjWKpD88UxbipJblDDuAns4b+d
CW4eurz8CsHNa6n85zBuQkrE8iaCmz1d/84rWDRzXoHNzHkFS2M5HhHcXMqr
VYRxEw4rBFDclL3o10B0X7zO+BKs+yC0RVGO6D75HJvHRN+Z6NYsx/oOTm5Y
Ikv0nammbirhRVmhyzwwL4ImM4d6wouqHDdJvML6zlRfyxjrO9CXeRVB9J01
69xbhC9xZdupYL4EK50nBjZivvRa1TyL6L6v7SJBWPfBd42+GKL7Ti9XNic8
SsBmZDbmUSDNl19AeNQ8zaXthEfdGnn4BfMo8Gs31yc8ap3FO3OC7x5lxeYY
34F/TyHF9+hvbSoE323nKUxhfIdtrDwU3895XfFRnBUIV+xMnDvcimB48N88
S4fWo+R6rNfERmK3YL0GN6ReUL1WOi65jPBe+cHHeZj3QvNrS8p77Z5YlhN+
a5Hh+vvPdBsw3pZVEX7rvefEJsJj08d4IjGPhV362kqEx15cNVuL8FXe3Nsn
MF+F52VcgoSvJjrn5BBeumZv9CrMS8HBUMSV8FID9dPThJcmb87ZhnkpxG4u
jie89C6b6V7Cc2T7O8Iwz4GsoELKc6wMLB2I/hXJXJeO9S88Yv7Tv9avTBIJ
zzxeEOCLeSZ0fv/HM9tvvLxL+r6OJW4tJP3wzpxRtO9LyLGWQfqLWh6pFH1R
bUftMqO0v4jPqnXHOI5bHtFrJ3HcoooaFxq3oV/Gykm/7k7DsINXV5fBgCKT
9uvuDFkTTfpIxdlsGjca5oP4yX99pGPJxeFkPqJpMY8af18LJIxy0/kIOy4p
STI/4tA0Gu4x0IK2ny6n8yOW92SyjZ370Lmo1XkR7Ay0s0zSN+XTJ9R7YN4H
opv8o2veY92Ezv2JSSe66eJWxZPHazvRj7gi4+31TcjPmn0g/zPmDTPfl3w9
831Jy5nvS6YnG53ocQN4qMOSP2ndj7T1FctGF7QhtUPFJ777Z8L5k4pv34z0
oqoNpxXmmbWDy9VNw1pL20GXl/1U/QAThdcVpHrPb0MT0e0eZJ5osCJ9t+og
EwWocNqQeSIJra+qZJ5I6teXNnZsz3R0pfNEHNrtYzH7GNDVNrrDVZSJ2It+
i/a2MACFct0jczpHWUNLwKYRjXFtp3M6e8WPhpL5Ke+ShZqjimVo/jstOj8V
OPM9uzUz37P7O/M9O197h0BWrx7IeeT5Y79YKdqhsORMhHoHSF139yX2Dwc/
6B4QKwUJPmlqb823byXPJT4y7oifCzQH76aR52K6uzDJfd5y4T+I7xPubJyi
9ymXw57bjf22+dp4AfYb9HnKUL8tPmsRVugBYKj1afMIth8yY/Mn83Gj//X9
L5aMf/OnbseuFH7DfnacWpyE/QxRqkeon/e01XRsNXwHh3dJZHqztoNDFyud
R3Oe+S7V6Oi/90GfZ75LtX9eajmJE/6Ya7E4TuAE1/tHJE5+HT51icTDp3XR
K3E8QM/Ln/0kHsyZgnKkb1B5+0RInOggqhS8BKRvME05cDi/qQGJB//K37d7
AAmbHS8reVQKqRclS/lGmcBmLznv7ooeOB488nZufCBI5HrdtvtYj+qcxTgi
RfoRD/PsYj2rOqT9forX+mQ9qghWWH42qQ9pP/n5RORCAwT5VSu1JDBBfW+e
UF17Nyo4WhDTL5WHWnY9ayPX9xVBv+6s6EEJPJKPyPWHZs4xOztzjtmNmXPM
yqttC7rlOiDWXUn13eIupMy75bFodwM81OpCMpP9kMvKsuHEiXJkxX+exXZ/
Ixjeq19P7JwjAtbYDmu3BlD7HuV3wuR+ZHXG5PH9wOcMr3hyP2aLit+T6+tq
nt+Crw82zrr0+syraxLJ857tcp16JdIPngtnS5HnLXu4X/wT9lvWhoR07DeY
d/RkOfFb+Iuf64gfVHa9X4r9AJaZO0KIH27vLqd5t2ipDM07Y9T7hcTP7Nka
8fkT2ZDW0RktpzmMyqO/xvPMz0ct6rdNdzZ9hF82nzk+T/agU9tWxQRHd0CT
Wo93+PoeSFNa0hlzqwQ8S3O9VkZ2gEXwMRrPKUrtNJ7P+KfTeHaLyZJpvdUG
14JPJk+JYJ33MteKK6Ljf8bV7Je7Kjx8+tCqq+Fve/kYcOitVZw2dz7qPWP3
1F2zE1Xen60stKUJ1GMzMydjOsDd1ZHWsXaZG7SOHVH3pnXM9IaRtQXGhfpA
9gA2AwZ6LcwW3lUZCn0zden9TF0ym6lL1cbPaD3ROyNN60kglwSdT9T276f1
ZNy6ndYTLzUzWk/2Jflb5XysB9lxbVlxi2Y0O+LOliZGL/TEGtO6YWs3pEHq
xtkn1v/fuhE5UzciLjuHkvw9M+WuQ/LXga/K9//K360TmiGGmEeFRN8P6oka
hhPezfOfloXCeeZvrWCbJLByEnhxNLQd/sSkqN/Ez/W/5u+U46UpHv2+/YTi
0VTNbopHwTsnpzT9G9H8klznHcKDaIF4U866T6GQUl15ZwPmJyXZi03WHxpA
Wb43glXel0ABf6Gd6aUy1NP00LdsMQOtkd/1akFLL+h8vUHnVi46rFxG5lYY
n17ReYT/nvv4z/dDb36X2R/b3g/lJqPB8eblqHvb5g25nxvhftzaCoJ3fiP6
hwje1TK3Ury7U6k1bCbQDvIN7fd/Z+XBl/XfOS509IKyWT3t6xb6PEb7uqW6
E+hzKX4Qn32grB518gga6K3ohzwfOXP2kVr0g69VNHJDI7plaKe2/8MA2P41
kGliy0catdOnQuTqUY73qTd8dn1w2qom5mxxI0TP9BV/n+krvjvTV+yTG0hx
tqyKi+LsfVMzirOcT474krgV0+rfi+MWwfQ4jdv/OWfd7qxD5p0P3+em885/
V0X5/V/zzlrBDplk3QszU57jdUdGy77SdX+MTChujmrzUdw8Wh5GcVPLdvAb
TyzGFYsLpx81dSPlnWXO9dj/Lzru+vixd8BVxqzqdeM4zwQyw3VKGmFZefMa
kr8RrHtjcP6iuMX/8tfMPvkeqQMRl10f4TqARM0yaB3Yyzw+StbFoWnZPrwu
qJnlG10Xr8qLdB5ZQGMBnUeu7z5E8yJ+VOMCyTvOkHYrMhesd8iT5l2htB+d
C37Ww6BzwSnc1jTvQg4uWS7+nQkFX7r6LZV6YNokIlsX55H8zDxvy8w8b/DM
PO9Bu0f6JE/zf4yq4zwF8xsvaJ6WhJ/NJnj69oZCIcHT4LQmWg/fJy5K2YHr
HqtBAieue9BQrkDrXn5P0gsS5/y/K+/gOIcgBREa562XX9E5XOspLzqHu55l
ktafjzPzszr/9X12Az5TOq8q+WvOQTKvOjz7DI0T79lxXxdu7EMZIt//Wje1
oV+CGU9WFpUAT5WAG4nn12ltn0menj7kTucobWbmDZP+6zvXGZe677lNZsET
p9Jn6fcH0fGtKfEWk7UoaGZ/r3Bmf690Zn9vzWXlOpJfo/uGuMj81y0dLZpf
q0oX7ufpH4RLl1iOhftXIJ6sDaedskrAcp4anTOyUBB0JnNGy778mzOabnJ5
zBI1AOd7CnO/1JXDRz/+Lulftej8zL5Bxcy+QffMvoHXpOpjh8xsmPJhO7S0
ZQimJb7HbftUAv9rnkLq8S46N8FQj6VzE+ERy2le751sfX13cS9ieRE766dM
GxQJ7LG/9rcWaew1kP15vgeJti1W67L9Cr/UfaLNcD1RzdzDsgPXzz084w9x
/URZ2d7zSP0c+/FpgtzPaO6VA/h+kKD4GL0fj1MLdxM/LFkz5Yf9AKtPmdkR
P4xkuF8g+KJlfs4Z4wvw+op7Enyx9708RNYxrj+9G68jrHK5FELWsVc8+Bm5
T5/a20L4PlGjHHIg92nWYJhD8O6KHG8RxjuUF3k1luBd1Sk/IXL/ewMmLPH9
I3l/rxhy//vHLBr34zomuilqD65jqP5LgRmpY/fXML69wnXMIMQb4TqGLkjP
USR1LLxNTIfUMb/Bt8m4jiHgU6J1THlmH/XVzD5q3Mw+au3FYE2SX+3hvE04
v5DQE/5wkl/DM7zIboYX2c/wIukcjzCy7u2cOg/xuqOfZzo7ybrnz8yFmf/X
95H/trKZkDpv4+aVj+s81Ly0pHX+4l5mC6lLTwxvOeG6BJ2M6OukLh38Nt+J
1KXOKMUOXJdgsS3QumT9MU6JxLn5igMROM5h3/VgGuebhVN2ET7z2M/kNeYz
4BXAm0D4TO+MThf+r3MFq9iiFRDGOzapTxcx3gHLF9FqgndtzitSCN55y4/q
YbyDyTOGIQTv/h9Hq2rX
         "]]},
      Axes->False,
      ImageSize->{300, 300},
      Method->{},
      PlotRange->{{-2, 2}, {-2, 2}, {-4, 0}},
      PlotRangePadding->{Automatic, Automatic, Automatic},
      SphericalRegion->True], 
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {Left, Right}},
   GridBoxItemSize->{"Columns" -> {
       Scaled[0.2], 
       Scaled[0.3], 
       Scaled[0.3], 
       Scaled[0.2]}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.583760758727047*^9, 3.583768274948666*^9, 
  3.583768915311081*^9, 3.583774926570421*^9, 3.583775177878201*^9, 
  3.5837818404063683`*^9, 3.583782784928536*^9, 3.5837834081449203`*^9, 
  3.583786677771265*^9, 3.583787161706976*^9, 3.583949367560646*^9, 
  3.583949908386387*^9, 3.583950022631433*^9, 3.5839505888190737`*^9, 
  3.583950905796101*^9, 3.5839509909788513`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 TextAlignment->Center,
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Characterization of Good and Bad Orbigraphs", "Section",
 CellChangeTimes->{{3.583504537673525*^9, 3.583504582132621*^9}, {
  3.583509437760704*^9, 3.583509440334321*^9}, {3.583604913812951*^9, 
  3.5836049144171343`*^9}, {3.583604949342388*^9, 3.583604952190271*^9}, {
  3.583611444032045*^9, 3.5836114865967817`*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Good:",
  FontWeight->"Bold"],
 " only \[OpenCurlyDoubleQuote]balanced\[CloseCurlyDoubleQuote] cycles"
}], "Item",
 CellChangeTimes->{{3.583603153527471*^9, 3.5836031912009563`*^9}, {
  3.583604909628951*^9, 3.583604921172461*^9}, {3.583605049452754*^9, 
  3.583605149692397*^9}, {3.583611519709037*^9, 3.583611520364934*^9}, {
  3.583611614267494*^9, 3.583611621170806*^9}, {3.5836117425548553`*^9, 
  3.583611750895398*^9}, {3.5837587699890127`*^9, 3.5837587737621737`*^9}, {
  3.583760717195385*^9, 3.5837607350850286`*^9}}],

Cell[TextData[{
 StyleBox["Bad:",
  FontWeight->"Bold"],
 " at least one \[OpenCurlyDoubleQuote]unbalanced\[CloseCurlyDoubleQuote] \
cycle"
}], "Item",
 CellChangeTimes->{{3.583603153527471*^9, 3.5836031912009563`*^9}, {
  3.583604909628951*^9, 3.583604921172461*^9}, {3.583605049452754*^9, 
  3.583605143390977*^9}, {3.583611754270728*^9, 3.583611756297846*^9}, {
  3.583760720964121*^9, 3.583760736429329*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"badOrbi", " ", "=", " ", 
    RowBox[{"SetProperty", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"AdjacencyOrbigraph", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "2", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0", ",", "2"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1", ",", "0"}], "}"}]}], "}"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"VertexSize", " ", "\[Rule]", " ", ".1"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"VertexStyle", "\[Rule]", "\[IndentingNewLine]", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"1", " ", "\[Rule]", " ", "Red"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"2", "\[Rule]", " ", "Yellow"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"3", "\[Rule]", "Purple"}]}], "\[IndentingNewLine]", 
          "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"VertexShapeFunction", "\[Rule]", "\[IndentingNewLine]", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"1", "\[Rule]", " ", "\"\<Triangle\>\""}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"2", "\[Rule]", "\"\<Square\>\""}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"3", "\[Rule]", "\"\<Star\>\""}]}], "\[IndentingNewLine]", 
          "}"}]}]}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"goodOrbi", " ", "=", " ", 
    RowBox[{"SetProperty", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"AdjacencyOrbigraph", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "3"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}]}], "}"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"VertexSize", "\[Rule]", ".1"}], ",", "\[IndentingNewLine]", 
        RowBox[{"VertexStyle", "\[Rule]", "\[IndentingNewLine]", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"1", "\[Rule]", " ", "Red"}], ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"2", "\[Rule]", " ", "Yellow"}]}], "\[IndentingNewLine]", 
          "}"}]}], ",", "\[IndentingNewLine]", " ", 
        RowBox[{"VertexShapeFunction", "\[Rule]", "\[IndentingNewLine]", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"1", "\[Rule]", " ", "\"\<Triangle\>\""}], ",", " ", 
           "\[IndentingNewLine]", 
           RowBox[{"2", "\[Rule]", " ", "\"\<Square\>\""}]}], 
          "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"dwnArrw", " ", "=", " ", 
    RowBox[{"Graphics", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Arrowheads", "[", ".1", "]"}], ",", 
       RowBox[{"Arrow", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", ".3"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", 
            RowBox[{"-", ".3"}]}], "}"}]}], "}"}], "]"}]}], "}"}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"edgesToHighlight", " ", "=", " ", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "}"}], ",", " ", 
        RowBox[{"Darker", "@", "Green"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"1", "\[DirectedEdge]", "2"}], ",", " ", 
        RowBox[{"Darker", "@", "Green"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"2", "\[DirectedEdge]", "3"}], ",", " ", 
        RowBox[{"Darker", "@", "Green"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"3", "\[DirectedEdge]", "1"}], ",", 
        RowBox[{"Darker", "@", "Green"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"1", "\[DirectedEdge]", "3"}], ",", 
        RowBox[{"Darker", "@", "Red"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"3", "\[DirectedEdge]", "2"}], ",", 
        RowBox[{"Darker", "@", "Red"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"2", "\[DirectedEdge]", "1"}], ",", 
        RowBox[{"Darker", "@", "Red"}]}], "}"}]}], "\[IndentingNewLine]", 
     "}"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"textFrames", " ", "=", " ", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<\>\"", ",", " ", "\"\<Subsection\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<2\>\"", ",", " ", "\"\<Subsection\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<2\[Times]2\>\"", ",", " ", "\"\<Subsection\>\""}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<2\[Times]2\[Times]2\>\"", ",", " ", "\"\<Subsection\>\""}], "}"}],
       ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<2\[Times]2\[Times]2\[NotEqual]1\>\"", ",", " ", 
        "\"\<Subsection\>\""}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<2\[Times]2\[Times]2\[NotEqual]1\[Times]1\>\"", ",", " ", 
        "\"\<Subsection\>\""}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
       "\"\<2\[Times]2\[Times]2\[NotEqual]1\[Times]1\[Times]1\>\"", ",", " ", 
        "\"\<Subsection\>\""}], "}"}]}], "\[IndentingNewLine]", "}"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"edgesToHighlight2", " ", "=", " ", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "}"}], ",", " ", 
        RowBox[{"Darker", "@", "Green"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"1", "\[DirectedEdge]", "2"}], ",", " ", 
        RowBox[{"Darker", "@", "Green"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"2", "\[DirectedEdge]", "1"}], ",", " ", 
        RowBox[{"Darker", "@", "Green"}]}], "}"}]}], "\[IndentingNewLine]", 
     "}"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"textFrames2", "=", " ", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<\>\"", ",", " ", "\"\<Subsection\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<3\>\"", ",", " ", "\"\<Subsection\>\""}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\"\<3\[Times]1\>\"", ",", " ", "\"\<Subsection\>\""}], 
       "}"}]}], "\[IndentingNewLine]", "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"kolmogorov", "=", "\[IndentingNewLine]", 
    RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Column", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"SetProperty", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HighlightGraph", "[", 
            RowBox[{"badOrbi", ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"Style", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"First", "@", 
                  RowBox[{
                  "edgesToHighlight", "\[LeftDoubleBracket]", "#", 
                   "\[RightDoubleBracket]"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Last", "@", 
                  RowBox[{
                  "edgesToHighlight", "\[LeftDoubleBracket]", "#", 
                   "\[RightDoubleBracket]"}]}]}], "\[IndentingNewLine]", 
                "]"}], "&"}], "/@", 
              RowBox[{"Range", "[", "d", "]"}]}]}], "\[IndentingNewLine]", 
            "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"ImageSize", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"300", ",", "300"}], "}"}]}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Spacer", "[", "20", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Row", "[", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Spacer", "[", "20", "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Style", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"First", "@", 
               RowBox[{
               "textFrames", "\[LeftDoubleBracket]", "d", 
                "\[RightDoubleBracket]"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"Last", "@", 
               RowBox[{
               "textFrames", "\[LeftDoubleBracket]", "d", 
                "\[RightDoubleBracket]"}]}]}], "\[IndentingNewLine]", "]"}]}],
            "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
        "}"}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", " ", 
      
      RowBox[{"{", 
       RowBox[{"d", ",", " ", "1", ",", " ", "7", ",", "1"}], "}"}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"kolmogorov2", " ", "=", " ", "\[IndentingNewLine]", 
    RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Column", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"SetProperty", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"HighlightGraph", "[", 
            RowBox[{"goodOrbi", ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"Style", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"First", "@", 
                  RowBox[{
                  "edgesToHighlight2", "\[LeftDoubleBracket]", "#", 
                   "\[RightDoubleBracket]"}]}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Last", "@", 
                  RowBox[{
                  "edgesToHighlight2", "\[LeftDoubleBracket]", "#", 
                   "\[RightDoubleBracket]"}]}]}], "\[IndentingNewLine]", 
                "]"}], "&"}], "/@", 
              RowBox[{"Range", "[", "d", "]"}]}]}], "\[IndentingNewLine]", 
            "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"ImageSize", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"300", ",", "300"}], "}"}]}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Spacer", "[", "20", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Row", "[", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Spacer", "[", "20", "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Style", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"First", "@", 
               RowBox[{
               "textFrames2", "\[LeftDoubleBracket]", "d", 
                "\[RightDoubleBracket]"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"Last", "@", 
               RowBox[{
               "textFrames2", "\[LeftDoubleBracket]", "d", 
                "\[RightDoubleBracket]"}]}]}], "\[IndentingNewLine]", "]"}]}],
            "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
        "}"}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", " ", 
      RowBox[{"{", 
       RowBox[{"d", ",", " ", "1", ",", " ", "3", ",", "1"}], "}"}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Grid", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Spacer", "[", "5", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Style", "[", 
         RowBox[{"\"\<Good Orbigraph\>\"", ",", " ", "\"\<Subsection\>\""}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Spacer", "[", "5", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Style", "[", 
         RowBox[{"\"\<Bad Orbigraph\>\"", ",", " ", "\"\<Subsection\>\""}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Spacer", "[", "5", "]"}]}], "\[IndentingNewLine]", "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Spacer", "[", "5", "]"}], ",", "\[IndentingNewLine]", 
        "kolmogorov2", ",", "\[IndentingNewLine]", 
        RowBox[{"Spacer", "[", ".1", "]"}], ",", "\[IndentingNewLine]", 
        "kolmogorov", ",", "\[IndentingNewLine]", 
        RowBox[{"Spacer", "[", "5", "]"}]}], "\[IndentingNewLine]", "}"}]}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Alignment", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"Left", ",", " ", "Right"}], "}"}], "}"}]}]}], 
   "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "\[IndentingNewLine]",
   "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.583504944724468*^9, 3.5835049592416162`*^9}, {
   3.5835049927540073`*^9, 3.583505053865456*^9}, {3.583505222942459*^9, 
   3.583505241869524*^9}, {3.5835054829201117`*^9, 3.583505569151123*^9}, {
   3.583505736571486*^9, 3.583505791465477*^9}, {3.583505966062635*^9, 
   3.58350597062294*^9}, {3.5835060884056*^9, 3.58350609657927*^9}, {
   3.58350634765458*^9, 3.58350642598237*^9}, {3.583506503115983*^9, 
   3.583506599627789*^9}, {3.583506975530591*^9, 3.58350701624997*^9}, {
   3.5835070866885147`*^9, 3.5835072337917957`*^9}, {3.583507382884967*^9, 
   3.583507581783242*^9}, {3.583507611928054*^9, 3.583507757178371*^9}, {
   3.583507801074963*^9, 3.583507912632885*^9}, {3.583507944307445*^9, 
   3.583508018584435*^9}, {3.5835089710368347`*^9, 3.5835089808353148`*^9}, {
   3.583509036635407*^9, 3.583509041090455*^9}, {3.583509077009577*^9, 
   3.58350908729753*^9}, {3.5835091294576683`*^9, 3.583509141560104*^9}, {
   3.583509248894765*^9, 3.583509253845396*^9}, {3.583509488665283*^9, 
   3.5835095038468847`*^9}, {3.583511423096323*^9, 3.583511565989129*^9}, {
   3.583513828523304*^9, 3.5835138470916357`*^9}, {3.5835143482647057`*^9, 
   3.5835143613602858`*^9}, {3.583514547106325*^9, 3.583514581296501*^9}, {
   3.5835146660939903`*^9, 3.583514688178154*^9}, {3.583514809012204*^9, 
   3.5835148537166433`*^9}, {3.583514911777981*^9, 3.583514938576725*^9}, {
   3.5835149967354383`*^9, 3.583515087119169*^9}, {3.583515161333404*^9, 
   3.5835152123477907`*^9}, {3.583515368944729*^9, 3.583515423168466*^9}, {
   3.583515457031969*^9, 3.583515474702992*^9}, {3.583515529454176*^9, 
   3.5835156287868147`*^9}, 3.58351569717947*^9, {3.583515751937457*^9, 
   3.583515765166383*^9}, {3.583515842954213*^9, 3.583515865390348*^9}, {
   3.583515897550774*^9, 3.583515905480852*^9}, {3.5835165467699413`*^9, 
   3.583516591806279*^9}, {3.583516680606122*^9, 3.5835167003583393`*^9}, {
   3.583517198428335*^9, 3.583517254564885*^9}, {3.5835175064851713`*^9, 
   3.583517581643581*^9}, {3.583517628732957*^9, 3.583517643689509*^9}, {
   3.583521833550868*^9, 3.5835218362706757`*^9}, {3.5835236927229137`*^9, 
   3.5835237037387667`*^9}, {3.58352460889541*^9, 3.583524611091569*^9}, {
   3.583524668813601*^9, 3.5835246706872253`*^9}, {3.5835247443577538`*^9, 
   3.583524881995575*^9}, {3.583524956938699*^9, 3.583524997448794*^9}, {
   3.5835250402165203`*^9, 3.583525195900112*^9}, {3.583525509647999*^9, 
   3.58352556753292*^9}, {3.5835256771322117`*^9, 3.583525740599876*^9}, {
   3.583526020236393*^9, 3.583526043483322*^9}, {3.5835260835152197`*^9, 
   3.583526145184979*^9}, {3.5835262240238247`*^9, 3.583526273165412*^9}, {
   3.583526443214428*^9, 3.583526472444624*^9}, {3.583526532074785*^9, 
   3.583526568012516*^9}, {3.583526603163302*^9, 3.583526663928062*^9}, {
   3.583526714086712*^9, 3.5835268056137667`*^9}, {3.583526840675075*^9, 
   3.583526890628715*^9}, {3.583526954115641*^9, 3.583527137566971*^9}, {
   3.583527222604545*^9, 3.583527320330392*^9}, {3.583527359370315*^9, 
   3.583527371993815*^9}, {3.5835274136648283`*^9, 3.583527640437421*^9}, {
   3.583528035288609*^9, 3.5835280653090677`*^9}, {3.5835281154766493`*^9, 
   3.583528179634451*^9}, {3.583528252521051*^9, 3.583528274608552*^9}, {
   3.583528387406331*^9, 3.58352842448392*^9}, {3.583528477612151*^9, 
   3.5835288453014307`*^9}, 3.583530379399987*^9, {3.58353069240977*^9, 
   3.583530709811276*^9}, {3.5835307878087997`*^9, 3.583530797476122*^9}, {
   3.583531386321269*^9, 3.583531795145163*^9}, {3.5835320674353943`*^9, 
   3.583532095834298*^9}, {3.583532128082847*^9, 3.5835321534596157`*^9}, {
   3.583532377128251*^9, 3.583532406332727*^9}, {3.583532452005969*^9, 
   3.583532457836699*^9}, {3.583532588658032*^9, 3.583532635203437*^9}, {
   3.583532679769361*^9, 3.583532725462553*^9}, {3.583534990723576*^9, 
   3.5835350099935093`*^9}, {3.583535041616453*^9, 3.583535125743266*^9}, {
   3.583535177669486*^9, 3.583535195093073*^9}, {3.583535229754916*^9, 
   3.583535248316104*^9}, {3.583535311242296*^9, 3.583535313085679*^9}, 
   3.583535360440584*^9, {3.583535406552835*^9, 3.583535436136731*^9}, {
   3.583535544167017*^9, 3.5835356204086742`*^9}, {3.5835357307467127`*^9, 
   3.5835357484648943`*^9}, {3.5835358234156523`*^9, 3.583535829602228*^9}, {
   3.58353593467024*^9, 3.5835359687767344`*^9}, {3.583536027835637*^9, 
   3.583536103497898*^9}, {3.583537603515522*^9, 3.583537679051919*^9}, {
   3.58359019173496*^9, 3.5835902214749413`*^9}, {3.583590273995901*^9, 
   3.5835903084980927`*^9}, {3.5835903597292233`*^9, 
   3.5835904180874147`*^9}, {3.583590483268821*^9, 3.583590484838483*^9}, 
   3.58359051787752*^9, {3.583590922874465*^9, 3.5835909575371113`*^9}, {
   3.5835910007219143`*^9, 3.583591002233374*^9}, {3.5835910415461283`*^9, 
   3.583591226189279*^9}, {3.583591283684677*^9, 3.5835913088443813`*^9}, 
   3.583591379834833*^9, {3.5835915177388277`*^9, 3.583591568836029*^9}, {
   3.583591745005522*^9, 3.583591881078197*^9}, {3.583591912759396*^9, 
   3.583591913392231*^9}, {3.583592009609057*^9, 3.5835920130196867`*^9}, {
   3.5835920848695593`*^9, 3.583592137060684*^9}, {3.583592173075921*^9, 
   3.583592194538849*^9}, {3.5835922563359613`*^9, 3.5835922722646723`*^9}, {
   3.5835923215833073`*^9, 3.5835923953440866`*^9}, 3.583592593811945*^9, {
   3.5835927656128817`*^9, 3.5835927657985153`*^9}, {3.583592799330533*^9, 
   3.58359294457218*^9}, {3.583593035030363*^9, 3.5835933066756153`*^9}, 
   3.583593708246862*^9, {3.583593738550124*^9, 3.583593739923765*^9}, {
   3.583593820135426*^9, 3.583593960071262*^9}, {3.583594325672365*^9, 
   3.583594584369133*^9}, {3.583594617715447*^9, 3.583594665699744*^9}, {
   3.583594717018062*^9, 3.5835947449287767`*^9}, {3.583594798981761*^9, 
   3.583594800999576*^9}, {3.583594854265675*^9, 3.583594934844824*^9}, {
   3.583601127602009*^9, 3.5836012265717897`*^9}, {3.583602068444725*^9, 
   3.5836020769246693`*^9}, {3.583602107196233*^9, 3.5836021080155993`*^9}, {
   3.5836021391383142`*^9, 3.58360216990254*^9}, {3.58360246241577*^9, 
   3.583602472796468*^9}, {3.5836025110302277`*^9, 3.58360263489089*^9}, {
   3.583602714359172*^9, 3.583602769488693*^9}, {3.583602867981946*^9, 
   3.5836029106827803`*^9}, {3.5836030121426086`*^9, 3.583603044337311*^9}, {
   3.583603083772376*^9, 3.58360309692288*^9}, {3.5836042338245687`*^9, 
   3.583604241991658*^9}, {3.5836042906584377`*^9, 3.583604311183337*^9}, {
   3.583604355897971*^9, 3.583604372288039*^9}, {3.583604412175*^9, 
   3.583604432679254*^9}, {3.583604706369153*^9, 3.583604741314386*^9}, {
   3.583604772574151*^9, 3.583604799371385*^9}, {3.583604833466195*^9, 
   3.583604835784227*^9}, {3.583604866539257*^9, 3.583604874402608*^9}, 
   3.583605166483511*^9, {3.583605245575007*^9, 3.583605320923502*^9}, {
   3.583605357193466*^9, 3.583605486989731*^9}, {3.583608078859827*^9, 
   3.583608160953828*^9}, 3.5836083545903*^9, {3.583608455892044*^9, 
   3.583608485641975*^9}, {3.583608591075652*^9, 3.583608601963703*^9}, {
   3.583608676028508*^9, 3.58360871682295*^9}, {3.583608837281521*^9, 
   3.5836088441018753`*^9}, {3.583609014683384*^9, 3.58360903722721*^9}, {
   3.583609089579075*^9, 3.583609138607018*^9}, {3.5836092168459578`*^9, 
   3.583609272732267*^9}, {3.5836094264726467`*^9, 3.583609480896968*^9}, {
   3.583609539065761*^9, 3.5836095779830008`*^9}, {3.5836099421206503`*^9, 
   3.583609997984088*^9}, {3.583610052521035*^9, 3.58361015862053*^9}, {
   3.5836102731098747`*^9, 3.5836103041535378`*^9}, {3.583610441862707*^9, 
   3.5836105226039352`*^9}, {3.583610566516078*^9, 3.583610967412826*^9}, {
   3.583611004579772*^9, 3.583611006350637*^9}, {3.5836117764832487`*^9, 
   3.5836118064047117`*^9}, {3.583611848074044*^9, 3.5836118972590837`*^9}, {
   3.58361201167624*^9, 3.5836120263903427`*^9}, {3.583612063284726*^9, 
   3.583612103873906*^9}, {3.5836121486850233`*^9, 3.5836121491367683`*^9}, {
   3.583612185131898*^9, 3.583612235843004*^9}, {3.583612266155593*^9, 
   3.5836123598047037`*^9}, {3.583612450799273*^9, 3.5836126129725657`*^9}, {
   3.583612649444406*^9, 3.583612659245757*^9}, {3.583612798723405*^9, 
   3.5836130569878187`*^9}, {3.583613184162347*^9, 3.58361326491588*^9}, {
   3.5836137652636223`*^9, 3.5836137697665567`*^9}, {3.583613869494088*^9, 
   3.583613916766377*^9}, {3.583614130329897*^9, 3.583614182535926*^9}, {
   3.583614223191633*^9, 3.583614360301526*^9}, {3.5836144464515343`*^9, 
   3.583614464996048*^9}, {3.58361461640648*^9, 3.583614661463748*^9}, {
   3.583614775082646*^9, 3.583614794483403*^9}, {3.583674893626588*^9, 
   3.583674998183098*^9}, {3.5836750758697653`*^9, 3.583675146509624*^9}, {
   3.5836751994072104`*^9, 3.583675298526833*^9}, 3.5837634547767067`*^9, {
   3.583763490781982*^9, 3.583763518282522*^9}, {3.583763584240382*^9, 
   3.583763586490067*^9}, {3.583763635433506*^9, 3.5837636382762423`*^9}, {
   3.583763924568665*^9, 3.583763976144964*^9}, {3.583764009303698*^9, 
   3.583764065124098*^9}, {3.583764126071965*^9, 3.5837642284233294`*^9}, {
   3.5837643411094913`*^9, 3.583764356284862*^9}, {3.583764398576096*^9, 
   3.583764403797978*^9}, {3.583764610295294*^9, 3.5837646478082323`*^9}, {
   3.583764684728592*^9, 3.583764886967883*^9}, {3.583765009892171*^9, 
   3.5837650311481457`*^9}, {3.583765790861753*^9, 3.5837658413474913`*^9}, {
   3.5837659221973658`*^9, 3.5837659431551943`*^9}, {3.5837659981397667`*^9, 
   3.583766128183428*^9}, {3.5837681972096443`*^9, 3.583768197790884*^9}, {
   3.583768244502513*^9, 3.5837682507321777`*^9}, {3.583768293428917*^9, 
   3.583768373275227*^9}, {3.583768409660212*^9, 3.5837684287698402`*^9}, {
   3.5837684602417383`*^9, 3.5837685523848867`*^9}, {3.583768591959345*^9, 
   3.583768625283163*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]], 
     StyleBox["\<\"Good Orbigraph\"\>", "Subsection",
      StripOnInput->False], 
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]], 
     StyleBox["\<\"Bad Orbigraph\"\>", "Subsection",
      StripOnInput->False], 
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]]},
    {
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]], 
     TagBox[
      StyleBox[
       DynamicModuleBox[{$CellContext`d$$ = 1, Typeset`show$$ = True, 
        Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
        Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
        "\"untitled\"", Typeset`specs$$ = {{
          Hold[$CellContext`d$$], 1, 3, 1}}, Typeset`size$$ = {
        300., {163.625, 169.375}}, Typeset`update$$ = 0, Typeset`initDone$$, 
        Typeset`skipInitDone$$ = True, $CellContext`d$953$$ = 0}, 
        DynamicBox[Manipulate`ManipulateBoxes[
         1, StandardForm, "Variables" :> {$CellContext`d$$ = 1}, 
          "ControllerVariables" :> {
            Hold[$CellContext`d$$, $CellContext`d$953$$, 0]}, 
          "OtherVariables" :> {
           Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
            Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
            Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
            Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> Column[{
             SetProperty[
              HighlightGraph[$CellContext`goodOrbi, 
               Map[Style[
                 First[
                  Part[$CellContext`edgesToHighlight2, #]], 
                 Last[
                  Part[$CellContext`edgesToHighlight2, #]]]& , 
                Range[$CellContext`d$$]]], ImageSize -> {300, 300}], 
             Spacer[20], 
             Row[{
               Spacer[20], 
               Style[
                First[
                 Part[$CellContext`textFrames2, $CellContext`d$$]], 
                Last[
                 Part[$CellContext`textFrames2, $CellContext`d$$]]]}]}], 
          "Specifications" :> {{$CellContext`d$$, 1, 3, 1}}, "Options" :> {}, 
          "DefaultOptions" :> {}],
         ImageSizeCache->{345., {209., 214.}},
         SingleEvaluation->True],
        Deinitialization:>None,
        DynamicModuleValues:>{},
        SynchronousInitialization->True,
        UnsavedVariables:>{Typeset`initDone$$},
        UntrackedVariables:>{Typeset`size$$}], "Manipulate",
       Deployed->True,
       StripOnInput->False],
      Manipulate`InterpretManipulate[1]], 
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{0.1, 0}],
       CacheGraphics->False],
      Spacer[0.1]], 
     TagBox[
      StyleBox[
       DynamicModuleBox[{$CellContext`d$$ = 1, Typeset`show$$ = True, 
        Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
        Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
        "\"untitled\"", Typeset`specs$$ = {{
          Hold[$CellContext`d$$], 1, 7, 1}}, Typeset`size$$ = {
        300., {163.625, 169.375}}, Typeset`update$$ = 0, Typeset`initDone$$, 
        Typeset`skipInitDone$$ = True, $CellContext`d$970$$ = 0}, 
        DynamicBox[Manipulate`ManipulateBoxes[
         1, StandardForm, "Variables" :> {$CellContext`d$$ = 1}, 
          "ControllerVariables" :> {
            Hold[$CellContext`d$$, $CellContext`d$970$$, 0]}, 
          "OtherVariables" :> {
           Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
            Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
            Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
            Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> Column[{
             SetProperty[
              HighlightGraph[$CellContext`badOrbi, 
               Map[Style[
                 First[
                  Part[$CellContext`edgesToHighlight, #]], 
                 Last[
                  Part[$CellContext`edgesToHighlight, #]]]& , 
                Range[$CellContext`d$$]]], ImageSize -> {300, 300}], 
             Spacer[20], 
             Row[{
               Spacer[20], 
               Style[
                First[
                 Part[$CellContext`textFrames, $CellContext`d$$]], 
                Last[
                 Part[$CellContext`textFrames, $CellContext`d$$]]]}]}], 
          "Specifications" :> {{$CellContext`d$$, 1, 7, 1}}, "Options" :> {}, 
          "DefaultOptions" :> {}],
         ImageSizeCache->{345., {209., 214.}},
         SingleEvaluation->True],
        Deinitialization:>None,
        DynamicModuleValues:>{},
        SynchronousInitialization->True,
        UnsavedVariables:>{Typeset`initDone$$},
        UntrackedVariables:>{Typeset`size$$}], "Manipulate",
       Deployed->True,
       StripOnInput->False],
      Manipulate`InterpretManipulate[1]], 
     InterpretationBox[
      StyleBox[
       GraphicsBox[{},
        BaselinePosition->Baseline,
        ImageSize->{5, 0}],
       CacheGraphics->False],
      Spacer[5]]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {Left, Right}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.583605304103899*^9, 3.583605321171246*^9}, {
   3.583605362409018*^9, 3.583605372188094*^9}, {3.5836054139039583`*^9, 
   3.583605487579677*^9}, {3.583608112895891*^9, 3.583608155791032*^9}, 
   3.583608355191963*^9, {3.583608459615102*^9, 3.583608484018375*^9}, {
   3.58360859690518*^9, 3.58360860221242*^9}, {3.5836087119445677`*^9, 
   3.583608717320716*^9}, 3.583609037736796*^9, {3.583609090017983*^9, 
   3.5836091389814787`*^9}, {3.583609559929267*^9, 3.583609578555271*^9}, {
   3.58360995936835*^9, 3.583609998501627*^9}, {3.5836100997640953`*^9, 
   3.583610145998011*^9}, {3.583610280352467*^9, 3.583610287085137*^9}, {
   3.583610465015502*^9, 3.583610523510083*^9}, 3.583610602963153*^9, {
   3.583610647225931*^9, 3.583610668588819*^9}, 3.583610709898843*^9, {
   3.5836108225683002`*^9, 3.5836108522339067`*^9}, {3.583610898313843*^9, 
   3.583610967841791*^9}, 3.5836110068076353`*^9, 3.58361140564638*^9, 
   3.583611806765967*^9, 3.5836118977490797`*^9, 3.583612027020878*^9, {
   3.583612065206584*^9, 3.583612083086989*^9}, {3.58361221320543*^9, 
   3.583612236773549*^9}, {3.58361227836779*^9, 3.583612285262623*^9}, {
   3.583612327222267*^9, 3.583612360116243*^9}, {3.583612454512353*^9, 
   3.583612475465673*^9}, {3.5836125400271177`*^9, 3.5836125611415043`*^9}, {
   3.5836125933283863`*^9, 3.5836126133282013`*^9}, 3.5836126599600143`*^9, {
   3.583612822437046*^9, 3.5836128650940237`*^9}, 3.583613057461712*^9, {
   3.583613202420528*^9, 3.5836132667874527`*^9}, 3.583613753475609*^9, 
   3.5836138566791353`*^9, {3.583613890974971*^9, 3.583613918351927*^9}, {
   3.5836141459147377`*^9, 3.583614153893908*^9}, {3.5836142255435133`*^9, 
   3.583614244280182*^9}, 3.583614298189299*^9, {3.583614339726673*^9, 
   3.583614360651346*^9}, 3.583614446970199*^9, 3.583614559150749*^9, {
   3.5836146295413113`*^9, 3.583614656230777*^9}, {3.58361478366778*^9, 
   3.583614796457695*^9}, {3.583674943784747*^9, 3.58367499870958*^9}, {
   3.583675081001998*^9, 3.583675113451252*^9}, {3.583675200118129*^9, 
   3.583675298875119*^9}, 3.5836763872520447`*^9, 3.583763499258793*^9, 
   3.5837635869903803`*^9, 3.583763638916*^9, 3.583764359185445*^9, 
   3.5837644159343863`*^9, 3.58376465210748*^9, {3.583764872815*^9, 
   3.583764889196328*^9}, {3.583765020971201*^9, 3.583765032227013*^9}, 
   3.583765946475883*^9, {3.583766038808607*^9, 3.583766128779747*^9}, 
   3.5837681990428247`*^9, {3.5837682512427673`*^9, 3.583768340615632*^9}, 
   3.5837683737455797`*^9, {3.58376841031628*^9, 3.583768429195877*^9}, {
   3.583768461335519*^9, 3.5837685201165237`*^9}, 3.58376855283078*^9, {
   3.583768605762587*^9, 3.5837686257621717`*^9}, 3.583768915688692*^9, 
   3.5837749270571747`*^9, 3.583775178455619*^9, 3.5837818408611517`*^9, 
   3.5837827853970327`*^9, 3.5837834083663473`*^9, 3.5837866779918528`*^9, 
   3.5837871623658543`*^9, 3.583949367785261*^9, 3.583949908676858*^9, 
   3.5839500230620003`*^9, 3.5839509060255737`*^9}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.583766067224943*^9, 3.5837660682111998`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 TextAlignment->Center,
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Example: Good Orbigraph", "Section",
 CellChangeTimes->{{3.583504537673525*^9, 3.583504582132621*^9}, {
  3.583509437760704*^9, 3.583509440334321*^9}, {3.583604913812951*^9, 
  3.5836049144171343`*^9}, {3.583604949342388*^9, 3.583604952190271*^9}, {
  3.583611444032045*^9, 3.5836114865967817`*^9}, {3.5836753545761843`*^9, 
  3.583675361473876*^9}}],

Cell["\<\
Let\[CloseCurlyQuote]s pick a random good orbigraph and construct a covering\
\>", "Item",
 CellChangeTimes->{{3.583603153527471*^9, 3.5836031912009563`*^9}, {
  3.583604909628951*^9, 3.583604921172461*^9}, {3.583605049452754*^9, 
  3.583605149692397*^9}, {3.583611519709037*^9, 3.583611520364934*^9}, {
  3.583611614267494*^9, 3.583611621170806*^9}, {3.5836117425548553`*^9, 
  3.583611750895398*^9}, {3.583675364823827*^9, 3.583675382895338*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"GenerateRandomReversibleOrbigraph", "[", 
     RowBox[{"n_", ",", " ", "k_"}], "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"randOrbi", " ", "=", " ", 
         RowBox[{"GenerateRandomOrbigraph", "[", 
          RowBox[{"n", ",", " ", "k"}], "]"}]}], ",", " ", 
        RowBox[{"tries", "=", "0"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"tries", " ", "\[LessEqual]", " ", "400"}], " ", "&&", " ", 
           RowBox[{"Not", "[", 
            RowBox[{"ConnectedOrbigraphQ", "[", "randOrbi", "]"}], "]"}]}], 
          " ", "||", " ", 
          RowBox[{"Not", "[", 
           RowBox[{"OrbigraphReversibleQ", "[", "randOrbi", "]"}], "]"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"randOrbi", " ", "=", " ", 
           RowBox[{"GenerateRandomOrbigraph", "[", 
            RowBox[{"n", ",", " ", "k"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"tries", "++"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";",
        "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "randOrbi", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"randOrbi", " ", "=", " ", 
     RowBox[{"Style", "[", 
      RowBox[{"\"\<Nothing\>\"", ",", " ", "\"\<Subsubsection\>\""}], "]"}]}],
     ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"coveringGraph", " ", "=", " ", 
     RowBox[{"Style", "[", 
      RowBox[{"\"\<Nothing\>\"", ",", " ", "\"\<Subsubsection\>\""}], "]"}]}],
     ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"Column", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Button", "[", 
        RowBox[{
        "\"\<Generate Random Orbigraph\>\"", ",", " ", "\[IndentingNewLine]", 
         
         RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"coveringGraph", " ", "=", " ", 
            RowBox[{"Style", "[", 
             RowBox[{"\"\<Nothing\>\"", ",", " ", "\"\<Subsubsection\>\""}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"randOrbi", " ", "=", " ", 
            RowBox[{"GenerateRandomReversibleOrbigraph", "[", 
             RowBox[{"3", ",", "3"}], "]"}]}], ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"randOrbi", " ", "=", " ", 
            RowBox[{"SetProperty", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"AdjacencyOrbigraph", "@", "randOrbi"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"VertexSize", "\[Rule]", ".1"}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"ImageSize", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"300", ",", "300"}], "}"}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"VertexStyle", "\[Rule]", "\[IndentingNewLine]", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"1", "\[Rule]", " ", "Red"}], ",", " ", 
                   "\[IndentingNewLine]", 
                   RowBox[{"2", "\[Rule]", " ", "Yellow"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"3", "\[Rule]", "Purple"}]}], 
                  "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", 
                " ", 
                RowBox[{
                "VertexShapeFunction", "\[Rule]", "\[IndentingNewLine]", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"1", "\[Rule]", " ", "\"\<Triangle\>\""}], ",", 
                   " ", "\[IndentingNewLine]", 
                   RowBox[{"2", "\[Rule]", " ", "\"\<Square\>\""}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"3", "\[Rule]", "\"\<Star\>\""}]}], 
                  "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", 
               "}"}]}], "\[IndentingNewLine]", "]"}]}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Button", "[", 
        RowBox[{
        "\"\<Generate Finite Covering\>\"", ",", "\[IndentingNewLine]", 
         RowBox[{"Dynamic", "[", 
          RowBox[{
           RowBox[{"coveringGraph", " ", "=", " ", 
            RowBox[{"SetProperty", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"CreateFiniteCoveringGraph", "[", 
               RowBox[{"WeightedAdjacencyMatrix", "@", "randOrbi"}], "]"}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"ImageSize", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"300", ",", "300"}], "}"}]}], ",", " ", 
                RowBox[{
                "GraphLayout", "\[Rule]", "\"\<SpringEmbedding\>\""}]}], 
               "}"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Dynamic", "[", "coveringGraph", "]"}], ",", 
       "\[IndentingNewLine]", "dwnArrw", ",", "\[IndentingNewLine]", 
       RowBox[{"Dynamic", "[", "randOrbi", "]"}]}], "\[IndentingNewLine]", 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Alignment", "\[Rule]", "Center"}]}], "\[IndentingNewLine]", 
    "]"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]"}]}]], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.583504944724468*^9, 3.5835049592416162`*^9}, {
   3.5835049927540073`*^9, 3.583505053865456*^9}, {3.583505222942459*^9, 
   3.583505241869524*^9}, {3.5835054829201117`*^9, 3.583505569151123*^9}, {
   3.583505736571486*^9, 3.583505791465477*^9}, {3.583505966062635*^9, 
   3.58350597062294*^9}, {3.5835060884056*^9, 3.58350609657927*^9}, {
   3.58350634765458*^9, 3.58350642598237*^9}, {3.583506503115983*^9, 
   3.583506599627789*^9}, {3.583506975530591*^9, 3.58350701624997*^9}, {
   3.5835070866885147`*^9, 3.5835072337917957`*^9}, {3.583507382884967*^9, 
   3.583507581783242*^9}, {3.583507611928054*^9, 3.583507757178371*^9}, {
   3.583507801074963*^9, 3.583507912632885*^9}, {3.583507944307445*^9, 
   3.583508018584435*^9}, {3.5835089710368347`*^9, 3.5835089808353148`*^9}, {
   3.583509036635407*^9, 3.583509041090455*^9}, {3.583509077009577*^9, 
   3.58350908729753*^9}, {3.5835091294576683`*^9, 3.583509141560104*^9}, {
   3.583509248894765*^9, 3.583509253845396*^9}, {3.583509488665283*^9, 
   3.5835095038468847`*^9}, {3.583511423096323*^9, 3.583511565989129*^9}, {
   3.583513828523304*^9, 3.5835138470916357`*^9}, {3.5835143482647057`*^9, 
   3.5835143613602858`*^9}, {3.583514547106325*^9, 3.583514581296501*^9}, {
   3.5835146660939903`*^9, 3.583514688178154*^9}, {3.583514809012204*^9, 
   3.5835148537166433`*^9}, {3.583514911777981*^9, 3.583514938576725*^9}, {
   3.5835149967354383`*^9, 3.583515087119169*^9}, {3.583515161333404*^9, 
   3.5835152123477907`*^9}, {3.583515368944729*^9, 3.583515423168466*^9}, {
   3.583515457031969*^9, 3.583515474702992*^9}, {3.583515529454176*^9, 
   3.5835156287868147`*^9}, 3.58351569717947*^9, {3.583515751937457*^9, 
   3.583515765166383*^9}, {3.583515842954213*^9, 3.583515865390348*^9}, {
   3.583515897550774*^9, 3.583515905480852*^9}, {3.5835165467699413`*^9, 
   3.583516591806279*^9}, {3.583516680606122*^9, 3.5835167003583393`*^9}, {
   3.583517198428335*^9, 3.583517254564885*^9}, {3.5835175064851713`*^9, 
   3.583517581643581*^9}, {3.583517628732957*^9, 3.583517643689509*^9}, {
   3.583521833550868*^9, 3.5835218362706757`*^9}, {3.5835236927229137`*^9, 
   3.5835237037387667`*^9}, {3.58352460889541*^9, 3.583524611091569*^9}, {
   3.583524668813601*^9, 3.5835246706872253`*^9}, {3.5835247443577538`*^9, 
   3.583524881995575*^9}, {3.583524956938699*^9, 3.583524997448794*^9}, {
   3.5835250402165203`*^9, 3.583525195900112*^9}, {3.583525509647999*^9, 
   3.58352556753292*^9}, {3.5835256771322117`*^9, 3.583525740599876*^9}, {
   3.583526020236393*^9, 3.583526043483322*^9}, {3.5835260835152197`*^9, 
   3.583526145184979*^9}, {3.5835262240238247`*^9, 3.583526273165412*^9}, {
   3.583526443214428*^9, 3.583526472444624*^9}, {3.583526532074785*^9, 
   3.583526568012516*^9}, {3.583526603163302*^9, 3.583526663928062*^9}, {
   3.583526714086712*^9, 3.5835268056137667`*^9}, {3.583526840675075*^9, 
   3.583526890628715*^9}, {3.583526954115641*^9, 3.583527137566971*^9}, {
   3.583527222604545*^9, 3.583527320330392*^9}, {3.583527359370315*^9, 
   3.583527371993815*^9}, {3.5835274136648283`*^9, 3.583527640437421*^9}, {
   3.583528035288609*^9, 3.5835280653090677`*^9}, {3.5835281154766493`*^9, 
   3.583528179634451*^9}, {3.583528252521051*^9, 3.583528274608552*^9}, {
   3.583528387406331*^9, 3.58352842448392*^9}, {3.583528477612151*^9, 
   3.5835288453014307`*^9}, 3.583530379399987*^9, {3.58353069240977*^9, 
   3.583530709811276*^9}, {3.5835307878087997`*^9, 3.583530797476122*^9}, {
   3.583531386321269*^9, 3.583531795145163*^9}, {3.5835320674353943`*^9, 
   3.583532095834298*^9}, {3.583532128082847*^9, 3.5835321534596157`*^9}, {
   3.583532377128251*^9, 3.583532406332727*^9}, {3.583532452005969*^9, 
   3.583532457836699*^9}, {3.583532588658032*^9, 3.583532635203437*^9}, {
   3.583532679769361*^9, 3.583532725462553*^9}, {3.583534990723576*^9, 
   3.5835350099935093`*^9}, {3.583535041616453*^9, 3.583535125743266*^9}, {
   3.583535177669486*^9, 3.583535195093073*^9}, {3.583535229754916*^9, 
   3.583535248316104*^9}, {3.583535311242296*^9, 3.583535313085679*^9}, 
   3.583535360440584*^9, {3.583535406552835*^9, 3.583535436136731*^9}, {
   3.583535544167017*^9, 3.5835356204086742`*^9}, {3.5835357307467127`*^9, 
   3.5835357484648943`*^9}, {3.5835358234156523`*^9, 3.583535829602228*^9}, {
   3.58353593467024*^9, 3.5835359687767344`*^9}, {3.583536027835637*^9, 
   3.583536103497898*^9}, {3.583537603515522*^9, 3.583537679051919*^9}, {
   3.58359019173496*^9, 3.5835902214749413`*^9}, {3.583590273995901*^9, 
   3.5835903084980927`*^9}, {3.5835903597292233`*^9, 
   3.5835904180874147`*^9}, {3.583590483268821*^9, 3.583590484838483*^9}, 
   3.58359051787752*^9, {3.583590922874465*^9, 3.5835909575371113`*^9}, {
   3.5835910007219143`*^9, 3.583591002233374*^9}, {3.5835910415461283`*^9, 
   3.583591226189279*^9}, {3.583591283684677*^9, 3.5835913088443813`*^9}, 
   3.583591379834833*^9, {3.5835915177388277`*^9, 3.583591568836029*^9}, {
   3.583591745005522*^9, 3.583591881078197*^9}, {3.583591912759396*^9, 
   3.583591913392231*^9}, {3.583592009609057*^9, 3.5835920130196867`*^9}, {
   3.5835920848695593`*^9, 3.583592137060684*^9}, {3.583592173075921*^9, 
   3.583592194538849*^9}, {3.5835922563359613`*^9, 3.5835922722646723`*^9}, {
   3.5835923215833073`*^9, 3.5835923953440866`*^9}, 3.583592593811945*^9, {
   3.5835927656128817`*^9, 3.5835927657985153`*^9}, {3.583592799330533*^9, 
   3.58359294457218*^9}, {3.583593035030363*^9, 3.5835933066756153`*^9}, 
   3.583593708246862*^9, {3.583593738550124*^9, 3.583593739923765*^9}, {
   3.583593820135426*^9, 3.583593960071262*^9}, {3.583594325672365*^9, 
   3.583594584369133*^9}, {3.583594617715447*^9, 3.583594665699744*^9}, {
   3.583594717018062*^9, 3.5835947449287767`*^9}, {3.583594798981761*^9, 
   3.583594800999576*^9}, {3.583594854265675*^9, 3.583594934844824*^9}, {
   3.583601127602009*^9, 3.5836012265717897`*^9}, {3.583602068444725*^9, 
   3.5836020769246693`*^9}, {3.583602107196233*^9, 3.5836021080155993`*^9}, {
   3.5836021391383142`*^9, 3.58360216990254*^9}, {3.58360246241577*^9, 
   3.583602472796468*^9}, {3.5836025110302277`*^9, 3.58360263489089*^9}, {
   3.583602714359172*^9, 3.583602769488693*^9}, {3.583602867981946*^9, 
   3.5836029106827803`*^9}, {3.5836030121426086`*^9, 3.583603044337311*^9}, {
   3.583603083772376*^9, 3.58360309692288*^9}, {3.5836042338245687`*^9, 
   3.583604241991658*^9}, {3.5836042906584377`*^9, 3.583604311183337*^9}, {
   3.583604355897971*^9, 3.583604372288039*^9}, {3.583604412175*^9, 
   3.583604432679254*^9}, {3.583604706369153*^9, 3.583604741314386*^9}, {
   3.583604772574151*^9, 3.583604799371385*^9}, {3.583604833466195*^9, 
   3.583604835784227*^9}, {3.583604866539257*^9, 3.583604874402608*^9}, 
   3.583605166483511*^9, {3.583605245575007*^9, 3.583605320923502*^9}, {
   3.583605357193466*^9, 3.583605486989731*^9}, {3.583608078859827*^9, 
   3.583608160953828*^9}, 3.5836083545903*^9, {3.583608455892044*^9, 
   3.583608485641975*^9}, {3.583608591075652*^9, 3.583608601963703*^9}, {
   3.583608676028508*^9, 3.58360871682295*^9}, {3.583608837281521*^9, 
   3.5836088441018753`*^9}, {3.583609014683384*^9, 3.58360903722721*^9}, {
   3.583609089579075*^9, 3.583609138607018*^9}, {3.5836092168459578`*^9, 
   3.583609272732267*^9}, {3.5836094264726467`*^9, 3.583609480896968*^9}, {
   3.583609539065761*^9, 3.5836095779830008`*^9}, {3.5836099421206503`*^9, 
   3.583609997984088*^9}, {3.583610052521035*^9, 3.58361015862053*^9}, {
   3.5836102731098747`*^9, 3.5836103041535378`*^9}, {3.583610441862707*^9, 
   3.5836105226039352`*^9}, {3.583610566516078*^9, 3.583610967412826*^9}, {
   3.583611004579772*^9, 3.583611006350637*^9}, {3.5836117764832487`*^9, 
   3.5836118064047117`*^9}, {3.583611848074044*^9, 3.5836118972590837`*^9}, {
   3.58361201167624*^9, 3.5836120263903427`*^9}, {3.583612063284726*^9, 
   3.583612103873906*^9}, {3.5836121486850233`*^9, 3.5836121491367683`*^9}, {
   3.583612185131898*^9, 3.583612235843004*^9}, {3.583612266155593*^9, 
   3.5836123598047037`*^9}, {3.583612450799273*^9, 3.5836126129725657`*^9}, {
   3.583612649444406*^9, 3.583612659245757*^9}, {3.583612798723405*^9, 
   3.5836130569878187`*^9}, {3.583613184162347*^9, 3.58361326491588*^9}, {
   3.5836137652636223`*^9, 3.5836137697665567`*^9}, {3.583613869494088*^9, 
   3.583613916766377*^9}, {3.583614130329897*^9, 3.583614182535926*^9}, {
   3.583614223191633*^9, 3.583614360301526*^9}, {3.5836144464515343`*^9, 
   3.583614464996048*^9}, {3.58361461640648*^9, 3.583614661463748*^9}, {
   3.583614775082646*^9, 3.583614794483403*^9}, {3.583674893626588*^9, 
   3.583674998183098*^9}, {3.5836750758697653`*^9, 3.583675146509624*^9}, {
   3.5836751994072104`*^9, 3.583675298526833*^9}, {3.5836764090262957`*^9, 
   3.583676481383636*^9}, {3.583676548600483*^9, 3.583676548748131*^9}, {
   3.583676613567326*^9, 3.5836766413915653`*^9}, {3.583676682809504*^9, 
   3.583676704931024*^9}, {3.583676735013506*^9, 3.583676799455542*^9}, {
   3.583676906080701*^9, 3.5836769404670763`*^9}, {3.583677027032062*^9, 
   3.583677137608968*^9}, {3.5836771769495783`*^9, 3.5836773162990017`*^9}, {
   3.5836773501335506`*^9, 3.583677361137568*^9}, {3.5836774400790033`*^9, 
   3.5836776383375874`*^9}, {3.5836777339061193`*^9, 3.58367779190267*^9}, {
   3.583677877519021*^9, 3.58367796150695*^9}, {3.583677997194104*^9, 
   3.583677999201078*^9}, {3.583678119386209*^9, 3.583678125514632*^9}, {
   3.5836866903700323`*^9, 3.583686719505563*^9}, {3.5837751936560583`*^9, 
   3.583775196075613*^9}, {3.583783217061591*^9, 3.5837832204543324`*^9}, {
   3.5837832518353853`*^9, 3.5837833527589827`*^9}, {3.5837870373818827`*^9, 
   3.5837870380067463`*^9}, 3.583950626225877*^9, {3.5839506660673532`*^9, 
   3.5839506927458887`*^9}, {3.583950762121608*^9, 3.583950770747435*^9}, {
   3.583950829515133*^9, 3.583950864735855*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     ButtonBox["\<\"Generate Random Orbigraph\"\>",
      Appearance->Automatic,
      ButtonFunction:>
       Dynamic[$CellContext`coveringGraph = 
         Style["Nothing", 
           "Subsubsection"]; $CellContext`randOrbi = \
$CellContext`GenerateRandomReversibleOrbigraph[3, 3]; $CellContext`randOrbi = 
         SetProperty[
           Orbigraphs`AdjacencyOrbigraph[$CellContext`randOrbi], {
           VertexSize -> 0.1, ImageSize -> {300, 300}, 
            VertexStyle -> {1 -> Red, 2 -> Yellow, 3 -> Purple}, 
            VertexShapeFunction -> {
             1 -> "Triangle", 2 -> "Square", 3 -> "Star"}}]],
      Evaluator->Automatic,
      Method->"Preemptive"]},
    {
     ButtonBox["\<\"Generate Finite Covering\"\>",
      Appearance->Automatic,
      ButtonFunction:>Dynamic[$CellContext`coveringGraph = SetProperty[
           OrbigraphCovers`CreateFiniteCoveringGraph[
            WeightedAdjacencyMatrix[$CellContext`randOrbi]], {
           ImageSize -> {300, 300}, GraphLayout -> "SpringEmbedding"}]; Null],
      
      Evaluator->Automatic,
      Method->"Preemptive"]},
    {
     DynamicBox[ToBoxes[$CellContext`coveringGraph, StandardForm],
      ImageSizeCache->{63., {5., 13.}}]},
    {
     GraphicsBox[
      {Arrowheads[0.1], ArrowBox[{{0, 0.3}, {0, -0.3}}]}]},
    {
     DynamicBox[ToBoxes[$CellContext`randOrbi, StandardForm],
      ImageSizeCache->{63., {5., 13.}}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Center}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{{3.583677055850209*^9, 3.583677075289405*^9}, 
   3.583677108102936*^9, {3.583677186264792*^9, 3.583677192605238*^9}, {
   3.583677337620619*^9, 3.583677357672565*^9}, 3.583677422242279*^9, 
   3.5836774591760597`*^9, {3.58367749036909*^9, 3.5836776140232353`*^9}, 
   3.58367779623744*^9, 3.583677962862885*^9, 3.5836780004666653`*^9, {
   3.5836781203669357`*^9, 3.583678125837475*^9}, {3.583686701727104*^9, 
   3.58368671986992*^9}, 3.583768275664652*^9, 3.583768915899543*^9, 
   3.583774927235784*^9, {3.583775170315301*^9, 3.583775196528961*^9}, 
   3.5837818410328093`*^9, 3.583782785587515*^9, {3.583783303284816*^9, 
   3.583783370013776*^9}, 3.583783408517316*^9, 3.583786678515514*^9, 
   3.58378716392922*^9, 3.583949367958455*^9, 3.58394990876237*^9, 
   3.5839500233315763`*^9, {3.583950849052989*^9, 3.583950865299144*^9}, 
   3.583950906286193*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 TextAlignment->Center,
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\<\
How did we discover and prove this connection?\
\>", "Section",
 CellChangeTimes->{{3.583504537673525*^9, 3.583504582132621*^9}, {
  3.583509437760704*^9, 3.583509440334321*^9}, {3.583604913812951*^9, 
  3.5836049144171343`*^9}, {3.583604949342388*^9, 3.583604952190271*^9}, {
  3.583611444032045*^9, 3.5836114865967817`*^9}, {3.5836753545761843`*^9, 
  3.583675361473876*^9}, {3.583678168528171*^9, 3.583678183381459*^9}, {
  3.583687813332683*^9, 3.5836878140960913`*^9}}],

Cell[CellGroupData[{

Cell["\<\
Comes from Markov chain property: Reversibility\
\>", "Item",
 CellChangeTimes->{{3.583603153527471*^9, 3.5836031912009563`*^9}, {
  3.583604909628951*^9, 3.583604921172461*^9}, {3.583605049452754*^9, 
  3.583605149692397*^9}, {3.583611519709037*^9, 3.583611520364934*^9}, {
  3.583611614267494*^9, 3.583611621170806*^9}, {3.5836117425548553`*^9, 
  3.583611750895398*^9}, {3.583675364823827*^9, 3.583675382895338*^9}, {
  3.583678186228922*^9, 3.5836781970588617`*^9}, {3.583687776296733*^9, 
  3.583687776302123*^9}}],

Cell[TextData[{
 "Detailed balance equation: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[Pi]", "i"], 
     SubscriptBox["P", 
      RowBox[{"i", ",", " ", "j"}]]}], "=", " ", 
    RowBox[{
     SubscriptBox["\[Pi]", "j"], 
     SubscriptBox["P", 
      RowBox[{"j", ",", "i"}]]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Item",
 CellChangeTimes->{{3.583603153527471*^9, 3.5836031912009563`*^9}, {
  3.583604909628951*^9, 3.583604921172461*^9}, {3.583605049452754*^9, 
  3.583605149692397*^9}, {3.583611519709037*^9, 3.583611520364934*^9}, {
  3.583611614267494*^9, 3.583611621170806*^9}, {3.5836117425548553`*^9, 
  3.583611750895398*^9}, {3.583675364823827*^9, 3.583675382895338*^9}, {
  3.583678186228922*^9, 3.5836781970588617`*^9}, {3.583687776296733*^9, 
  3.583687807806933*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"rightArrw", " ", "=", " ", 
     RowBox[{"Graphics", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Arrowheads", "[", ".1", "]"}], ",", 
        RowBox[{"Arrow", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1.5"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1.5", ",", "0"}], "}"}]}], "}"}], "]"}]}], "}"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ro", " ", "=", " ", 
     RowBox[{"GenerateRandomReversibleOrbigraph", "[", 
      RowBox[{"3", ",", "3"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"markovChain", " ", "=", " ", 
     RowBox[{"MarkovProcessFromOrbigraph", "@", "ro"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ro", " ", "=", " ", 
     RowBox[{"SetProperty", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"AdjacencyOrbigraph", "@", "ro"}], ",", "\[IndentingNewLine]", 
       
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"300", ",", "300"}], "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"VertexSize", "\[Rule]", ".1"}], ",", "\[IndentingNewLine]", 
         
         RowBox[{"VertexStyle", "\[Rule]", "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"1", "\[Rule]", " ", "Red"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{"2", "\[Rule]", " ", "Yellow"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"3", "\[Rule]", "Purple"}]}], "\[IndentingNewLine]", 
           "}"}]}], ",", "\[IndentingNewLine]", " ", 
         RowBox[{"VertexShapeFunction", "\[Rule]", "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"1", "\[Rule]", " ", "\"\<Triangle\>\""}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{"2", "\[Rule]", " ", "\"\<Square\>\""}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"3", "\[Rule]", "\"\<Star\>\""}]}], "\[IndentingNewLine]",
            "}"}]}]}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"totalCounts", " ", "=", " ", "0"}], ";"}], "\[IndentingNewLine]",
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"GenerateRandomWalk", "[", 
     RowBox[{"chain_DiscreteMarkovProcess", ",", " ", "len_Integer"}], "]"}], 
    " ", ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"counts", " ", ",", 
        RowBox[{"walk", "=", " ", 
         RowBox[{"{", "}"}]}], ",", " ", 
        RowBox[{"cur", "=", "1"}], ",", "next", ",", "i", ",", "  ", 
        RowBox[{"G", " ", "=", " ", 
         RowBox[{"Graph", "@", "chain"}]}], ",", " ", 
        RowBox[{"T", "=", 
         RowBox[{"Normal", "@", 
          RowBox[{"MarkovProcessProperties", "[", 
           RowBox[{"chain", ",", " ", "\"\<TransitionMatrix\>\""}], 
           "]"}]}]}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"cur", " ", "=", " ", 
        RowBox[{"RandomChoice", "[", 
         RowBox[{"VertexList", "@", "G"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"counts", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{"ConstantArray", "[", 
          RowBox[{"0", ",", " ", 
           RowBox[{"VertexCount", "@", "G"}]}], "]"}], "}"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", " ", "=", " ", "0"}], ",", " ", 
         RowBox[{"i", " ", "<", " ", "len"}], ",", " ", 
         RowBox[{"i", "++"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"next", " ", "=", " ", 
           RowBox[{"RandomChoice", "[", 
            RowBox[{
             RowBox[{"Cases", "[", 
              RowBox[{
               RowBox[{
               "T", "\[LeftDoubleBracket]", "cur", "\[RightDoubleBracket]"}], 
               ",", " ", 
               RowBox[{"x_", "/;", 
                RowBox[{"x", " ", "\[NotEqual]", " ", "0"}]}]}], "]"}], 
             "\[Rule]", " ", 
             RowBox[{"Flatten", "[", 
              RowBox[{
               RowBox[{"Position", "[", 
                RowBox[{
                 RowBox[{
                 "T", "\[LeftDoubleBracket]", "cur", 
                  "\[RightDoubleBracket]"}], ",", " ", 
                 RowBox[{"x_", "/;", 
                  RowBox[{"x", " ", "\[NotEqual]", " ", "0"}]}]}], "]"}], ",",
                "1"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"walk", " ", "=", " ", 
           RowBox[{"Append", "[", 
            RowBox[{"walk", ",", " ", "next"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"counts", " ", "=", " ", 
           RowBox[{"Append", "[", 
            RowBox[{"counts", ",", " ", 
             RowBox[{"Last", "@", "counts"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"counts", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{"Length", "@", "counts"}], ",", "next"}], 
            "\[RightDoubleBracket]"}], "++"}], ";", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"cur", " ", "=", " ", "next"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", 
         RowBox[{"walk", ",", " ", "counts"}], "}"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"w", " ", "=", " ", 
     RowBox[{"GenerateRandomWalk", "[", 
      RowBox[{"markovChain", ",", " ", "5000"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"normalizedOrbigraph", " ", "=", " ", 
     RowBox[{"SetProperty", "[", 
      RowBox[{"ro", ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"EdgeWeight", "\[Rule]", " ", 
          RowBox[{"N", "[", 
           RowBox[{
            RowBox[{"PropertyValue", "[", 
             RowBox[{"ro", ",", " ", "EdgeWeight"}], "]"}], "/", "3"}], 
           "]"}]}], ",", " ", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"300", ",", " ", "200"}], "}"}]}]}], "}"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"Row", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{"ro", ",", "\[IndentingNewLine]", 
       RowBox[{"Spacer", "[", "20", "]"}], ",", "\[IndentingNewLine]", 
       "rightArrw", ",", "\[IndentingNewLine]", 
       RowBox[{"Spacer", "[", "20", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Row", "[", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"HighlightGraph", "[", 
             RowBox[{"normalizedOrbigraph", ",", " ", 
              RowBox[{"{", 
               RowBox[{"Style", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"First", "@", "w"}], ")"}], "\[LeftDoubleBracket]",
                   "t", "\[RightDoubleBracket]"}], ",", " ", 
                 RowBox[{"Lighter", "@", "Pink"}]}], "]"}], "}"}]}], "]"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"Spacer", "[", "20", "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Style", "[", 
             RowBox[{
              RowBox[{"StringJoin", "@", 
               RowBox[{"{", 
                RowBox[{"\"\<\[Pi] = [\>\"", ",", 
                 RowBox[{"Riffle", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"ToString", "@", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "]"}]}], "&"}], "/@", 
                    RowBox[{"N", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Last", "@", "w"}], ")"}], "\[LeftDoubleBracket]",
                     "t", "\[RightDoubleBracket]"}], "/", "t"}], "]"}]}], 
                   ",", "\"\<, \>\"", ",", " ", "2"}], "]"}], ",", " ", 
                 "\"\<]\>\""}], "}"}]}], ",", " ", "\"\<Subsubsection\>\""}], 
             "]"}]}], "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"t", ",", " ", "1", ",", " ", 
           RowBox[{"Length", "@", 
            RowBox[{"First", "@", "w"}]}], ",", " ", "1"}], "}"}]}], 
        "\[IndentingNewLine]", "]"}]}], "}"}], "\[IndentingNewLine]", ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Alignment", "\[Rule]", "Center"}]}], "\[IndentingNewLine]", 
    "]"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]"}]}]], "Input",
 CellOpen->False,
 CellChangeTimes->{{3.583504944724468*^9, 3.5835049592416162`*^9}, {
   3.5835049927540073`*^9, 3.583505053865456*^9}, {3.583505222942459*^9, 
   3.583505241869524*^9}, {3.5835054829201117`*^9, 3.583505569151123*^9}, {
   3.583505736571486*^9, 3.583505791465477*^9}, {3.583505966062635*^9, 
   3.58350597062294*^9}, {3.5835060884056*^9, 3.58350609657927*^9}, {
   3.58350634765458*^9, 3.58350642598237*^9}, {3.583506503115983*^9, 
   3.583506599627789*^9}, {3.583506975530591*^9, 3.58350701624997*^9}, {
   3.5835070866885147`*^9, 3.5835072337917957`*^9}, {3.583507382884967*^9, 
   3.583507581783242*^9}, {3.583507611928054*^9, 3.583507757178371*^9}, {
   3.583507801074963*^9, 3.583507912632885*^9}, {3.583507944307445*^9, 
   3.583508018584435*^9}, {3.5835089710368347`*^9, 3.5835089808353148`*^9}, {
   3.583509036635407*^9, 3.583509041090455*^9}, {3.583509077009577*^9, 
   3.58350908729753*^9}, {3.5835091294576683`*^9, 3.583509141560104*^9}, {
   3.583509248894765*^9, 3.583509253845396*^9}, {3.583509488665283*^9, 
   3.5835095038468847`*^9}, {3.583511423096323*^9, 3.583511565989129*^9}, {
   3.583513828523304*^9, 3.5835138470916357`*^9}, {3.5835143482647057`*^9, 
   3.5835143613602858`*^9}, {3.583514547106325*^9, 3.583514581296501*^9}, {
   3.5835146660939903`*^9, 3.583514688178154*^9}, {3.583514809012204*^9, 
   3.5835148537166433`*^9}, {3.583514911777981*^9, 3.583514938576725*^9}, {
   3.5835149967354383`*^9, 3.583515087119169*^9}, {3.583515161333404*^9, 
   3.5835152123477907`*^9}, {3.583515368944729*^9, 3.583515423168466*^9}, {
   3.583515457031969*^9, 3.583515474702992*^9}, {3.583515529454176*^9, 
   3.5835156287868147`*^9}, 3.58351569717947*^9, {3.583515751937457*^9, 
   3.583515765166383*^9}, {3.583515842954213*^9, 3.583515865390348*^9}, {
   3.583515897550774*^9, 3.583515905480852*^9}, {3.5835165467699413`*^9, 
   3.583516591806279*^9}, {3.583516680606122*^9, 3.5835167003583393`*^9}, {
   3.583517198428335*^9, 3.583517254564885*^9}, {3.5835175064851713`*^9, 
   3.583517581643581*^9}, {3.583517628732957*^9, 3.583517643689509*^9}, {
   3.583521833550868*^9, 3.5835218362706757`*^9}, {3.5835236927229137`*^9, 
   3.5835237037387667`*^9}, {3.58352460889541*^9, 3.583524611091569*^9}, {
   3.583524668813601*^9, 3.5835246706872253`*^9}, {3.5835247443577538`*^9, 
   3.583524881995575*^9}, {3.583524956938699*^9, 3.583524997448794*^9}, {
   3.5835250402165203`*^9, 3.583525195900112*^9}, {3.583525509647999*^9, 
   3.58352556753292*^9}, {3.5835256771322117`*^9, 3.583525740599876*^9}, {
   3.583526020236393*^9, 3.583526043483322*^9}, {3.5835260835152197`*^9, 
   3.583526145184979*^9}, {3.5835262240238247`*^9, 3.583526273165412*^9}, {
   3.583526443214428*^9, 3.583526472444624*^9}, {3.583526532074785*^9, 
   3.583526568012516*^9}, {3.583526603163302*^9, 3.583526663928062*^9}, {
   3.583526714086712*^9, 3.5835268056137667`*^9}, {3.583526840675075*^9, 
   3.583526890628715*^9}, {3.583526954115641*^9, 3.583527137566971*^9}, {
   3.583527222604545*^9, 3.583527320330392*^9}, {3.583527359370315*^9, 
   3.583527371993815*^9}, {3.5835274136648283`*^9, 3.583527640437421*^9}, {
   3.583528035288609*^9, 3.5835280653090677`*^9}, {3.5835281154766493`*^9, 
   3.583528179634451*^9}, {3.583528252521051*^9, 3.583528274608552*^9}, {
   3.583528387406331*^9, 3.58352842448392*^9}, {3.583528477612151*^9, 
   3.5835288453014307`*^9}, 3.583530379399987*^9, {3.58353069240977*^9, 
   3.583530709811276*^9}, {3.5835307878087997`*^9, 3.583530797476122*^9}, {
   3.583531386321269*^9, 3.583531795145163*^9}, {3.5835320674353943`*^9, 
   3.583532095834298*^9}, {3.583532128082847*^9, 3.5835321534596157`*^9}, {
   3.583532377128251*^9, 3.583532406332727*^9}, {3.583532452005969*^9, 
   3.583532457836699*^9}, {3.583532588658032*^9, 3.583532635203437*^9}, {
   3.583532679769361*^9, 3.583532725462553*^9}, {3.583534990723576*^9, 
   3.5835350099935093`*^9}, {3.583535041616453*^9, 3.583535125743266*^9}, {
   3.583535177669486*^9, 3.583535195093073*^9}, {3.583535229754916*^9, 
   3.583535248316104*^9}, {3.583535311242296*^9, 3.583535313085679*^9}, 
   3.583535360440584*^9, {3.583535406552835*^9, 3.583535436136731*^9}, {
   3.583535544167017*^9, 3.5835356204086742`*^9}, {3.5835357307467127`*^9, 
   3.5835357484648943`*^9}, {3.5835358234156523`*^9, 3.583535829602228*^9}, {
   3.58353593467024*^9, 3.5835359687767344`*^9}, {3.583536027835637*^9, 
   3.583536103497898*^9}, {3.583537603515522*^9, 3.583537679051919*^9}, {
   3.58359019173496*^9, 3.5835902214749413`*^9}, {3.583590273995901*^9, 
   3.5835903084980927`*^9}, {3.5835903597292233`*^9, 
   3.5835904180874147`*^9}, {3.583590483268821*^9, 3.583590484838483*^9}, 
   3.58359051787752*^9, {3.583590922874465*^9, 3.5835909575371113`*^9}, {
   3.5835910007219143`*^9, 3.583591002233374*^9}, {3.5835910415461283`*^9, 
   3.583591226189279*^9}, {3.583591283684677*^9, 3.5835913088443813`*^9}, 
   3.583591379834833*^9, {3.5835915177388277`*^9, 3.583591568836029*^9}, {
   3.583591745005522*^9, 3.583591881078197*^9}, {3.583591912759396*^9, 
   3.583591913392231*^9}, {3.583592009609057*^9, 3.5835920130196867`*^9}, {
   3.5835920848695593`*^9, 3.583592137060684*^9}, {3.583592173075921*^9, 
   3.583592194538849*^9}, {3.5835922563359613`*^9, 3.5835922722646723`*^9}, {
   3.5835923215833073`*^9, 3.5835923953440866`*^9}, 3.583592593811945*^9, {
   3.5835927656128817`*^9, 3.5835927657985153`*^9}, {3.583592799330533*^9, 
   3.58359294457218*^9}, {3.583593035030363*^9, 3.5835933066756153`*^9}, 
   3.583593708246862*^9, {3.583593738550124*^9, 3.583593739923765*^9}, {
   3.583593820135426*^9, 3.583593960071262*^9}, {3.583594325672365*^9, 
   3.583594584369133*^9}, {3.583594617715447*^9, 3.583594665699744*^9}, {
   3.583594717018062*^9, 3.5835947449287767`*^9}, {3.583594798981761*^9, 
   3.583594800999576*^9}, {3.583594854265675*^9, 3.583594934844824*^9}, {
   3.583601127602009*^9, 3.5836012265717897`*^9}, {3.583602068444725*^9, 
   3.5836020769246693`*^9}, {3.583602107196233*^9, 3.5836021080155993`*^9}, {
   3.5836021391383142`*^9, 3.58360216990254*^9}, {3.58360246241577*^9, 
   3.583602472796468*^9}, {3.5836025110302277`*^9, 3.58360263489089*^9}, {
   3.583602714359172*^9, 3.583602769488693*^9}, {3.583602867981946*^9, 
   3.5836029106827803`*^9}, {3.5836030121426086`*^9, 3.583603044337311*^9}, {
   3.583603083772376*^9, 3.58360309692288*^9}, {3.5836042338245687`*^9, 
   3.583604241991658*^9}, {3.5836042906584377`*^9, 3.583604311183337*^9}, {
   3.583604355897971*^9, 3.583604372288039*^9}, {3.583604412175*^9, 
   3.583604432679254*^9}, {3.583604706369153*^9, 3.583604741314386*^9}, {
   3.583604772574151*^9, 3.583604799371385*^9}, {3.583604833466195*^9, 
   3.583604835784227*^9}, {3.583604866539257*^9, 3.583604874402608*^9}, 
   3.583605166483511*^9, {3.583605245575007*^9, 3.583605320923502*^9}, {
   3.583605357193466*^9, 3.583605486989731*^9}, {3.583608078859827*^9, 
   3.583608160953828*^9}, 3.5836083545903*^9, {3.583608455892044*^9, 
   3.583608485641975*^9}, {3.583608591075652*^9, 3.583608601963703*^9}, {
   3.583608676028508*^9, 3.58360871682295*^9}, {3.583608837281521*^9, 
   3.5836088441018753`*^9}, {3.583609014683384*^9, 3.58360903722721*^9}, {
   3.583609089579075*^9, 3.583609138607018*^9}, {3.5836092168459578`*^9, 
   3.583609272732267*^9}, {3.5836094264726467`*^9, 3.583609480896968*^9}, {
   3.583609539065761*^9, 3.5836095779830008`*^9}, {3.5836099421206503`*^9, 
   3.583609997984088*^9}, {3.583610052521035*^9, 3.58361015862053*^9}, {
   3.5836102731098747`*^9, 3.5836103041535378`*^9}, {3.583610441862707*^9, 
   3.5836105226039352`*^9}, {3.583610566516078*^9, 3.583610967412826*^9}, {
   3.583611004579772*^9, 3.583611006350637*^9}, {3.5836117764832487`*^9, 
   3.5836118064047117`*^9}, {3.583611848074044*^9, 3.5836118972590837`*^9}, {
   3.58361201167624*^9, 3.5836120263903427`*^9}, {3.583612063284726*^9, 
   3.583612103873906*^9}, {3.5836121486850233`*^9, 3.5836121491367683`*^9}, {
   3.583612185131898*^9, 3.583612235843004*^9}, {3.583612266155593*^9, 
   3.5836123598047037`*^9}, {3.583612450799273*^9, 3.5836126129725657`*^9}, {
   3.583612649444406*^9, 3.583612659245757*^9}, {3.583612798723405*^9, 
   3.5836130569878187`*^9}, {3.583613184162347*^9, 3.58361326491588*^9}, {
   3.5836137652636223`*^9, 3.5836137697665567`*^9}, {3.583613869494088*^9, 
   3.583613916766377*^9}, {3.583614130329897*^9, 3.583614182535926*^9}, {
   3.583614223191633*^9, 3.583614360301526*^9}, {3.5836144464515343`*^9, 
   3.583614464996048*^9}, {3.58361461640648*^9, 3.583614661463748*^9}, {
   3.583614775082646*^9, 3.583614794483403*^9}, {3.583674893626588*^9, 
   3.583674998183098*^9}, {3.5836750758697653`*^9, 3.583675146509624*^9}, {
   3.5836751994072104`*^9, 3.583675298526833*^9}, {3.5836764090262957`*^9, 
   3.583676481383636*^9}, {3.583676548600483*^9, 3.583676548748131*^9}, {
   3.583676613567326*^9, 3.5836766413915653`*^9}, {3.583676682809504*^9, 
   3.583676704931024*^9}, {3.583676735013506*^9, 3.583676799455542*^9}, {
   3.583676906080701*^9, 3.5836769404670763`*^9}, {3.583677027032062*^9, 
   3.583677137608968*^9}, {3.5836771769495783`*^9, 3.5836773162990017`*^9}, {
   3.5836773501335506`*^9, 3.583677361137568*^9}, {3.5836774400790033`*^9, 
   3.5836776383375874`*^9}, {3.5836777339061193`*^9, 3.58367779190267*^9}, {
   3.583677877519021*^9, 3.58367796150695*^9}, {3.583677997194104*^9, 
   3.583677999201078*^9}, {3.583678119386209*^9, 3.583678125514632*^9}, {
   3.583678361187009*^9, 3.5836785942647953`*^9}, {3.5836786870021048`*^9, 
   3.583678705928645*^9}, {3.58367881565783*^9, 3.583678841084134*^9}, {
   3.58367887702275*^9, 3.583678944983087*^9}, {3.583679232635479*^9, 
   3.583679335655169*^9}, {3.583679366600268*^9, 3.5836793866464787`*^9}, {
   3.5836794658536377`*^9, 3.583679473403458*^9}, {3.583679527049088*^9, 
   3.583679540365937*^9}, {3.583679595815566*^9, 3.5836796192496433`*^9}, {
   3.5836796506575327`*^9, 3.583679656947229*^9}, {3.583679795615613*^9, 
   3.583679852623967*^9}, {3.583679889442295*^9, 3.583679910349654*^9}, {
   3.5836799618573303`*^9, 3.5836800369106293`*^9}, {3.583680068151997*^9, 
   3.5836800721920233`*^9}, {3.58368010645665*^9, 3.5836801429410267`*^9}, {
   3.583680210375046*^9, 3.583680246823821*^9}, {3.583680580005554*^9, 
   3.583680631187379*^9}, {3.583680700006166*^9, 3.583680707779031*^9}, {
   3.583680754915946*^9, 3.5836807680151033`*^9}, {3.583680856666069*^9, 
   3.583680915029519*^9}, {3.58368095100311*^9, 3.5836810857815437`*^9}, {
   3.583681144924734*^9, 3.583681149088915*^9}, {3.583681198010013*^9, 
   3.5836812391291037`*^9}, {3.583681311010866*^9, 3.5836813871058187`*^9}, {
   3.583681432343252*^9, 3.58368144689907*^9}, {3.583681484883464*^9, 
   3.583681552803913*^9}, {3.583681585497806*^9, 3.5836816062501793`*^9}, 
   3.583681655180058*^9, {3.583681709812937*^9, 3.583681820746499*^9}, {
   3.583681852505876*^9, 3.583682015354814*^9}, {3.5836820588903723`*^9, 
   3.583682060346836*^9}, {3.58368209576943*^9, 3.583682164660186*^9}, {
   3.5836822105277023`*^9, 3.583682223019555*^9}, {3.583682292439659*^9, 
   3.583682313064658*^9}, {3.583682362653328*^9, 3.583682381971726*^9}, {
   3.583682423797958*^9, 3.583682590978325*^9}, {3.583682733071864*^9, 
   3.5836827643343143`*^9}, {3.5836828004264917`*^9, 3.58368283163196*^9}, {
   3.583683020715406*^9, 3.583683295888502*^9}, {3.583686778660572*^9, 
   3.583686801101214*^9}, {3.58368686845372*^9, 3.583686893024583*^9}, {
   3.5836869230600557`*^9, 3.583687017689302*^9}, {3.58368707836311*^9, 
   3.583687079748101*^9}, {3.5836871150094337`*^9, 3.583687123178893*^9}, {
   3.583687177477149*^9, 3.583687253920505*^9}, {3.5836873270621433`*^9, 
   3.58368734781453*^9}, {3.583687391253746*^9, 3.5836875774145117`*^9}, {
   3.583687721878086*^9, 3.583687741210043*^9}, {3.583687934846437*^9, 
   3.583688475758307*^9}, 3.5836885877678823`*^9, {3.583688730571269*^9, 
   3.58368873069357*^9}, {3.583760553041141*^9, 3.5837606178295403`*^9}, {
   3.583760672900569*^9, 3.583760673381065*^9}, 3.583768759572474*^9, {
   3.583768797236494*^9, 3.583768861995996*^9}, {3.583774965574102*^9, 
   3.583775007597077*^9}, {3.5837752475990257`*^9, 3.583775251366438*^9}, {
   3.5837753507802362`*^9, 3.583775351074395*^9}, {3.58378171484179*^9, 
   3.583781743123892*^9}, {3.5837817923935328`*^9, 3.58378179264889*^9}, {
   3.5837818347431507`*^9, 3.5837818347882433`*^9}, {3.583782917949067*^9, 
   3.583782965539653*^9}, {3.583786758135909*^9, 3.5837867756958847`*^9}, {
   3.583786830432201*^9, 3.583786854545311*^9}, 3.5837869461968613`*^9, {
   3.583786992898437*^9, 3.583786993188991*^9}, {3.583787063564477*^9, 
   3.583787063864876*^9}, {3.583787197490011*^9, 3.5837872315214863`*^9}, {
   3.583787290702664*^9, 3.583787317212722*^9}, {3.583787362962726*^9, 
   3.583787438561173*^9}, {3.583787469429422*^9, 3.583787477163672*^9}, {
   3.583795439722282*^9, 3.583795440071904*^9}, {3.583848446369478*^9, 
   3.583848448485016*^9}, {3.583948856291999*^9, 3.583948856517352*^9}, {
   3.5839489111061077`*^9, 3.5839490595597687`*^9}, {3.583949108095182*^9, 
   3.58394911156038*^9}, {3.5839491700141983`*^9, 3.5839492610835247`*^9}, {
   3.58394941569631*^9, 3.5839494169597883`*^9}, {3.583949452409182*^9, 
   3.583949452989861*^9}, {3.583949924953377*^9, 3.5839499887730093`*^9}, {
   3.583950075773635*^9, 3.5839500760672398`*^9}, {3.5839501299389267`*^9, 
   3.5839501762494287`*^9}, {3.583950250405734*^9, 3.583950253872793*^9}, {
   3.5839503049531918`*^9, 3.583950307459197*^9}, {3.5839503502398*^9, 
   3.5839503504727182`*^9}, {3.583950425193295*^9, 3.583950441001552*^9}, {
   3.5839506829225407`*^9, 3.5839506856481657`*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    NamespaceBox["NetworkGraphics", 
     DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 2, 3}, {
          SparseArray[
           Automatic, {3, 3}, 0, {
            1, {{0, 3, 5, 7}, {{1}, {2}, {3}, {1}, {2}, {1}, {3}}}, {1, 1, 1, 
             1, 1, 1, 1}}], Null}, {
          EdgeLabels -> {"EdgeWeight"}, EdgeWeight -> {1, 1, 1, 1, 2, 2, 1}, 
           ImageSize -> {300, 300}, 
           VertexShapeFunction -> {
            3 -> "Star", 1 -> "Triangle", 2 -> "Square"}, VertexSize -> {0.1},
            VertexStyle -> {
            2 -> RGBColor[1, 1, 0], 1 -> RGBColor[1, 0, 0], 3 -> 
             RGBColor[0.5, 0, 0.5]}}]], Typeset`boxes, Typeset`boxes$s2d = 
       GraphicsGroupBox[{{
           Arrowheads[0.033845640434993135`], 
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation["VertexID$1", Automatic, Center], {
                0.7837491632322744, 0.14253123798800368`}, {
                0.7654548847099012, 0.3249376872086305}, {0.8294471439523772, 
                0.4310569329771463}, {1.1691743689633445`, 
                0.4310569329771464}, {1.2331666282058205`, 
                0.3249376872086306}, {1.2148723496834473`, 
                0.14253123798800377`}, 
                DynamicLocation["VertexID$1", Automatic, Center]}, 
               SplineDegree -> 7]], "DynamicName", BoxID -> "EdgeLabelID$1"], 
            
            InsetBox[
             FormBox["\"1\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$1", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation["VertexID$1", Automatic, Center], {
                1.4996551408641472`, 0.15538766072718618`}, 
                DynamicLocation["VertexID$2", Automatic, Center]}]], 
             "DynamicName", BoxID -> "EdgeLabelID$2"], 
            InsetBox[
             FormBox["\"1\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$2", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation["VertexID$1", Automatic, Center], {
                0.49965537822893086`, -0.15517368199281006`}, 
                DynamicLocation["VertexID$3", Automatic, Center]}]], 
             "DynamicName", BoxID -> "EdgeLabelID$3"], 
            InsetBox[
             FormBox["\"1\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$3", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation["VertexID$2", Automatic, Center], {
                1.4996551408641454`, -0.1553876607271827}, 
                DynamicLocation["VertexID$1", Automatic, Center]}]], 
             "DynamicName", BoxID -> "EdgeLabelID$4"], 
            InsetBox[
             FormBox["\"1\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$4", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation["VertexID$2", Automatic, Center], {
                2.0884787807381926`, 0.19078353238530218`}, {
                2.2873572582757835`, 0.2471797748458958}, {
                2.4145278827502406`, 0.18822269607102218`}, {
                2.4145278827502397`, -0.18822269607102404`}, {
                2.287357258275782, -0.24717977484589704`}, {
                2.0884787807381913`, -0.1907835323853023}, 
                DynamicLocation["VertexID$2", Automatic, Center]}, 
               SplineDegree -> 7]], "DynamicName", BoxID -> "EdgeLabelID$5"], 
            
            InsetBox[
             FormBox["\"2\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$5", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation["VertexID$3", Automatic, Center], {
                0.49965537822893, 0.1551736819928136}, 
                DynamicLocation["VertexID$1", Automatic, Center]}]], 
             "DynamicName", BoxID -> "EdgeLabelID$6"], 
            InsetBox[
             FormBox["\"2\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$6", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}, {
            TagBox[
             ArrowBox[
              BezierCurveBox[{
                DynamicLocation[
                "VertexID$3", Automatic, 
                 Center], {-0.08847925546775987, -0.19078353238530266`}, \
{-0.2873577330053505, -0.24717977484589745`}, {-0.414528357479808, \
-0.18822269607102463`}, {-0.4145283574798093, 
                0.1882226960710216}, {-0.2873577330053523, 
                0.24717977484589537`}, {-0.08847925546776125, 
                0.190783532385302}, 
                DynamicLocation["VertexID$3", Automatic, Center]}, 
               SplineDegree -> 7]], "DynamicName", BoxID -> "EdgeLabelID$7"], 
            
            InsetBox[
             FormBox["\"1\"", TraditionalForm], 
             Offset[{0, 2}, 
              DynamicLocation["EdgeLabelID$7", Automatic, 
               Scaled[0.5]]], 
             ImageScaled[{0.5, 0}], BaseStyle -> "Graphics"]}}, {
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{0.9993107564578608, 0.05610630242133012}, {
              0.9434667731101044, -0.04061803497252051}, {
              1.0551547398056171`, -0.04061803497252051}, {0.9993107564578608,
               0.05610630242133012}}], 
             RGBColor[1, 0, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$1"], 
           TagBox[
            StyleBox[
             
             RectangleBox[{1.9559122830757882`, -0.04408724219464307}, {
              2.0440867674650747`, 0.044087242194643224`}], 
             RGBColor[1, 1, 0], StripOnInput -> False], "DynamicName", BoxID -> 
            "VertexID$2"], 
           TagBox[
            StyleBox[
             
             PolygonBox[{{0., 0.05878295628249897}, {-0.014531977020410211`, 
              0.014824974934203658`}, {-0.05878295628249897, 
              0.013876778922938615`}, {-0.02351318251299959, \
-0.014238929141078945`}, {-0.03632989258548771, -0.05878295628249897}, {
              0., -0.032201440057333344`}, {
              0.03632989258548771, -0.05878295628249897}, {
              0.02351318251299959, -0.014238929141078945`}, {
              0.05878295628249897, 0.013876778922938615`}, {
              0.014531977020410211`, 0.014824974934203658`}, {0., 
              0.05878295628249897}}], 
             RGBColor[0.5, 0, 0.5], StripOnInput -> False], "DynamicName", 
            BoxID -> "VertexID$3"]}}], $CellContext`flag}, 
      TagBox[
       DynamicBox[
        GraphComputation`NetworkGraphicsBox[
        3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
        CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
         SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
         ImageSizeCache -> {{1.7606933090100947`, 
         296.2393066909899}, {-44.75211490221038, 35.239306690989906`}}], 
       MouseAppearanceTag["NetworkGraphics"]], AllowKernelInitialization -> 
      False, UnsavedVariables :> {$CellContext`flag}]], 
    DefaultBaseStyle -> {
     "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
     FrameTicks -> None, ImageSize -> {300, 300}],InterpretationBox[
    StyleBox[
     GraphicsBox[{}, BaselinePosition -> Baseline, ImageSize -> {20, 0}], 
     CacheGraphics -> False], 
    Spacer[20]],GraphicsBox[{
     Arrowheads[0.1], 
     ArrowBox[{{-1.5, 0}, {1.5, 0}}]}],InterpretationBox[
    StyleBox[
     GraphicsBox[{}, BaselinePosition -> Baseline, ImageSize -> {20, 0}], 
     CacheGraphics -> False], 
    Spacer[20]],TagBox[
    StyleBox[
     DynamicModuleBox[{$CellContext`t$$ = 1, Typeset`show$$ = True, 
       Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
       Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
       "\"untitled\"", Typeset`specs$$ = {{
          Hold[$CellContext`t$$], 1, 5000, 1}}, 
       Typeset`size$$ = {481., {98., 102.}}, Typeset`update$$ = 0, 
       Typeset`initDone$$, Typeset`skipInitDone$$ = 
       True, $CellContext`t$1031$$ = 0}, 
      DynamicBox[
       Manipulate`ManipulateBoxes[
       1, StandardForm, "Variables" :> {$CellContext`t$$ = 1}, 
        "ControllerVariables" :> {
          Hold[$CellContext`t$$, $CellContext`t$1031$$, 0]}, 
        "OtherVariables" :> {
         Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
          Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
          Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
          Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> Row[{
           HighlightGraph[$CellContext`normalizedOrbigraph, {
             Style[
              Part[
               First[$CellContext`w], $CellContext`t$$], 
              Lighter[Pink]]}], 
           Spacer[20], 
           Style[
            StringJoin[{"\[Pi] = [", 
              Riffle[
               Map[ToString[
                 NumberForm[#, {2, 2}]]& , 
                N[Part[
                   Last[$CellContext`w], $CellContext`t$$]/$CellContext`t$$]],
                ", ", 2], "]"}], "Subsubsection"]}], 
        "Specifications" :> {{$CellContext`t$$, 1, 5000, 1}}, "Options" :> {},
         "DefaultOptions" :> {}], ImageSizeCache -> {526., {142., 147.}}, 
       SingleEvaluation -> True], Deinitialization :> None, 
      DynamicModuleValues :> {}, SynchronousInitialization -> True, 
      UnsavedVariables :> {Typeset`initDone$$}, 
      UntrackedVariables :> {Typeset`size$$}], "Manipulate", Deployed -> True,
      StripOnInput -> False], 
    Manipulate`InterpretManipulate[1]]},
  "Row",
  DisplayFunction->(PaneBox[
    RowBox[{
      TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> Center]& ),
  
  InterpretationFunction->(RowBox[{"Row", "[", 
     RowBox[{
       RowBox[{"{", 
         TemplateSlotSequence[1, ","], "}"}], ",", 
       RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.583950289199018*^9, 3.583950308282628*^9}, {
   3.5839504353733873`*^9, 3.583950441707239*^9}, 3.583950906727216*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 TextAlignment->Center,
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Conclusion", "Section",
 CellChangeTimes->{{3.583504537673525*^9, 3.583504582132621*^9}, {
  3.583509437760704*^9, 3.583509440334321*^9}, {3.583604913812951*^9, 
  3.5836049144171343`*^9}, {3.583604949342388*^9, 3.583604952190271*^9}, {
  3.583611444032045*^9, 3.5836114865967817`*^9}, {3.5836753545761843`*^9, 
  3.583675361473876*^9}, {3.583678168528171*^9, 3.583678183381459*^9}, {
  3.583687813332683*^9, 3.5836878140960913`*^9}, {3.583758803332762*^9, 
  3.583758814710294*^9}}],

Cell[CellGroupData[{

Cell["\<\
Orbigraphs are graph theoretic analogues of Riemannian Orbifolds\
\>", "Item",
 CellChangeTimes->{{3.583603153527471*^9, 3.5836031912009563`*^9}, {
  3.583604909628951*^9, 3.583604921172461*^9}, {3.583605049452754*^9, 
  3.583605149692397*^9}, {3.583611519709037*^9, 3.583611520364934*^9}, {
  3.583611614267494*^9, 3.583611621170806*^9}, {3.5836117425548553`*^9, 
  3.583611750895398*^9}, {3.583675364823827*^9, 3.583675382895338*^9}, {
  3.583678186228922*^9, 3.5836781970588617`*^9}, {3.583687776296733*^9, 
  3.583687776302123*^9}, {3.58375881881995*^9, 3.5837588480516663`*^9}, {
  3.583765064938078*^9, 3.583765065107315*^9}}],

Cell["\<\
We can bound the number of singular points using the spectrum\
\>", "Item",
 CellChangeTimes->{{3.583603153527471*^9, 3.5836031912009563`*^9}, {
  3.583604909628951*^9, 3.583604921172461*^9}, {3.583605049452754*^9, 
  3.583605149692397*^9}, {3.583611519709037*^9, 3.583611520364934*^9}, {
  3.583611614267494*^9, 3.583611621170806*^9}, {3.5836117425548553`*^9, 
  3.583611750895398*^9}, {3.583675364823827*^9, 3.583675382895338*^9}, {
  3.583678186228922*^9, 3.5836781970588617`*^9}, {3.583687776296733*^9, 
  3.583687807806933*^9}, {3.583758878012148*^9, 3.5837589031131897`*^9}, {
  3.583767869960719*^9, 3.583767874102765*^9}}],

Cell["\<\
We can distinguish good and bad orbigraphs\
\>", "Item",
 CellChangeTimes->{{3.583603153527471*^9, 3.5836031912009563`*^9}, {
  3.583604909628951*^9, 3.583604921172461*^9}, {3.583605049452754*^9, 
  3.583605149692397*^9}, {3.583611519709037*^9, 3.583611520364934*^9}, {
  3.583611614267494*^9, 3.583611621170806*^9}, {3.5836117425548553`*^9, 
  3.583611750895398*^9}, {3.583675364823827*^9, 3.583675382895338*^9}, {
  3.583678186228922*^9, 3.5836781970588617`*^9}, {3.583687776296733*^9, 
  3.583687807806933*^9}, {3.583758878012148*^9, 3.583758890993688*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 TextAlignment->Center,
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["Acknowledgements", "Section",
 CellChangeTimes->{{3.583504537673525*^9, 3.583504582132621*^9}, {
  3.583509437760704*^9, 3.583509440334321*^9}, {3.583604913812951*^9, 
  3.5836049144171343`*^9}, {3.583604949342388*^9, 3.583604952190271*^9}, {
  3.583611444032045*^9, 3.5836114865967817`*^9}, {3.5836753545761843`*^9, 
  3.583675361473876*^9}, {3.583678168528171*^9, 3.583678183381459*^9}, {
  3.583687813332683*^9, 3.5836878140960913`*^9}, {3.583758803332762*^9, 
  3.583758814710294*^9}, {3.5837634262942657`*^9, 3.583763429831785*^9}}],

Cell[CellGroupData[{

Cell["Dr. Liz Stanhope", "Item",
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellChangeTimes->{3.5837632900331707`*^9}],

Cell["John S. Science Foundation", "Item",
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellChangeTimes->{3.583763290612342*^9}],

Cell["Miller Foundation", "Item",
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellChangeTimes->{3.583763291171896*^9}],

Cell["Lewis & Clark College", "Item",
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellChangeTimes->{3.583763291782172*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1439, 795},
WindowMargins->{{Automatic, -1}, {Automatic, 0}},
TaggingRules->{"SlideShow" -> True},
FrontEndVersion->"9.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (November 20, \
2012)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "SlideShowHeader"->{
  Cell[579, 22, 4349, 97, 75, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[7548, 191, 88, 2, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[53810, 1181, 88, 2, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[130668, 2834, 88, 2, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[297124, 5949, 88, 2, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[824842, 14808, 88, 2, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[858589, 15499, 88, 2, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[877908, 15847, 88, 2, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[914259, 16557, 88, 2, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[916805, 16614, 88, 2, 74, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"SlideShowHeader", 918392, 16666}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 4349, 97, 75, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[4931, 121, 231, 4, 92, "Title"],
Cell[CellGroupData[{
Cell[5187, 129, 221, 4, 28, "Item"],
Cell[5411, 135, 273, 4, 28, "Item"],
Cell[5687, 141, 315, 6, 28, "Item"],
Cell[6005, 149, 218, 4, 28, "Item"],
Cell[6226, 155, 223, 4, 28, "Item"]
}, Open  ]],
Cell[6464, 162, 1047, 24, 148, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7548, 191, 88, 2, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[7661, 197, 165, 2, 80, "Section"],
Cell[CellGroupData[{
Cell[7851, 203, 8963, 212, 19, "Input",
 CellOpen->False],
Cell[16817, 417, 36932, 757, 375, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[53810, 1181, 88, 2, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[53923, 1187, 254, 3, 80, "Section"],
Cell[CellGroupData[{
Cell[54202, 1194, 326, 8, 28, "Item"],
Cell[54531, 1204, 327, 8, 28, "Item"]
}, Open  ]],
Cell[CellGroupData[{
Cell[54895, 1217, 16191, 291, 19, "Input",
 CellOpen->False],
Cell[71089, 1510, 59518, 1317, 787, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[130668, 2834, 88, 2, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[130781, 2840, 208, 3, 80, "Section"],
Cell[CellGroupData[{
Cell[131014, 2847, 173, 2, 44, "Subsection"],
Cell[CellGroupData[{
Cell[131212, 2853, 10143, 177, 19, "Input",
 CellOpen->False],
Cell[141358, 3032, 155693, 2909, 451, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[297124, 5949, 88, 2, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[297237, 5955, 302, 4, 80, "Section"],
Cell[CellGroupData[{
Cell[297564, 5963, 9691, 249, 19, "Input",
 CellOpen->False],
Cell[307258, 6214, 517523, 8587, 705, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[824842, 14808, 88, 2, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[824955, 14814, 325, 4, 80, "Section"],
Cell[CellGroupData[{
Cell[825305, 14822, 554, 10, 28, "Item"],
Cell[825862, 14834, 412, 9, 28, "Item"]
}, Open  ]],
Cell[CellGroupData[{
Cell[826311, 14848, 23385, 452, 19, "Input",
 CellOpen->False],
Cell[849699, 15302, 8732, 187, 465, "Output"]
}, Open  ]],
Cell[858446, 15492, 94, 1, 28, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[858589, 15499, 88, 2, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[858702, 15505, 356, 5, 80, "Section"],
Cell[859061, 15512, 458, 7, 28, "Item"],
Cell[CellGroupData[{
Cell[859544, 15523, 15788, 261, 19, "Input",
 CellOpen->False],
Cell[875335, 15786, 2512, 54, 187, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[877908, 15847, 88, 2, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[878021, 15853, 484, 8, 80, "Section"],
Cell[CellGroupData[{
Cell[878530, 15865, 529, 9, 28, "Item"],
Cell[879062, 15876, 835, 21, 32, "Item"]
}, Open  ]],
Cell[CellGroupData[{
Cell[879934, 15902, 23027, 403, 19, "Input",
 CellOpen->False],
Cell[902964, 16307, 11234, 243, 317, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[914259, 16557, 88, 2, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[914372, 16563, 489, 7, 80, "Section"],
Cell[CellGroupData[{
Cell[914886, 16574, 642, 10, 28, "Item"],
Cell[915531, 16586, 640, 10, 28, "Item"],
Cell[916174, 16598, 570, 9, 28, "Item"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[916805, 16614, 88, 2, 74, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[916918, 16620, 543, 7, 80, "Section"],
Cell[CellGroupData[{
Cell[917486, 16631, 124, 3, 28, "Item"],
Cell[917613, 16636, 132, 3, 28, "Item"],
Cell[917748, 16641, 123, 3, 28, "Item"],
Cell[917874, 16646, 127, 3, 28, "Item"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
